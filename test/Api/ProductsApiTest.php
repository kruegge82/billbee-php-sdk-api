<?php
/**
 * ProductsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace kruegge82\billbee\Test\Api;

use \kruegge82\billbee\Configuration;
use \kruegge82\billbee\ApiException;
use \kruegge82\billbee\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ProductsApiTest Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for articleCreateArticle
     *
     * Creates a new product.
     *
     */
    public function testArticleCreateArticle()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleDeleteArticle
     *
     * Deletes a product.
     *
     */
    public function testArticleDeleteArticle()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleDeleteImage
     *
     * Deletes a single image by id.
     *
     */
    public function testArticleDeleteImage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleDeleteImageFromProduct
     *
     * Deletes a single image from a product.
     *
     */
    public function testArticleDeleteImageFromProduct()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleDeleteImages
     *
     * .
     *
     */
    public function testArticleDeleteImages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetArticle
     *
     * Queries a single article by id or by sku.
     *
     */
    public function testArticleGetArticle()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetCategory
     *
     * GEts a list of all defined categories.
     *
     */
    public function testArticleGetCategory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetCustomField
     *
     * Queries a single custom field.
     *
     */
    public function testArticleGetCustomField()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetCustomFields
     *
     * Queries a list of all custom fields.
     *
     */
    public function testArticleGetCustomFields()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetImage
     *
     * Returns a single image by id.
     *
     */
    public function testArticleGetImage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetImageFromProduct
     *
     * Returns a single image by id.
     *
     */
    public function testArticleGetImageFromProduct()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetImages
     *
     * Returns a list of all images of the product.
     *
     */
    public function testArticleGetImages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetList
     *
     * Get a list of all products.
     *
     */
    public function testArticleGetList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetPatchableFields
     *
     * Returns a list of fields which can be updated with the patch call.
     *
     */
    public function testArticleGetPatchableFields()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetReservedAmount
     *
     * Queries the reserved amount for a single article by id or by sku.
     *
     */
    public function testArticleGetReservedAmount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleGetStocks
     *
     * Query all defined stock locations.
     *
     */
    public function testArticleGetStocks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articlePatchArticle
     *
     * Updates one or more fields of a product.
     *
     */
    public function testArticlePatchArticle()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articlePutImage
     *
     * Add or update an existing image of a product.
     *
     */
    public function testArticlePutImage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articlePutImages
     *
     * Add multiple images to a product or replace the product images by the given images.
     *
     */
    public function testArticlePutImages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleUpdateStock
     *
     * Update the stock qty of an article.
     *
     */
    public function testArticleUpdateStock()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleUpdateStockCode
     *
     * Update the stock code of an article.
     *
     */
    public function testArticleUpdateStockCode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for articleUpdateStockMultiple
     *
     * Update the stock qty for multiple articles at once.
     *
     */
    public function testArticleUpdateStockMultiple()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchSearch
     *
     * Search for products, customers and orders.  Type can be \"order\", \"product\" and / or \"customer\"  Term can contain lucene query syntax.
     *
     */
    public function testSearchSearch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
