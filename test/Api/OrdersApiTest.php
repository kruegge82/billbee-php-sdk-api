<?php
/**
 * OrdersApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace kruegge82\billbee\Test\Api;

use \kruegge82\billbee\Configuration;
use \kruegge82\billbee\ApiException;
use \kruegge82\billbee\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrdersApiTest Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for layoutApiGetList
     *
     * .
     *
     */
    public function testLayoutApiGetList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiAddShipment
     *
     * Add a shipment to a given order.
     *
     */
    public function testOrderApiAddShipment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiCreateDeliveryNote
     *
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes..
     *
     */
    public function testOrderApiCreateDeliveryNote()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiCreateInvoice
     *
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes..
     *
     */
    public function testOrderApiCreateInvoice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiFind
     *
     * Find a single order by its external id (order number).
     *
     */
    public function testOrderApiFind()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiGet
     *
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute.
     *
     */
    public function testOrderApiGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiGetByExtRef
     *
     * Get a single order by its external order number.
     *
     */
    public function testOrderApiGetByExtRef()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiGetInvoiceList
     *
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate.
     *
     */
    public function testOrderApiGetInvoiceList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiGetList
     *
     * Get a list of all orders optionally filtered by date.
     *
     */
    public function testOrderApiGetList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiGetPatchableFields
     *
     * Returns a list of fields which can be updated with the orders/{id} patch call.
     *
     */
    public function testOrderApiGetPatchableFields()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiMessage
     *
     * Adds a message to the order.
     *
     */
    public function testOrderApiMessage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiParsePlaceholders
     *
     * Parses a text and replaces all placeholders.
     *
     */
    public function testOrderApiParsePlaceholders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiPatchOrder
     *
     * Updates one or more fields of an order.
     *
     */
    public function testOrderApiPatchOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiPostNewOrder
     *
     * Creates a new order in the Billbee account.
     *
     */
    public function testOrderApiPostNewOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiSendMessage
     *
     * Sends a message to the buyer.
     *
     */
    public function testOrderApiSendMessage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiTagsCreate
     *
     * Attach one or more tags to an order.
     *
     */
    public function testOrderApiTagsCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiTagsUpdate
     *
     * Sets the tags attached to an order.
     *
     */
    public function testOrderApiTagsUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiTriggerEvent
     *
     * Triggers a rule event.
     *
     */
    public function testOrderApiTriggerEvent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for orderApiUpdateState
     *
     * Changes the main state of a single order.
     *
     */
    public function testOrderApiUpdateState()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchSearch
     *
     * Search for products, customers and orders.  Type can be \"order\", \"product\" and / or \"customer\"  Term can contain lucene query syntax.
     *
     */
    public function testSearchSearch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
