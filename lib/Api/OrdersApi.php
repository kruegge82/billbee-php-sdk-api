<?php
/**
 * OrdersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use kruegge82\billbee\ApiException;
use kruegge82\billbee\Configuration;
use kruegge82\billbee\HeaderSelector;
use kruegge82\billbee\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'layoutApiGetList' => [
            'application/json',
        ],
        'orderApiAddShipment' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'orderApiCreateDeliveryNote' => [
            'application/json',
        ],
        'orderApiCreateInvoice' => [
            'application/json',
        ],
        'orderApiFind' => [
            'application/json',
        ],
        'orderApiGet' => [
            'application/json',
        ],
        'orderApiGetByExtRef' => [
            'application/json',
        ],
        'orderApiGetInvoiceList' => [
            'application/json',
        ],
        'orderApiGetList' => [
            'application/json',
        ],
        'orderApiGetPatchableFields' => [
            'application/json',
        ],
        'orderApiMessage' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'orderApiParsePlaceholders' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'orderApiPatchOrder' => [
            'application/json',
            'text/json',
            'application/x-www-form-urlencoded',
        ],
        'orderApiPostNewOrder' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'orderApiSendMessage' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'orderApiTagsCreate' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'orderApiTagsUpdate' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'orderApiTriggerEvent' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'orderApiUpdateState' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'searchSearch' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation layoutApiGetList
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['layoutApiGetList'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelsLayoutTemplate
     */
    public function layoutApiGetList(string $contentType = self::contentTypes['layoutApiGetList'][0])
    {
        list($response) = $this->layoutApiGetListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation layoutApiGetListWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['layoutApiGetList'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelsLayoutTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function layoutApiGetListWithHttpInfo(string $contentType = self::contentTypes['layoutApiGetList'][0])
    {
        $request = $this->layoutApiGetListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelsLayoutTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelsLayoutTemplate' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelsLayoutTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelsLayoutTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelsLayoutTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation layoutApiGetListAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['layoutApiGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function layoutApiGetListAsync(string $contentType = self::contentTypes['layoutApiGetList'][0])
    {
        return $this->layoutApiGetListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation layoutApiGetListAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['layoutApiGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function layoutApiGetListAsyncWithHttpInfo(string $contentType = self::contentTypes['layoutApiGetList'][0])
    {
        $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelsLayoutTemplate';
        $request = $this->layoutApiGetListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'layoutApiGetList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['layoutApiGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function layoutApiGetListRequest(string $contentType = self::contentTypes['layoutApiGetList'][0])
    {


        $resourcePath = '/api/v1/layouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiAddShipment
     *
     * Add a shipment to a given order
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel $model The shipment data to create the shipment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiAddShipment'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiAddShipment($id, $model, string $contentType = self::contentTypes['orderApiAddShipment'][0])
    {
        list($response) = $this->orderApiAddShipmentWithHttpInfo($id, $model, $contentType);
        return $response;
    }

    /**
     * Operation orderApiAddShipmentWithHttpInfo
     *
     * Add a shipment to a given order
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel $model The shipment data to create the shipment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiAddShipment'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiAddShipmentWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiAddShipment'][0])
    {
        $request = $this->orderApiAddShipmentRequest($id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiAddShipmentAsync
     *
     * Add a shipment to a given order
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel $model The shipment data to create the shipment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiAddShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiAddShipmentAsync($id, $model, string $contentType = self::contentTypes['orderApiAddShipment'][0])
    {
        return $this->orderApiAddShipmentAsyncWithHttpInfo($id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiAddShipmentAsyncWithHttpInfo
     *
     * Add a shipment to a given order
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel $model The shipment data to create the shipment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiAddShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiAddShipmentAsyncWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiAddShipment'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiAddShipmentRequest($id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiAddShipment'
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel $model The shipment data to create the shipment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiAddShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiAddShipmentRequest($id, $model, string $contentType = self::contentTypes['orderApiAddShipment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiAddShipment'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling orderApiAddShipment'
            );
        }


        $resourcePath = '/api/v1/orders/{id}/shipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiCreateDeliveryNote
     *
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $send_to_cloud_id Optionally specify the id of a billbee connected cloud device to send the pdf to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateDeliveryNote'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiCreateDeliveryNote($id, $include_pdf = false, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateDeliveryNote'][0])
    {
        list($response) = $this->orderApiCreateDeliveryNoteWithHttpInfo($id, $include_pdf, $send_to_cloud_id, $contentType);
        return $response;
    }

    /**
     * Operation orderApiCreateDeliveryNoteWithHttpInfo
     *
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $send_to_cloud_id Optionally specify the id of a billbee connected cloud device to send the pdf to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateDeliveryNote'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiCreateDeliveryNoteWithHttpInfo($id, $include_pdf = false, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateDeliveryNote'][0])
    {
        $request = $this->orderApiCreateDeliveryNoteRequest($id, $include_pdf, $send_to_cloud_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiCreateDeliveryNoteAsync
     *
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $send_to_cloud_id Optionally specify the id of a billbee connected cloud device to send the pdf to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateDeliveryNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiCreateDeliveryNoteAsync($id, $include_pdf = false, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateDeliveryNote'][0])
    {
        return $this->orderApiCreateDeliveryNoteAsyncWithHttpInfo($id, $include_pdf, $send_to_cloud_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiCreateDeliveryNoteAsyncWithHttpInfo
     *
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $send_to_cloud_id Optionally specify the id of a billbee connected cloud device to send the pdf to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateDeliveryNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiCreateDeliveryNoteAsyncWithHttpInfo($id, $include_pdf = false, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateDeliveryNote'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiCreateDeliveryNoteRequest($id, $include_pdf, $send_to_cloud_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiCreateDeliveryNote'
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $send_to_cloud_id Optionally specify the id of a billbee connected cloud device to send the pdf to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateDeliveryNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiCreateDeliveryNoteRequest($id, $include_pdf = false, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateDeliveryNote'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiCreateDeliveryNote'
            );
        }




        $resourcePath = '/api/v1/orders/CreateDeliveryNote/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_pdf,
            'includePdf', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $send_to_cloud_id,
            'sendToCloudId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiCreateInvoice
     *
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_invoice_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $template_id You can pass the id of an invoice template to overwrite the assigned template for invoice creation (optional)
     * @param  int $send_to_cloud_id You can pass the id of a connected cloud printer/storage to send the invoice to it (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateInvoice'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiInvoice
     */
    public function orderApiCreateInvoice($id, $include_invoice_pdf = false, $template_id = null, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateInvoice'][0])
    {
        list($response) = $this->orderApiCreateInvoiceWithHttpInfo($id, $include_invoice_pdf, $template_id, $send_to_cloud_id, $contentType);
        return $response;
    }

    /**
     * Operation orderApiCreateInvoiceWithHttpInfo
     *
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_invoice_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $template_id You can pass the id of an invoice template to overwrite the assigned template for invoice creation (optional)
     * @param  int $send_to_cloud_id You can pass the id of a connected cloud printer/storage to send the invoice to it (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateInvoice'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiCreateInvoiceWithHttpInfo($id, $include_invoice_pdf = false, $template_id = null, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateInvoice'][0])
    {
        $request = $this->orderApiCreateInvoiceRequest($id, $include_invoice_pdf, $template_id, $send_to_cloud_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiInvoice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiInvoice' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiInvoice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiInvoice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiCreateInvoiceAsync
     *
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_invoice_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $template_id You can pass the id of an invoice template to overwrite the assigned template for invoice creation (optional)
     * @param  int $send_to_cloud_id You can pass the id of a connected cloud printer/storage to send the invoice to it (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiCreateInvoiceAsync($id, $include_invoice_pdf = false, $template_id = null, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateInvoice'][0])
    {
        return $this->orderApiCreateInvoiceAsyncWithHttpInfo($id, $include_invoice_pdf, $template_id, $send_to_cloud_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiCreateInvoiceAsyncWithHttpInfo
     *
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_invoice_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $template_id You can pass the id of an invoice template to overwrite the assigned template for invoice creation (optional)
     * @param  int $send_to_cloud_id You can pass the id of a connected cloud printer/storage to send the invoice to it (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiCreateInvoiceAsyncWithHttpInfo($id, $include_invoice_pdf = false, $template_id = null, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateInvoice'][0])
    {
        $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiInvoice';
        $request = $this->orderApiCreateInvoiceRequest($id, $include_invoice_pdf, $template_id, $send_to_cloud_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiCreateInvoice'
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  bool $include_invoice_pdf If true, the PDF is included in the response as base64 encoded string (optional, default to false)
     * @param  int $template_id You can pass the id of an invoice template to overwrite the assigned template for invoice creation (optional)
     * @param  int $send_to_cloud_id You can pass the id of a connected cloud printer/storage to send the invoice to it (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiCreateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiCreateInvoiceRequest($id, $include_invoice_pdf = false, $template_id = null, $send_to_cloud_id = null, string $contentType = self::contentTypes['orderApiCreateInvoice'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiCreateInvoice'
            );
        }





        $resourcePath = '/api/v1/orders/CreateInvoice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_invoice_pdf,
            'includeInvoicePdf', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $template_id,
            'templateId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $send_to_cloud_id,
            'sendToCloudId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiFind
     *
     * Find a single order by its external id (order number)
     *
     * @param  string $id The order id from the external system (required)
     * @param  string $partner Optional the name of the shop/marketplace the order was imported from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiFind'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     * @deprecated
     */
    public function orderApiFind($id, $partner, string $contentType = self::contentTypes['orderApiFind'][0])
    {
        list($response) = $this->orderApiFindWithHttpInfo($id, $partner, $contentType);
        return $response;
    }

    /**
     * Operation orderApiFindWithHttpInfo
     *
     * Find a single order by its external id (order number)
     *
     * @param  string $id The order id from the external system (required)
     * @param  string $partner Optional the name of the shop/marketplace the order was imported from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiFind'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function orderApiFindWithHttpInfo($id, $partner, string $contentType = self::contentTypes['orderApiFind'][0])
    {
        $request = $this->orderApiFindRequest($id, $partner, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiFindAsync
     *
     * Find a single order by its external id (order number)
     *
     * @param  string $id The order id from the external system (required)
     * @param  string $partner Optional the name of the shop/marketplace the order was imported from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiFind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function orderApiFindAsync($id, $partner, string $contentType = self::contentTypes['orderApiFind'][0])
    {
        return $this->orderApiFindAsyncWithHttpInfo($id, $partner, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiFindAsyncWithHttpInfo
     *
     * Find a single order by its external id (order number)
     *
     * @param  string $id The order id from the external system (required)
     * @param  string $partner Optional the name of the shop/marketplace the order was imported from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiFind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function orderApiFindAsyncWithHttpInfo($id, $partner, string $contentType = self::contentTypes['orderApiFind'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiFindRequest($id, $partner, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiFind'
     *
     * @param  string $id The order id from the external system (required)
     * @param  string $partner Optional the name of the shop/marketplace the order was imported from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiFind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function orderApiFindRequest($id, $partner, string $contentType = self::contentTypes['orderApiFind'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiFind'
            );
        }

        // verify the required parameter 'partner' is set
        if ($partner === null || (is_array($partner) && count($partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner when calling orderApiFind'
            );
        }


        $resourcePath = '/api/v1/orders/find/{id}/{partner}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($partner !== null) {
            $resourcePath = str_replace(
                '{' . 'partner' . '}',
                ObjectSerializer::toPathValue($partner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiGet
     *
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder
     */
    public function orderApiGet($id, $article_title_source = 0, string $contentType = self::contentTypes['orderApiGet'][0])
    {
        list($response) = $this->orderApiGetWithHttpInfo($id, $article_title_source, $contentType);
        return $response;
    }

    /**
     * Operation orderApiGetWithHttpInfo
     *
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiGetWithHttpInfo($id, $article_title_source = 0, string $contentType = self::contentTypes['orderApiGet'][0])
    {
        $request = $this->orderApiGetRequest($id, $article_title_source, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiGetAsync
     *
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetAsync($id, $article_title_source = 0, string $contentType = self::contentTypes['orderApiGet'][0])
    {
        return $this->orderApiGetAsyncWithHttpInfo($id, $article_title_source, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiGetAsyncWithHttpInfo
     *
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetAsyncWithHttpInfo($id, $article_title_source = 0, string $contentType = self::contentTypes['orderApiGet'][0])
    {
        $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder';
        $request = $this->orderApiGetRequest($id, $article_title_source, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiGet'
     *
     * @param  int $id The internal billbee id of the order (required)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiGetRequest($id, $article_title_source = 0, string $contentType = self::contentTypes['orderApiGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiGet'
            );
        }



        $resourcePath = '/api/v1/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $article_title_source,
            'articleTitleSource', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiGetByExtRef
     *
     * Get a single order by its external order number
     *
     * @param  string $ext_ref The extern order number of the order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetByExtRef'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder
     */
    public function orderApiGetByExtRef($ext_ref, string $contentType = self::contentTypes['orderApiGetByExtRef'][0])
    {
        list($response) = $this->orderApiGetByExtRefWithHttpInfo($ext_ref, $contentType);
        return $response;
    }

    /**
     * Operation orderApiGetByExtRefWithHttpInfo
     *
     * Get a single order by its external order number
     *
     * @param  string $ext_ref The extern order number of the order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetByExtRef'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiGetByExtRefWithHttpInfo($ext_ref, string $contentType = self::contentTypes['orderApiGetByExtRef'][0])
    {
        $request = $this->orderApiGetByExtRefRequest($ext_ref, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiGetByExtRefAsync
     *
     * Get a single order by its external order number
     *
     * @param  string $ext_ref The extern order number of the order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetByExtRef'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetByExtRefAsync($ext_ref, string $contentType = self::contentTypes['orderApiGetByExtRef'][0])
    {
        return $this->orderApiGetByExtRefAsyncWithHttpInfo($ext_ref, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiGetByExtRefAsyncWithHttpInfo
     *
     * Get a single order by its external order number
     *
     * @param  string $ext_ref The extern order number of the order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetByExtRef'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetByExtRefAsyncWithHttpInfo($ext_ref, string $contentType = self::contentTypes['orderApiGetByExtRef'][0])
    {
        $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder';
        $request = $this->orderApiGetByExtRefRequest($ext_ref, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiGetByExtRef'
     *
     * @param  string $ext_ref The extern order number of the order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetByExtRef'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiGetByExtRefRequest($ext_ref, string $contentType = self::contentTypes['orderApiGetByExtRef'][0])
    {

        // verify the required parameter 'ext_ref' is set
        if ($ext_ref === null || (is_array($ext_ref) && count($ext_ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ext_ref when calling orderApiGetByExtRef'
            );
        }


        $resourcePath = '/api/v1/orders/findbyextref/{extRef}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ext_ref !== null) {
            $resourcePath = str_replace(
                '{' . 'extRef' . '}',
                ObjectSerializer::toPathValue($ext_ref),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiGetInvoiceList
     *
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate
     *
     * @param  \DateTime $min_invoice_date Specifies the oldest invoice date to include (optional)
     * @param  \DateTime $max_invoice_date Specifies the newest invoice date to include (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag tag (optional)
     * @param  \DateTime $min_pay_date min_pay_date (optional)
     * @param  \DateTime $max_pay_date max_pay_date (optional)
     * @param  bool $include_positions include_positions (optional, default to false)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetInvoiceList'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelInvoiceApiModel
     */
    public function orderApiGetInvoiceList($min_invoice_date = null, $max_invoice_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $min_pay_date = null, $max_pay_date = null, $include_positions = false, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetInvoiceList'][0])
    {
        list($response) = $this->orderApiGetInvoiceListWithHttpInfo($min_invoice_date, $max_invoice_date, $page, $page_size, $shop_id, $order_state_id, $tag, $min_pay_date, $max_pay_date, $include_positions, $exclude_tags, $contentType);
        return $response;
    }

    /**
     * Operation orderApiGetInvoiceListWithHttpInfo
     *
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate
     *
     * @param  \DateTime $min_invoice_date Specifies the oldest invoice date to include (optional)
     * @param  \DateTime $max_invoice_date Specifies the newest invoice date to include (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag (optional)
     * @param  \DateTime $min_pay_date (optional)
     * @param  \DateTime $max_pay_date (optional)
     * @param  bool $include_positions (optional, default to false)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetInvoiceList'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelInvoiceApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiGetInvoiceListWithHttpInfo($min_invoice_date = null, $max_invoice_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $min_pay_date = null, $max_pay_date = null, $include_positions = false, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetInvoiceList'][0])
    {
        $request = $this->orderApiGetInvoiceListRequest($min_invoice_date, $max_invoice_date, $page, $page_size, $shop_id, $order_state_id, $tag, $min_pay_date, $max_pay_date, $include_positions, $exclude_tags, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelInvoiceApiModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelInvoiceApiModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelInvoiceApiModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelInvoiceApiModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelInvoiceApiModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiGetInvoiceListAsync
     *
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate
     *
     * @param  \DateTime $min_invoice_date Specifies the oldest invoice date to include (optional)
     * @param  \DateTime $max_invoice_date Specifies the newest invoice date to include (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag (optional)
     * @param  \DateTime $min_pay_date (optional)
     * @param  \DateTime $max_pay_date (optional)
     * @param  bool $include_positions (optional, default to false)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetInvoiceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetInvoiceListAsync($min_invoice_date = null, $max_invoice_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $min_pay_date = null, $max_pay_date = null, $include_positions = false, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetInvoiceList'][0])
    {
        return $this->orderApiGetInvoiceListAsyncWithHttpInfo($min_invoice_date, $max_invoice_date, $page, $page_size, $shop_id, $order_state_id, $tag, $min_pay_date, $max_pay_date, $include_positions, $exclude_tags, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiGetInvoiceListAsyncWithHttpInfo
     *
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate
     *
     * @param  \DateTime $min_invoice_date Specifies the oldest invoice date to include (optional)
     * @param  \DateTime $max_invoice_date Specifies the newest invoice date to include (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag (optional)
     * @param  \DateTime $min_pay_date (optional)
     * @param  \DateTime $max_pay_date (optional)
     * @param  bool $include_positions (optional, default to false)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetInvoiceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetInvoiceListAsyncWithHttpInfo($min_invoice_date = null, $max_invoice_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $min_pay_date = null, $max_pay_date = null, $include_positions = false, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetInvoiceList'][0])
    {
        $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelInvoiceApiModel';
        $request = $this->orderApiGetInvoiceListRequest($min_invoice_date, $max_invoice_date, $page, $page_size, $shop_id, $order_state_id, $tag, $min_pay_date, $max_pay_date, $include_positions, $exclude_tags, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiGetInvoiceList'
     *
     * @param  \DateTime $min_invoice_date Specifies the oldest invoice date to include (optional)
     * @param  \DateTime $max_invoice_date Specifies the newest invoice date to include (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag (optional)
     * @param  \DateTime $min_pay_date (optional)
     * @param  \DateTime $max_pay_date (optional)
     * @param  bool $include_positions (optional, default to false)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetInvoiceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiGetInvoiceListRequest($min_invoice_date = null, $max_invoice_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $min_pay_date = null, $max_pay_date = null, $include_positions = false, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetInvoiceList'][0])
    {













        $resourcePath = '/api/v1/orders/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_invoice_date,
            'minInvoiceDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_invoice_date,
            'maxInvoiceDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shopId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_state_id,
            'orderStateId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_pay_date,
            'minPayDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_pay_date,
            'maxPayDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_positions,
            'includePositions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_tags,
            'excludeTags', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiGetList
     *
     * Get a list of all orders optionally filtered by date
     *
     * @param  \DateTime $min_order_date Specifies the oldest order date to include in the response (optional)
     * @param  \DateTime $max_order_date Specifies the newest order date to include in the response (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag Specifies a list of tags the order must have attached to be included in the response (optional)
     * @param  int $minimum_bill_bee_order_id If given, all delivered orders have an Id greater than or equal to the given minimumOrderId (optional)
     * @param  \DateTime $modified_at_min If given, the last modification has to be newer than the given date (optional)
     * @param  \DateTime $modified_at_max If given, the last modification has to be older or equal than the given date. (optional)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetList'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelOrder
     */
    public function orderApiGetList($min_order_date = null, $max_order_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $minimum_bill_bee_order_id = null, $modified_at_min = null, $modified_at_max = null, $article_title_source = 0, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetList'][0])
    {
        list($response) = $this->orderApiGetListWithHttpInfo($min_order_date, $max_order_date, $page, $page_size, $shop_id, $order_state_id, $tag, $minimum_bill_bee_order_id, $modified_at_min, $modified_at_max, $article_title_source, $exclude_tags, $contentType);
        return $response;
    }

    /**
     * Operation orderApiGetListWithHttpInfo
     *
     * Get a list of all orders optionally filtered by date
     *
     * @param  \DateTime $min_order_date Specifies the oldest order date to include in the response (optional)
     * @param  \DateTime $max_order_date Specifies the newest order date to include in the response (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag Specifies a list of tags the order must have attached to be included in the response (optional)
     * @param  int $minimum_bill_bee_order_id If given, all delivered orders have an Id greater than or equal to the given minimumOrderId (optional)
     * @param  \DateTime $modified_at_min If given, the last modification has to be newer than the given date (optional)
     * @param  \DateTime $modified_at_max If given, the last modification has to be older or equal than the given date. (optional)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetList'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiGetListWithHttpInfo($min_order_date = null, $max_order_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $minimum_bill_bee_order_id = null, $modified_at_min = null, $modified_at_max = null, $article_title_source = 0, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetList'][0])
    {
        $request = $this->orderApiGetListRequest($min_order_date, $max_order_date, $page, $page_size, $shop_id, $order_state_id, $tag, $minimum_bill_bee_order_id, $modified_at_min, $modified_at_max, $article_title_source, $exclude_tags, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelOrder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelOrder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelOrder';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiGetListAsync
     *
     * Get a list of all orders optionally filtered by date
     *
     * @param  \DateTime $min_order_date Specifies the oldest order date to include in the response (optional)
     * @param  \DateTime $max_order_date Specifies the newest order date to include in the response (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag Specifies a list of tags the order must have attached to be included in the response (optional)
     * @param  int $minimum_bill_bee_order_id If given, all delivered orders have an Id greater than or equal to the given minimumOrderId (optional)
     * @param  \DateTime $modified_at_min If given, the last modification has to be newer than the given date (optional)
     * @param  \DateTime $modified_at_max If given, the last modification has to be older or equal than the given date. (optional)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetListAsync($min_order_date = null, $max_order_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $minimum_bill_bee_order_id = null, $modified_at_min = null, $modified_at_max = null, $article_title_source = 0, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetList'][0])
    {
        return $this->orderApiGetListAsyncWithHttpInfo($min_order_date, $max_order_date, $page, $page_size, $shop_id, $order_state_id, $tag, $minimum_bill_bee_order_id, $modified_at_min, $modified_at_max, $article_title_source, $exclude_tags, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiGetListAsyncWithHttpInfo
     *
     * Get a list of all orders optionally filtered by date
     *
     * @param  \DateTime $min_order_date Specifies the oldest order date to include in the response (optional)
     * @param  \DateTime $max_order_date Specifies the newest order date to include in the response (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag Specifies a list of tags the order must have attached to be included in the response (optional)
     * @param  int $minimum_bill_bee_order_id If given, all delivered orders have an Id greater than or equal to the given minimumOrderId (optional)
     * @param  \DateTime $modified_at_min If given, the last modification has to be newer than the given date (optional)
     * @param  \DateTime $modified_at_max If given, the last modification has to be older or equal than the given date. (optional)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetListAsyncWithHttpInfo($min_order_date = null, $max_order_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $minimum_bill_bee_order_id = null, $modified_at_min = null, $modified_at_max = null, $article_title_source = 0, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetList'][0])
    {
        $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiPagedResultOfSystemCollectionsGenericListOfBillbeeInterfacesBillbeeAPIModelOrder';
        $request = $this->orderApiGetListRequest($min_order_date, $max_order_date, $page, $page_size, $shop_id, $order_state_id, $tag, $minimum_bill_bee_order_id, $modified_at_min, $modified_at_max, $article_title_source, $exclude_tags, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiGetList'
     *
     * @param  \DateTime $min_order_date Specifies the oldest order date to include in the response (optional)
     * @param  \DateTime $max_order_date Specifies the newest order date to include in the response (optional)
     * @param  int $page Specifies the page to request (optional, default to 1)
     * @param  int $page_size Specifies the pagesize. Defaults to 50, max value is 250 (optional, default to 50)
     * @param  int[] $shop_id Specifies a list of shop ids for which invoices should be included (optional)
     * @param  int[] $order_state_id Specifies a list of state ids to include in the response (optional)
     * @param  string[] $tag Specifies a list of tags the order must have attached to be included in the response (optional)
     * @param  int $minimum_bill_bee_order_id If given, all delivered orders have an Id greater than or equal to the given minimumOrderId (optional)
     * @param  \DateTime $modified_at_min If given, the last modification has to be newer than the given date (optional)
     * @param  \DateTime $modified_at_max If given, the last modification has to be older or equal than the given date. (optional)
     * @param  int $article_title_source The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional, default to 0)
     * @param  bool $exclude_tags If true the list of tags passed to the call are used to filter orders to not include these tags (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiGetListRequest($min_order_date = null, $max_order_date = null, $page = 1, $page_size = 50, $shop_id = null, $order_state_id = null, $tag = null, $minimum_bill_bee_order_id = null, $modified_at_min = null, $modified_at_max = null, $article_title_source = 0, $exclude_tags = false, string $contentType = self::contentTypes['orderApiGetList'][0])
    {














        $resourcePath = '/api/v1/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_order_date,
            'minOrderDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_order_date,
            'maxOrderDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shopId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_state_id,
            'orderStateId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $minimum_bill_bee_order_id,
            'minimumBillBeeOrderId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_at_min,
            'modifiedAtMin', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_at_max,
            'modifiedAtMax', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $article_title_source,
            'articleTitleSource', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_tags,
            'excludeTags', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiGetPatchableFields
     *
     * Returns a list of fields which can be updated with the orders/{id} patch call
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetPatchableFields'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiGetPatchableFields(string $contentType = self::contentTypes['orderApiGetPatchableFields'][0])
    {
        list($response) = $this->orderApiGetPatchableFieldsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation orderApiGetPatchableFieldsWithHttpInfo
     *
     * Returns a list of fields which can be updated with the orders/{id} patch call
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetPatchableFields'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiGetPatchableFieldsWithHttpInfo(string $contentType = self::contentTypes['orderApiGetPatchableFields'][0])
    {
        $request = $this->orderApiGetPatchableFieldsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiGetPatchableFieldsAsync
     *
     * Returns a list of fields which can be updated with the orders/{id} patch call
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetPatchableFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetPatchableFieldsAsync(string $contentType = self::contentTypes['orderApiGetPatchableFields'][0])
    {
        return $this->orderApiGetPatchableFieldsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiGetPatchableFieldsAsyncWithHttpInfo
     *
     * Returns a list of fields which can be updated with the orders/{id} patch call
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetPatchableFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiGetPatchableFieldsAsyncWithHttpInfo(string $contentType = self::contentTypes['orderApiGetPatchableFields'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiGetPatchableFieldsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiGetPatchableFields'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiGetPatchableFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiGetPatchableFieldsRequest(string $contentType = self::contentTypes['orderApiGetPatchableFields'][0])
    {


        $resourcePath = '/api/v1/orders/PatchableFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiMessage
     *
     * Adds a message to the order
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppModelApiOrderMessageModel $order_message order_message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiMessage'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiMessage($id, $order_message, string $contentType = self::contentTypes['orderApiMessage'][0])
    {
        list($response) = $this->orderApiMessageWithHttpInfo($id, $order_message, $contentType);
        return $response;
    }

    /**
     * Operation orderApiMessageWithHttpInfo
     *
     * Adds a message to the order
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppModelApiOrderMessageModel $order_message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiMessage'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiMessageWithHttpInfo($id, $order_message, string $contentType = self::contentTypes['orderApiMessage'][0])
    {
        $request = $this->orderApiMessageRequest($id, $order_message, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiMessageAsync
     *
     * Adds a message to the order
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppModelApiOrderMessageModel $order_message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiMessageAsync($id, $order_message, string $contentType = self::contentTypes['orderApiMessage'][0])
    {
        return $this->orderApiMessageAsyncWithHttpInfo($id, $order_message, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiMessageAsyncWithHttpInfo
     *
     * Adds a message to the order
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppModelApiOrderMessageModel $order_message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiMessageAsyncWithHttpInfo($id, $order_message, string $contentType = self::contentTypes['orderApiMessage'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiMessageRequest($id, $order_message, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiMessage'
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppModelApiOrderMessageModel $order_message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiMessageRequest($id, $order_message, string $contentType = self::contentTypes['orderApiMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiMessage'
            );
        }

        // verify the required parameter 'order_message' is set
        if ($order_message === null || (is_array($order_message) && count($order_message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_message when calling orderApiMessage'
            );
        }


        $resourcePath = '/api/v1/orders/{id}/message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_message)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_message));
            } else {
                $httpBody = $order_message;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiParsePlaceholders
     *
     * Parses a text and replaces all placeholders
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer $container container (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiParsePlaceholders'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiParsePlaceholders($id, $container, string $contentType = self::contentTypes['orderApiParsePlaceholders'][0])
    {
        list($response) = $this->orderApiParsePlaceholdersWithHttpInfo($id, $container, $contentType);
        return $response;
    }

    /**
     * Operation orderApiParsePlaceholdersWithHttpInfo
     *
     * Parses a text and replaces all placeholders
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer $container (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiParsePlaceholders'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiParsePlaceholdersWithHttpInfo($id, $container, string $contentType = self::contentTypes['orderApiParsePlaceholders'][0])
    {
        $request = $this->orderApiParsePlaceholdersRequest($id, $container, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiParsePlaceholdersAsync
     *
     * Parses a text and replaces all placeholders
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer $container (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiParsePlaceholders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiParsePlaceholdersAsync($id, $container, string $contentType = self::contentTypes['orderApiParsePlaceholders'][0])
    {
        return $this->orderApiParsePlaceholdersAsyncWithHttpInfo($id, $container, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiParsePlaceholdersAsyncWithHttpInfo
     *
     * Parses a text and replaces all placeholders
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer $container (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiParsePlaceholders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiParsePlaceholdersAsyncWithHttpInfo($id, $container, string $contentType = self::contentTypes['orderApiParsePlaceholders'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiParsePlaceholdersRequest($id, $container, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiParsePlaceholders'
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer $container (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiParsePlaceholders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiParsePlaceholdersRequest($id, $container, string $contentType = self::contentTypes['orderApiParsePlaceholders'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiParsePlaceholders'
            );
        }

        // verify the required parameter 'container' is set
        if ($container === null || (is_array($container) && count($container) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container when calling orderApiParsePlaceholders'
            );
        }


        $resourcePath = '/api/v1/orders/{id}/parse-placeholders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($container)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($container));
            } else {
                $httpBody = $container;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiPatchOrder
     *
     * Updates one or more fields of an order
     *
     * @param  int $id id (required)
     * @param  object $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPatchOrder'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder
     */
    public function orderApiPatchOrder($id, $model, string $contentType = self::contentTypes['orderApiPatchOrder'][0])
    {
        list($response) = $this->orderApiPatchOrderWithHttpInfo($id, $model, $contentType);
        return $response;
    }

    /**
     * Operation orderApiPatchOrderWithHttpInfo
     *
     * Updates one or more fields of an order
     *
     * @param  int $id (required)
     * @param  object $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPatchOrder'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiPatchOrderWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiPatchOrder'][0])
    {
        $request = $this->orderApiPatchOrderRequest($id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiPatchOrderAsync
     *
     * Updates one or more fields of an order
     *
     * @param  int $id (required)
     * @param  object $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPatchOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiPatchOrderAsync($id, $model, string $contentType = self::contentTypes['orderApiPatchOrder'][0])
    {
        return $this->orderApiPatchOrderAsyncWithHttpInfo($id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiPatchOrderAsyncWithHttpInfo
     *
     * Updates one or more fields of an order
     *
     * @param  int $id (required)
     * @param  object $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPatchOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiPatchOrderAsyncWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiPatchOrder'][0])
    {
        $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder';
        $request = $this->orderApiPatchOrderRequest($id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiPatchOrder'
     *
     * @param  int $id (required)
     * @param  object $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPatchOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiPatchOrderRequest($id, $model, string $contentType = self::contentTypes['orderApiPatchOrder'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiPatchOrder'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling orderApiPatchOrder'
            );
        }


        $resourcePath = '/api/v1/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiPostNewOrder
     *
     * Creates a new order in the Billbee account
     *
     * @param  \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrder $order_data order_data (required)
     * @param  int $shop_id Deprecated, if orderData.ApiAccountId is set, it will be used instead of &#39;shopId&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPostNewOrder'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder
     */
    public function orderApiPostNewOrder($order_data, $shop_id = null, string $contentType = self::contentTypes['orderApiPostNewOrder'][0])
    {
        list($response) = $this->orderApiPostNewOrderWithHttpInfo($order_data, $shop_id, $contentType);
        return $response;
    }

    /**
     * Operation orderApiPostNewOrderWithHttpInfo
     *
     * Creates a new order in the Billbee account
     *
     * @param  \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrder $order_data (required)
     * @param  int $shop_id Deprecated, if orderData.ApiAccountId is set, it will be used instead of &#39;shopId&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPostNewOrder'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiPostNewOrderWithHttpInfo($order_data, $shop_id = null, string $contentType = self::contentTypes['orderApiPostNewOrder'][0])
    {
        $request = $this->orderApiPostNewOrderRequest($order_data, $shop_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiPostNewOrderAsync
     *
     * Creates a new order in the Billbee account
     *
     * @param  \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrder $order_data (required)
     * @param  int $shop_id Deprecated, if orderData.ApiAccountId is set, it will be used instead of &#39;shopId&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPostNewOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiPostNewOrderAsync($order_data, $shop_id = null, string $contentType = self::contentTypes['orderApiPostNewOrder'][0])
    {
        return $this->orderApiPostNewOrderAsyncWithHttpInfo($order_data, $shop_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiPostNewOrderAsyncWithHttpInfo
     *
     * Creates a new order in the Billbee account
     *
     * @param  \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrder $order_data (required)
     * @param  int $shop_id Deprecated, if orderData.ApiAccountId is set, it will be used instead of &#39;shopId&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPostNewOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiPostNewOrderAsyncWithHttpInfo($order_data, $shop_id = null, string $contentType = self::contentTypes['orderApiPostNewOrder'][0])
    {
        $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfBillbeeInterfacesBillbeeAPIModelOrder';
        $request = $this->orderApiPostNewOrderRequest($order_data, $shop_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiPostNewOrder'
     *
     * @param  \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrder $order_data (required)
     * @param  int $shop_id Deprecated, if orderData.ApiAccountId is set, it will be used instead of &#39;shopId&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiPostNewOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiPostNewOrderRequest($order_data, $shop_id = null, string $contentType = self::contentTypes['orderApiPostNewOrder'][0])
    {

        // verify the required parameter 'order_data' is set
        if ($order_data === null || (is_array($order_data) && count($order_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_data when calling orderApiPostNewOrder'
            );
        }



        $resourcePath = '/api/v1/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shopId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_data));
            } else {
                $httpBody = $order_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiSendMessage
     *
     * Sends a message to the buyer
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel $model The message model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiSendMessage'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiSendMessage($id, $model, string $contentType = self::contentTypes['orderApiSendMessage'][0])
    {
        list($response) = $this->orderApiSendMessageWithHttpInfo($id, $model, $contentType);
        return $response;
    }

    /**
     * Operation orderApiSendMessageWithHttpInfo
     *
     * Sends a message to the buyer
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel $model The message model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiSendMessage'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiSendMessageWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiSendMessage'][0])
    {
        $request = $this->orderApiSendMessageRequest($id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiSendMessageAsync
     *
     * Sends a message to the buyer
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel $model The message model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiSendMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiSendMessageAsync($id, $model, string $contentType = self::contentTypes['orderApiSendMessage'][0])
    {
        return $this->orderApiSendMessageAsyncWithHttpInfo($id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiSendMessageAsyncWithHttpInfo
     *
     * Sends a message to the buyer
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel $model The message model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiSendMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiSendMessageAsyncWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiSendMessage'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiSendMessageRequest($id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiSendMessage'
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel $model The message model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiSendMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiSendMessageRequest($id, $model, string $contentType = self::contentTypes['orderApiSendMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiSendMessage'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling orderApiSendMessage'
            );
        }


        $resourcePath = '/api/v1/orders/{id}/send-message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiTagsCreate
     *
     * Attach one or more tags to an order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsCreate'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiTagsCreate($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsCreate'][0])
    {
        list($response) = $this->orderApiTagsCreateWithHttpInfo($id, $tag_data, $contentType);
        return $response;
    }

    /**
     * Operation orderApiTagsCreateWithHttpInfo
     *
     * Attach one or more tags to an order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsCreate'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiTagsCreateWithHttpInfo($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsCreate'][0])
    {
        $request = $this->orderApiTagsCreateRequest($id, $tag_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiTagsCreateAsync
     *
     * Attach one or more tags to an order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiTagsCreateAsync($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsCreate'][0])
    {
        return $this->orderApiTagsCreateAsyncWithHttpInfo($id, $tag_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiTagsCreateAsyncWithHttpInfo
     *
     * Attach one or more tags to an order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiTagsCreateAsyncWithHttpInfo($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsCreate'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiTagsCreateRequest($id, $tag_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiTagsCreate'
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiTagsCreateRequest($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsCreate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiTagsCreate'
            );
        }

        // verify the required parameter 'tag_data' is set
        if ($tag_data === null || (is_array($tag_data) && count($tag_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_data when calling orderApiTagsCreate'
            );
        }


        $resourcePath = '/api/v1/orders/{id}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tag_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tag_data));
            } else {
                $httpBody = $tag_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiTagsUpdate
     *
     * Sets the tags attached to an order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsUpdate'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiTagsUpdate($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsUpdate'][0])
    {
        list($response) = $this->orderApiTagsUpdateWithHttpInfo($id, $tag_data, $contentType);
        return $response;
    }

    /**
     * Operation orderApiTagsUpdateWithHttpInfo
     *
     * Sets the tags attached to an order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsUpdate'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiTagsUpdateWithHttpInfo($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsUpdate'][0])
    {
        $request = $this->orderApiTagsUpdateRequest($id, $tag_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiTagsUpdateAsync
     *
     * Sets the tags attached to an order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiTagsUpdateAsync($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsUpdate'][0])
    {
        return $this->orderApiTagsUpdateAsyncWithHttpInfo($id, $tag_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiTagsUpdateAsyncWithHttpInfo
     *
     * Sets the tags attached to an order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiTagsUpdateAsyncWithHttpInfo($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsUpdate'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiTagsUpdateRequest($id, $tag_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiTagsUpdate'
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderTagCreate $tag_data Tags to attach (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTagsUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiTagsUpdateRequest($id, $tag_data, string $contentType = self::contentTypes['orderApiTagsUpdate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiTagsUpdate'
            );
        }

        // verify the required parameter 'tag_data' is set
        if ($tag_data === null || (is_array($tag_data) && count($tag_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_data when calling orderApiTagsUpdate'
            );
        }


        $resourcePath = '/api/v1/orders/{id}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tag_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tag_data));
            } else {
                $httpBody = $tag_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiTriggerEvent
     *
     * Triggers a rule event
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTriggerEvent'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiTriggerEvent($id, $model, string $contentType = self::contentTypes['orderApiTriggerEvent'][0])
    {
        list($response) = $this->orderApiTriggerEventWithHttpInfo($id, $model, $contentType);
        return $response;
    }

    /**
     * Operation orderApiTriggerEventWithHttpInfo
     *
     * Triggers a rule event
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTriggerEvent'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiTriggerEventWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiTriggerEvent'][0])
    {
        $request = $this->orderApiTriggerEventRequest($id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiTriggerEventAsync
     *
     * Triggers a rule event
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTriggerEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiTriggerEventAsync($id, $model, string $contentType = self::contentTypes['orderApiTriggerEvent'][0])
    {
        return $this->orderApiTriggerEventAsyncWithHttpInfo($id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiTriggerEventAsyncWithHttpInfo
     *
     * Triggers a rule event
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTriggerEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiTriggerEventAsyncWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiTriggerEvent'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiTriggerEventRequest($id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiTriggerEvent'
     *
     * @param  int $id The id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiTriggerEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiTriggerEventRequest($id, $model, string $contentType = self::contentTypes['orderApiTriggerEvent'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiTriggerEvent'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling orderApiTriggerEvent'
            );
        }


        $resourcePath = '/api/v1/orders/{id}/trigger-event';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderApiUpdateState
     *
     * Changes the main state of a single order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderStateUpdate $model The data used to change the state (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiUpdateState'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function orderApiUpdateState($id, $model, string $contentType = self::contentTypes['orderApiUpdateState'][0])
    {
        list($response) = $this->orderApiUpdateStateWithHttpInfo($id, $model, $contentType);
        return $response;
    }

    /**
     * Operation orderApiUpdateStateWithHttpInfo
     *
     * Changes the main state of a single order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderStateUpdate $model The data used to change the state (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiUpdateState'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderApiUpdateStateWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiUpdateState'][0])
    {
        $request = $this->orderApiUpdateStateRequest($id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderApiUpdateStateAsync
     *
     * Changes the main state of a single order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderStateUpdate $model The data used to change the state (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiUpdateState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiUpdateStateAsync($id, $model, string $contentType = self::contentTypes['orderApiUpdateState'][0])
    {
        return $this->orderApiUpdateStateAsyncWithHttpInfo($id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderApiUpdateStateAsyncWithHttpInfo
     *
     * Changes the main state of a single order
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderStateUpdate $model The data used to change the state (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiUpdateState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderApiUpdateStateAsyncWithHttpInfo($id, $model, string $contentType = self::contentTypes['orderApiUpdateState'][0])
    {
        $returnType = 'object';
        $request = $this->orderApiUpdateStateRequest($id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderApiUpdateState'
     *
     * @param  int $id The internal id of the order (required)
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiOrderStateUpdate $model The data used to change the state (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderApiUpdateState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderApiUpdateStateRequest($id, $model, string $contentType = self::contentTypes['orderApiUpdateState'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderApiUpdateState'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling orderApiUpdateState'
            );
        }


        $resourcePath = '/api/v1/orders/{id}/orderstate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchSearch
     *
     * Search for products, customers and orders.  Type can be \&quot;order\&quot;, \&quot;product\&quot; and / or \&quot;customer\&quot;  Term can contain lucene query syntax
     *
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiSearchControllerSearchModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchSearch'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel
     */
    public function searchSearch($model, string $contentType = self::contentTypes['searchSearch'][0])
    {
        list($response) = $this->searchSearchWithHttpInfo($model, $contentType);
        return $response;
    }

    /**
     * Operation searchSearchWithHttpInfo
     *
     * Search for products, customers and orders.  Type can be \&quot;order\&quot;, \&quot;product\&quot; and / or \&quot;customer\&quot;  Term can contain lucene query syntax
     *
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiSearchControllerSearchModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchSearch'] to see the possible values for this operation
     *
     * @throws \kruegge82\billbee\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSearchWithHttpInfo($model, string $contentType = self::contentTypes['searchSearch'][0])
    {
        $request = $this->searchSearchRequest($model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchSearchAsync
     *
     * Search for products, customers and orders.  Type can be \&quot;order\&quot;, \&quot;product\&quot; and / or \&quot;customer\&quot;  Term can contain lucene query syntax
     *
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiSearchControllerSearchModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSearchAsync($model, string $contentType = self::contentTypes['searchSearch'][0])
    {
        return $this->searchSearchAsyncWithHttpInfo($model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchSearchAsyncWithHttpInfo
     *
     * Search for products, customers and orders.  Type can be \&quot;order\&quot;, \&quot;product\&quot; and / or \&quot;customer\&quot;  Term can contain lucene query syntax
     *
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiSearchControllerSearchModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSearchAsyncWithHttpInfo($model, string $contentType = self::contentTypes['searchSearch'][0])
    {
        $returnType = '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiApiResultOfRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel';
        $request = $this->searchSearchRequest($model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchSearch'
     *
     * @param  \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiSearchControllerSearchModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchSearchRequest($model, string $contentType = self::contentTypes['searchSearch'][0])
    {

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling searchSearch'
            );
        }


        $resourcePath = '/api/v1/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Billbee-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Billbee-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
