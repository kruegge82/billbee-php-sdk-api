<?php
/**
 * BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.BillbeeAPI.Model.CreateShipmentApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'provider_name' => 'string',
        'product_code' => 'string',
        'printer_name' => 'string',
        'printer_id_for_export_docs' => 'int',
        'services' => '\kruegge82\billbee\Model\BillbeeInterfacesShippingProductService[]',
        'receiver_address' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelShipmentAddressApiModel',
        'client_reference' => 'string',
        'customer_number' => 'string',
        'weight_in_gram' => 'float',
        'order_sum' => 'float',
        'total_net' => 'float',
        'order_currency_code' => 'string',
        'content' => 'string',
        'ship_date' => '\DateTime',
        'shipping_carrier' => 'int',
        'dimension' => '\kruegge82\billbee\Model\BillbeeInterfacesShippingShipmentDataDimensions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'provider_name' => null,
        'product_code' => null,
        'printer_name' => null,
        'printer_id_for_export_docs' => 'int64',
        'services' => null,
        'receiver_address' => null,
        'client_reference' => null,
        'customer_number' => null,
        'weight_in_gram' => 'double',
        'order_sum' => 'double',
        'total_net' => 'double',
        'order_currency_code' => null,
        'content' => null,
        'ship_date' => 'date-time',
        'shipping_carrier' => 'int32',
        'dimension' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'provider_name' => false,
        'product_code' => false,
        'printer_name' => false,
        'printer_id_for_export_docs' => false,
        'services' => false,
        'receiver_address' => false,
        'client_reference' => false,
        'customer_number' => false,
        'weight_in_gram' => false,
        'order_sum' => false,
        'total_net' => false,
        'order_currency_code' => false,
        'content' => false,
        'ship_date' => false,
        'shipping_carrier' => false,
        'dimension' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'provider_name' => 'ProviderName',
        'product_code' => 'ProductCode',
        'printer_name' => 'PrinterName',
        'printer_id_for_export_docs' => 'PrinterIdForExportDocs',
        'services' => 'Services',
        'receiver_address' => 'ReceiverAddress',
        'client_reference' => 'ClientReference',
        'customer_number' => 'CustomerNumber',
        'weight_in_gram' => 'WeightInGram',
        'order_sum' => 'OrderSum',
        'total_net' => 'TotalNet',
        'order_currency_code' => 'OrderCurrencyCode',
        'content' => 'Content',
        'ship_date' => 'ShipDate',
        'shipping_carrier' => 'shippingCarrier',
        'dimension' => 'Dimension'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'provider_name' => 'setProviderName',
        'product_code' => 'setProductCode',
        'printer_name' => 'setPrinterName',
        'printer_id_for_export_docs' => 'setPrinterIdForExportDocs',
        'services' => 'setServices',
        'receiver_address' => 'setReceiverAddress',
        'client_reference' => 'setClientReference',
        'customer_number' => 'setCustomerNumber',
        'weight_in_gram' => 'setWeightInGram',
        'order_sum' => 'setOrderSum',
        'total_net' => 'setTotalNet',
        'order_currency_code' => 'setOrderCurrencyCode',
        'content' => 'setContent',
        'ship_date' => 'setShipDate',
        'shipping_carrier' => 'setShippingCarrier',
        'dimension' => 'setDimension'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'provider_name' => 'getProviderName',
        'product_code' => 'getProductCode',
        'printer_name' => 'getPrinterName',
        'printer_id_for_export_docs' => 'getPrinterIdForExportDocs',
        'services' => 'getServices',
        'receiver_address' => 'getReceiverAddress',
        'client_reference' => 'getClientReference',
        'customer_number' => 'getCustomerNumber',
        'weight_in_gram' => 'getWeightInGram',
        'order_sum' => 'getOrderSum',
        'total_net' => 'getTotalNet',
        'order_currency_code' => 'getOrderCurrencyCode',
        'content' => 'getContent',
        'ship_date' => 'getShipDate',
        'shipping_carrier' => 'getShippingCarrier',
        'dimension' => 'getDimension'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHIPPING_CARRIER_0 = 0;
    public const SHIPPING_CARRIER_1 = 1;
    public const SHIPPING_CARRIER_2 = 2;
    public const SHIPPING_CARRIER_3 = 3;
    public const SHIPPING_CARRIER_4 = 4;
    public const SHIPPING_CARRIER_5 = 5;
    public const SHIPPING_CARRIER_6 = 6;
    public const SHIPPING_CARRIER_7 = 7;
    public const SHIPPING_CARRIER_8 = 8;
    public const SHIPPING_CARRIER_9 = 9;
    public const SHIPPING_CARRIER_10 = 10;
    public const SHIPPING_CARRIER_11 = 11;
    public const SHIPPING_CARRIER_12 = 12;
    public const SHIPPING_CARRIER_13 = 13;
    public const SHIPPING_CARRIER_14 = 14;
    public const SHIPPING_CARRIER_15 = 15;
    public const SHIPPING_CARRIER_16 = 16;
    public const SHIPPING_CARRIER_17 = 17;
    public const SHIPPING_CARRIER_18 = 18;
    public const SHIPPING_CARRIER_19 = 19;
    public const SHIPPING_CARRIER_20 = 20;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingCarrierAllowableValues()
    {
        return [
            self::SHIPPING_CARRIER_0,
            self::SHIPPING_CARRIER_1,
            self::SHIPPING_CARRIER_2,
            self::SHIPPING_CARRIER_3,
            self::SHIPPING_CARRIER_4,
            self::SHIPPING_CARRIER_5,
            self::SHIPPING_CARRIER_6,
            self::SHIPPING_CARRIER_7,
            self::SHIPPING_CARRIER_8,
            self::SHIPPING_CARRIER_9,
            self::SHIPPING_CARRIER_10,
            self::SHIPPING_CARRIER_11,
            self::SHIPPING_CARRIER_12,
            self::SHIPPING_CARRIER_13,
            self::SHIPPING_CARRIER_14,
            self::SHIPPING_CARRIER_15,
            self::SHIPPING_CARRIER_16,
            self::SHIPPING_CARRIER_17,
            self::SHIPPING_CARRIER_18,
            self::SHIPPING_CARRIER_19,
            self::SHIPPING_CARRIER_20,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('provider_name', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('printer_name', $data ?? [], null);
        $this->setIfExists('printer_id_for_export_docs', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('receiver_address', $data ?? [], null);
        $this->setIfExists('client_reference', $data ?? [], null);
        $this->setIfExists('customer_number', $data ?? [], null);
        $this->setIfExists('weight_in_gram', $data ?? [], null);
        $this->setIfExists('order_sum', $data ?? [], null);
        $this->setIfExists('total_net', $data ?? [], null);
        $this->setIfExists('order_currency_code', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('ship_date', $data ?? [], null);
        $this->setIfExists('shipping_carrier', $data ?? [], null);
        $this->setIfExists('dimension', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShippingCarrierAllowableValues();
        if (!is_null($this->container['shipping_carrier']) && !in_array($this->container['shipping_carrier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipping_carrier', must be one of '%s'",
                $this->container['shipping_carrier'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets provider_name
     *
     * @return string|null
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string|null $provider_name The name of the provider as specified in the billbee account
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        if (is_null($provider_name)) {
            throw new \InvalidArgumentException('non-nullable provider_name cannot be null');
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code The productcode to be used when creating the shipment. Values depends on the carrier used
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets printer_name
     *
     * @return string|null
     */
    public function getPrinterName()
    {
        return $this->container['printer_name'];
    }

    /**
     * Sets printer_name
     *
     * @param string|null $printer_name The name of a connected Cloudprinter to sent the label to
     *
     * @return self
     */
    public function setPrinterName($printer_name)
    {
        if (is_null($printer_name)) {
            throw new \InvalidArgumentException('non-nullable printer_name cannot be null');
        }
        $this->container['printer_name'] = $printer_name;

        return $this;
    }

    /**
     * Gets printer_id_for_export_docs
     *
     * @return int|null
     */
    public function getPrinterIdForExportDocs()
    {
        return $this->container['printer_id_for_export_docs'];
    }

    /**
     * Sets printer_id_for_export_docs
     *
     * @param int|null $printer_id_for_export_docs The id of a connected Cloudprinter to sent the export docs to
     *
     * @return self
     */
    public function setPrinterIdForExportDocs($printer_id_for_export_docs)
    {
        if (is_null($printer_id_for_export_docs)) {
            throw new \InvalidArgumentException('non-nullable printer_id_for_export_docs cannot be null');
        }
        $this->container['printer_id_for_export_docs'] = $printer_id_for_export_docs;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesShippingProductService[]|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesShippingProductService[]|null $services A list of services to be used when creating the shipment
     *
     * @return self
     */
    public function setServices($services)
    {
        if (is_null($services)) {
            throw new \InvalidArgumentException('non-nullable services cannot be null');
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets receiver_address
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelShipmentAddressApiModel|null
     */
    public function getReceiverAddress()
    {
        return $this->container['receiver_address'];
    }

    /**
     * Sets receiver_address
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelShipmentAddressApiModel|null $receiver_address receiver_address
     *
     * @return self
     */
    public function setReceiverAddress($receiver_address)
    {
        if (is_null($receiver_address)) {
            throw new \InvalidArgumentException('non-nullable receiver_address cannot be null');
        }
        $this->container['receiver_address'] = $receiver_address;

        return $this;
    }

    /**
     * Gets client_reference
     *
     * @return string|null
     */
    public function getClientReference()
    {
        return $this->container['client_reference'];
    }

    /**
     * Sets client_reference
     *
     * @param string|null $client_reference Optional specify a text to be included on the label. Not possible with all carriers
     *
     * @return self
     */
    public function setClientReference($client_reference)
    {
        if (is_null($client_reference)) {
            throw new \InvalidArgumentException('non-nullable client_reference cannot be null');
        }
        $this->container['client_reference'] = $client_reference;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string|null
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string|null $customer_number Not used anymore
     *
     * @return self
     */
    public function setCustomerNumber($customer_number)
    {
        if (is_null($customer_number)) {
            throw new \InvalidArgumentException('non-nullable customer_number cannot be null');
        }
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets weight_in_gram
     *
     * @return float|null
     */
    public function getWeightInGram()
    {
        return $this->container['weight_in_gram'];
    }

    /**
     * Sets weight_in_gram
     *
     * @param float|null $weight_in_gram Optional specify the weight in gram of the shipment
     *
     * @return self
     */
    public function setWeightInGram($weight_in_gram)
    {
        if (is_null($weight_in_gram)) {
            throw new \InvalidArgumentException('non-nullable weight_in_gram cannot be null');
        }
        $this->container['weight_in_gram'] = $weight_in_gram;

        return $this;
    }

    /**
     * Gets order_sum
     *
     * @return float|null
     */
    public function getOrderSum()
    {
        return $this->container['order_sum'];
    }

    /**
     * Sets order_sum
     *
     * @param float|null $order_sum The value of the shipments content
     *
     * @return self
     */
    public function setOrderSum($order_sum)
    {
        if (is_null($order_sum)) {
            throw new \InvalidArgumentException('non-nullable order_sum cannot be null');
        }
        $this->container['order_sum'] = $order_sum;

        return $this;
    }

    /**
     * Gets total_net
     *
     * @return float|null
     */
    public function getTotalNet()
    {
        return $this->container['total_net'];
    }

    /**
     * Sets total_net
     *
     * @param float|null $total_net The value of the shipments content (net)
     *
     * @return self
     */
    public function setTotalNet($total_net)
    {
        if (is_null($total_net)) {
            throw new \InvalidArgumentException('non-nullable total_net cannot be null');
        }
        $this->container['total_net'] = $total_net;

        return $this;
    }

    /**
     * Gets order_currency_code
     *
     * @return string|null
     */
    public function getOrderCurrencyCode()
    {
        return $this->container['order_currency_code'];
    }

    /**
     * Sets order_currency_code
     *
     * @param string|null $order_currency_code The Currency if the ordersum
     *
     * @return self
     */
    public function setOrderCurrencyCode($order_currency_code)
    {
        if (is_null($order_currency_code)) {
            throw new \InvalidArgumentException('non-nullable order_currency_code cannot be null');
        }
        $this->container['order_currency_code'] = $order_currency_code;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Optional specify a text describing the content of the shipment. Used for export shipments
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets ship_date
     *
     * @return \DateTime|null
     */
    public function getShipDate()
    {
        return $this->container['ship_date'];
    }

    /**
     * Sets ship_date
     *
     * @param \DateTime|null $ship_date Optional overwrite the shipdate to be transferred to the carrier
     *
     * @return self
     */
    public function setShipDate($ship_date)
    {
        if (is_null($ship_date)) {
            throw new \InvalidArgumentException('non-nullable ship_date cannot be null');
        }
        $this->container['ship_date'] = $ship_date;

        return $this;
    }

    /**
     * Gets shipping_carrier
     *
     * @return int|null
     */
    public function getShippingCarrier()
    {
        return $this->container['shipping_carrier'];
    }

    /**
     * Sets shipping_carrier
     *
     * @param int|null $shipping_carrier shipping_carrier
     *
     * @return self
     */
    public function setShippingCarrier($shipping_carrier)
    {
        if (is_null($shipping_carrier)) {
            throw new \InvalidArgumentException('non-nullable shipping_carrier cannot be null');
        }
        $allowedValues = $this->getShippingCarrierAllowableValues();
        if (!in_array($shipping_carrier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipping_carrier', must be one of '%s'",
                    $shipping_carrier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_carrier'] = $shipping_carrier;

        return $this;
    }

    /**
     * Gets dimension
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesShippingShipmentDataDimensions|null
     */
    public function getDimension()
    {
        return $this->container['dimension'];
    }

    /**
     * Sets dimension
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesShippingShipmentDataDimensions|null $dimension dimension
     *
     * @return self
     */
    public function setDimension($dimension)
    {
        if (is_null($dimension)) {
            throw new \InvalidArgumentException('non-nullable dimension cannot be null');
        }
        $this->container['dimension'] = $dimension;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


