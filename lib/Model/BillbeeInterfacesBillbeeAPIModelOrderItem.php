<?php
/**
 * BillbeeInterfacesBillbeeAPIModelOrderItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesBillbeeAPIModelOrderItem Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesBillbeeAPIModelOrderItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.BillbeeAPI.Model.OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billbee_id' => 'int',
        'transaction_id' => 'string',
        'product' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelSoldProduct',
        'quantity' => 'float',
        'total_price' => 'float',
        'tax_amount' => 'float',
        'tax_index' => 'int',
        'discount' => 'float',
        'attributes' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderItemAttribute[]',
        'get_price_from_article_if_any' => 'bool',
        'is_coupon' => 'bool',
        'shipping_profile_id' => 'string',
        'dont_adjust_stock' => 'bool',
        'unrebated_total_price' => 'float',
        'serial_number' => 'string',
        'invoice_sku' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billbee_id' => 'int64',
        'transaction_id' => null,
        'product' => null,
        'quantity' => 'double',
        'total_price' => 'double',
        'tax_amount' => 'double',
        'tax_index' => 'int32',
        'discount' => 'double',
        'attributes' => null,
        'get_price_from_article_if_any' => null,
        'is_coupon' => null,
        'shipping_profile_id' => null,
        'dont_adjust_stock' => null,
        'unrebated_total_price' => 'double',
        'serial_number' => null,
        'invoice_sku' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'billbee_id' => false,
        'transaction_id' => false,
        'product' => false,
        'quantity' => false,
        'total_price' => false,
        'tax_amount' => false,
        'tax_index' => false,
        'discount' => false,
        'attributes' => false,
        'get_price_from_article_if_any' => false,
        'is_coupon' => false,
        'shipping_profile_id' => false,
        'dont_adjust_stock' => false,
        'unrebated_total_price' => false,
        'serial_number' => false,
        'invoice_sku' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billbee_id' => 'BillbeeId',
        'transaction_id' => 'TransactionId',
        'product' => 'Product',
        'quantity' => 'Quantity',
        'total_price' => 'TotalPrice',
        'tax_amount' => 'TaxAmount',
        'tax_index' => 'TaxIndex',
        'discount' => 'Discount',
        'attributes' => 'Attributes',
        'get_price_from_article_if_any' => 'GetPriceFromArticleIfAny',
        'is_coupon' => 'IsCoupon',
        'shipping_profile_id' => 'ShippingProfileId',
        'dont_adjust_stock' => 'DontAdjustStock',
        'unrebated_total_price' => 'UnrebatedTotalPrice',
        'serial_number' => 'SerialNumber',
        'invoice_sku' => 'InvoiceSKU'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billbee_id' => 'setBillbeeId',
        'transaction_id' => 'setTransactionId',
        'product' => 'setProduct',
        'quantity' => 'setQuantity',
        'total_price' => 'setTotalPrice',
        'tax_amount' => 'setTaxAmount',
        'tax_index' => 'setTaxIndex',
        'discount' => 'setDiscount',
        'attributes' => 'setAttributes',
        'get_price_from_article_if_any' => 'setGetPriceFromArticleIfAny',
        'is_coupon' => 'setIsCoupon',
        'shipping_profile_id' => 'setShippingProfileId',
        'dont_adjust_stock' => 'setDontAdjustStock',
        'unrebated_total_price' => 'setUnrebatedTotalPrice',
        'serial_number' => 'setSerialNumber',
        'invoice_sku' => 'setInvoiceSku'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billbee_id' => 'getBillbeeId',
        'transaction_id' => 'getTransactionId',
        'product' => 'getProduct',
        'quantity' => 'getQuantity',
        'total_price' => 'getTotalPrice',
        'tax_amount' => 'getTaxAmount',
        'tax_index' => 'getTaxIndex',
        'discount' => 'getDiscount',
        'attributes' => 'getAttributes',
        'get_price_from_article_if_any' => 'getGetPriceFromArticleIfAny',
        'is_coupon' => 'getIsCoupon',
        'shipping_profile_id' => 'getShippingProfileId',
        'dont_adjust_stock' => 'getDontAdjustStock',
        'unrebated_total_price' => 'getUnrebatedTotalPrice',
        'serial_number' => 'getSerialNumber',
        'invoice_sku' => 'getInvoiceSku'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('billbee_id', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('tax_index', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('get_price_from_article_if_any', $data ?? [], null);
        $this->setIfExists('is_coupon', $data ?? [], null);
        $this->setIfExists('shipping_profile_id', $data ?? [], null);
        $this->setIfExists('dont_adjust_stock', $data ?? [], null);
        $this->setIfExists('unrebated_total_price', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('invoice_sku', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billbee_id
     *
     * @return int|null
     */
    public function getBillbeeId()
    {
        return $this->container['billbee_id'];
    }

    /**
     * Sets billbee_id
     *
     * @param int|null $billbee_id The billbee id of this item
     *
     * @return self
     */
    public function setBillbeeId($billbee_id)
    {
        if (is_null($billbee_id)) {
            throw new \InvalidArgumentException('non-nullable billbee_id cannot be null');
        }
        $this->container['billbee_id'] = $billbee_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id Id of the individual transaction. Only required by Ebay to detect aggregated orders
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelSoldProduct|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelSoldProduct|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The sold quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float|null $total_price The total price (unit price * quantity)
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param float|null $tax_amount The tax amount in the total price
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets tax_index
     *
     * @return int|null
     */
    public function getTaxIndex()
    {
        return $this->container['tax_index'];
    }

    /**
     * Sets tax_index
     *
     * @param int|null $tax_index The tax index.
     *
     * @return self
     */
    public function setTaxIndex($tax_index)
    {
        if (is_null($tax_index)) {
            throw new \InvalidArgumentException('non-nullable tax_index cannot be null');
        }
        $this->container['tax_index'] = $tax_index;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount Sets the discount in percent
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderItemAttribute[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderItemAttribute[]|null $attributes A list of product attributes for this position
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets get_price_from_article_if_any
     *
     * @return bool|null
     */
    public function getGetPriceFromArticleIfAny()
    {
        return $this->container['get_price_from_article_if_any'];
    }

    /**
     * Sets get_price_from_article_if_any
     *
     * @param bool|null $get_price_from_article_if_any If true, the price will be overwritten by the known article price in billbee if available
     *
     * @return self
     */
    public function setGetPriceFromArticleIfAny($get_price_from_article_if_any)
    {
        if (is_null($get_price_from_article_if_any)) {
            throw new \InvalidArgumentException('non-nullable get_price_from_article_if_any cannot be null');
        }
        $this->container['get_price_from_article_if_any'] = $get_price_from_article_if_any;

        return $this;
    }

    /**
     * Gets is_coupon
     *
     * @return bool|null
     */
    public function getIsCoupon()
    {
        return $this->container['is_coupon'];
    }

    /**
     * Sets is_coupon
     *
     * @param bool|null $is_coupon Determines if it is a coupon, which is interpreted as tax-free payment
     *
     * @return self
     */
    public function setIsCoupon($is_coupon)
    {
        if (is_null($is_coupon)) {
            throw new \InvalidArgumentException('non-nullable is_coupon cannot be null');
        }
        $this->container['is_coupon'] = $is_coupon;

        return $this;
    }

    /**
     * Gets shipping_profile_id
     *
     * @return string|null
     */
    public function getShippingProfileId()
    {
        return $this->container['shipping_profile_id'];
    }

    /**
     * Sets shipping_profile_id
     *
     * @param string|null $shipping_profile_id Determines if it is a coupon, which is interpreted as tax-free payment
     *
     * @return self
     */
    public function setShippingProfileId($shipping_profile_id)
    {
        if (is_null($shipping_profile_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_profile_id cannot be null');
        }
        $this->container['shipping_profile_id'] = $shipping_profile_id;

        return $this;
    }

    /**
     * Gets dont_adjust_stock
     *
     * @return bool|null
     */
    public function getDontAdjustStock()
    {
        return $this->container['dont_adjust_stock'];
    }

    /**
     * Sets dont_adjust_stock
     *
     * @param bool|null $dont_adjust_stock If true, the import of this order won't adjust the stock level at billbee.
     *
     * @return self
     */
    public function setDontAdjustStock($dont_adjust_stock)
    {
        if (is_null($dont_adjust_stock)) {
            throw new \InvalidArgumentException('non-nullable dont_adjust_stock cannot be null');
        }
        $this->container['dont_adjust_stock'] = $dont_adjust_stock;

        return $this;
    }

    /**
     * Gets unrebated_total_price
     *
     * @return float|null
     */
    public function getUnrebatedTotalPrice()
    {
        return $this->container['unrebated_total_price'];
    }

    /**
     * Sets unrebated_total_price
     *
     * @param float|null $unrebated_total_price Is just used for the billbee api
     *
     * @return self
     */
    public function setUnrebatedTotalPrice($unrebated_total_price)
    {
        if (is_null($unrebated_total_price)) {
            throw new \InvalidArgumentException('non-nullable unrebated_total_price cannot be null');
        }
        $this->container['unrebated_total_price'] = $unrebated_total_price;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number Contains the used serial number
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets invoice_sku
     *
     * @return string|null
     */
    public function getInvoiceSku()
    {
        return $this->container['invoice_sku'];
    }

    /**
     * Sets invoice_sku
     *
     * @param string|null $invoice_sku Contains the SKU from OrderDetail (if available) or from Product
     *
     * @return self
     */
    public function setInvoiceSku($invoice_sku)
    {
        if (is_null($invoice_sku)) {
            throw new \InvalidArgumentException('non-nullable invoice_sku cannot be null');
        }
        $this->container['invoice_sku'] = $invoice_sku;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


