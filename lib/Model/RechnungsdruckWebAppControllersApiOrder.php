<?php
/**
 * RechnungsdruckWebAppControllersApiOrder
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * RechnungsdruckWebAppControllersApiOrder Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RechnungsdruckWebAppControllersApiOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Rechnungsdruck.WebApp.Controllers.Api.Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'external_id' => 'string',
        'invoice_number' => 'string',
        'invoice_created_at' => '\DateTime',
        'invoice_date' => '\DateTime',
        'created_at' => '\DateTime',
        'paid_at' => '\DateTime',
        'shipped_at' => '\DateTime',
        'has_invoice' => 'bool',
        'order_state_id' => 'int',
        'order_state_text' => 'string',
        'total_gross' => 'float',
        'shop_name' => 'string',
        'can_create_auto_invoice' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'external_id' => null,
        'invoice_number' => null,
        'invoice_created_at' => 'date-time',
        'invoice_date' => 'date-time',
        'created_at' => 'date-time',
        'paid_at' => 'date-time',
        'shipped_at' => 'date-time',
        'has_invoice' => null,
        'order_state_id' => 'int32',
        'order_state_text' => null,
        'total_gross' => 'double',
        'shop_name' => null,
        'can_create_auto_invoice' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'external_id' => false,
        'invoice_number' => false,
        'invoice_created_at' => false,
        'invoice_date' => false,
        'created_at' => false,
        'paid_at' => false,
        'shipped_at' => false,
        'has_invoice' => false,
        'order_state_id' => false,
        'order_state_text' => false,
        'total_gross' => false,
        'shop_name' => false,
        'can_create_auto_invoice' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'external_id' => 'ExternalId',
        'invoice_number' => 'InvoiceNumber',
        'invoice_created_at' => 'InvoiceCreatedAt',
        'invoice_date' => 'InvoiceDate',
        'created_at' => 'CreatedAt',
        'paid_at' => 'PaidAt',
        'shipped_at' => 'ShippedAt',
        'has_invoice' => 'HasInvoice',
        'order_state_id' => 'OrderStateId',
        'order_state_text' => 'OrderStateText',
        'total_gross' => 'TotalGross',
        'shop_name' => 'ShopName',
        'can_create_auto_invoice' => 'CanCreateAutoInvoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_created_at' => 'setInvoiceCreatedAt',
        'invoice_date' => 'setInvoiceDate',
        'created_at' => 'setCreatedAt',
        'paid_at' => 'setPaidAt',
        'shipped_at' => 'setShippedAt',
        'has_invoice' => 'setHasInvoice',
        'order_state_id' => 'setOrderStateId',
        'order_state_text' => 'setOrderStateText',
        'total_gross' => 'setTotalGross',
        'shop_name' => 'setShopName',
        'can_create_auto_invoice' => 'setCanCreateAutoInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_created_at' => 'getInvoiceCreatedAt',
        'invoice_date' => 'getInvoiceDate',
        'created_at' => 'getCreatedAt',
        'paid_at' => 'getPaidAt',
        'shipped_at' => 'getShippedAt',
        'has_invoice' => 'getHasInvoice',
        'order_state_id' => 'getOrderStateId',
        'order_state_text' => 'getOrderStateText',
        'total_gross' => 'getTotalGross',
        'shop_name' => 'getShopName',
        'can_create_auto_invoice' => 'getCanCreateAutoInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('invoice_created_at', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('paid_at', $data ?? [], null);
        $this->setIfExists('shipped_at', $data ?? [], null);
        $this->setIfExists('has_invoice', $data ?? [], null);
        $this->setIfExists('order_state_id', $data ?? [], null);
        $this->setIfExists('order_state_text', $data ?? [], null);
        $this->setIfExists('total_gross', $data ?? [], null);
        $this->setIfExists('shop_name', $data ?? [], null);
        $this->setIfExists('can_create_auto_invoice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number invoice_number
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_created_at
     *
     * @return \DateTime|null
     */
    public function getInvoiceCreatedAt()
    {
        return $this->container['invoice_created_at'];
    }

    /**
     * Sets invoice_created_at
     *
     * @param \DateTime|null $invoice_created_at invoice_created_at
     *
     * @return self
     */
    public function setInvoiceCreatedAt($invoice_created_at)
    {
        if (is_null($invoice_created_at)) {
            throw new \InvalidArgumentException('non-nullable invoice_created_at cannot be null');
        }
        $this->container['invoice_created_at'] = $invoice_created_at;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime|null $invoice_date invoice_date
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets paid_at
     *
     * @return \DateTime|null
     */
    public function getPaidAt()
    {
        return $this->container['paid_at'];
    }

    /**
     * Sets paid_at
     *
     * @param \DateTime|null $paid_at paid_at
     *
     * @return self
     */
    public function setPaidAt($paid_at)
    {
        if (is_null($paid_at)) {
            throw new \InvalidArgumentException('non-nullable paid_at cannot be null');
        }
        $this->container['paid_at'] = $paid_at;

        return $this;
    }

    /**
     * Gets shipped_at
     *
     * @return \DateTime|null
     */
    public function getShippedAt()
    {
        return $this->container['shipped_at'];
    }

    /**
     * Sets shipped_at
     *
     * @param \DateTime|null $shipped_at shipped_at
     *
     * @return self
     */
    public function setShippedAt($shipped_at)
    {
        if (is_null($shipped_at)) {
            throw new \InvalidArgumentException('non-nullable shipped_at cannot be null');
        }
        $this->container['shipped_at'] = $shipped_at;

        return $this;
    }

    /**
     * Gets has_invoice
     *
     * @return bool|null
     */
    public function getHasInvoice()
    {
        return $this->container['has_invoice'];
    }

    /**
     * Sets has_invoice
     *
     * @param bool|null $has_invoice has_invoice
     *
     * @return self
     */
    public function setHasInvoice($has_invoice)
    {
        if (is_null($has_invoice)) {
            throw new \InvalidArgumentException('non-nullable has_invoice cannot be null');
        }
        $this->container['has_invoice'] = $has_invoice;

        return $this;
    }

    /**
     * Gets order_state_id
     *
     * @return int|null
     */
    public function getOrderStateId()
    {
        return $this->container['order_state_id'];
    }

    /**
     * Sets order_state_id
     *
     * @param int|null $order_state_id order_state_id
     *
     * @return self
     */
    public function setOrderStateId($order_state_id)
    {
        if (is_null($order_state_id)) {
            throw new \InvalidArgumentException('non-nullable order_state_id cannot be null');
        }
        $this->container['order_state_id'] = $order_state_id;

        return $this;
    }

    /**
     * Gets order_state_text
     *
     * @return string|null
     */
    public function getOrderStateText()
    {
        return $this->container['order_state_text'];
    }

    /**
     * Sets order_state_text
     *
     * @param string|null $order_state_text order_state_text
     *
     * @return self
     */
    public function setOrderStateText($order_state_text)
    {
        if (is_null($order_state_text)) {
            throw new \InvalidArgumentException('non-nullable order_state_text cannot be null');
        }
        $this->container['order_state_text'] = $order_state_text;

        return $this;
    }

    /**
     * Gets total_gross
     *
     * @return float|null
     */
    public function getTotalGross()
    {
        return $this->container['total_gross'];
    }

    /**
     * Sets total_gross
     *
     * @param float|null $total_gross total_gross
     *
     * @return self
     */
    public function setTotalGross($total_gross)
    {
        if (is_null($total_gross)) {
            throw new \InvalidArgumentException('non-nullable total_gross cannot be null');
        }
        $this->container['total_gross'] = $total_gross;

        return $this;
    }

    /**
     * Gets shop_name
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shop_name'];
    }

    /**
     * Sets shop_name
     *
     * @param string|null $shop_name shop_name
     *
     * @return self
     */
    public function setShopName($shop_name)
    {
        if (is_null($shop_name)) {
            throw new \InvalidArgumentException('non-nullable shop_name cannot be null');
        }
        $this->container['shop_name'] = $shop_name;

        return $this;
    }

    /**
     * Gets can_create_auto_invoice
     *
     * @return bool|null
     */
    public function getCanCreateAutoInvoice()
    {
        return $this->container['can_create_auto_invoice'];
    }

    /**
     * Sets can_create_auto_invoice
     *
     * @param bool|null $can_create_auto_invoice can_create_auto_invoice
     *
     * @return self
     */
    public function setCanCreateAutoInvoice($can_create_auto_invoice)
    {
        if (is_null($can_create_auto_invoice)) {
            throw new \InvalidArgumentException('non-nullable can_create_auto_invoice cannot be null');
        }
        $this->container['can_create_auto_invoice'] = $can_create_auto_invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


