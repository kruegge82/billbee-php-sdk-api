<?php
/**
 * BillbeeInterfacesBillbeeAPIModelArticleSourceApiModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesBillbeeAPIModelArticleSourceApiModel Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesBillbeeAPIModelArticleSourceApiModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.BillbeeAPI.Model.ArticleSourceApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'source' => 'string',
        'source_id' => 'string',
        'api_account_name' => 'string',
        'api_account_id' => 'int',
        'export_factor' => 'float',
        'stock_sync_inactive' => 'bool',
        'stock_sync_min' => 'float',
        'stock_sync_max' => 'float',
        'units_per_item' => 'float',
        'custom' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'source' => null,
        'source_id' => null,
        'api_account_name' => null,
        'api_account_id' => 'int64',
        'export_factor' => 'double',
        'stock_sync_inactive' => null,
        'stock_sync_min' => 'double',
        'stock_sync_max' => 'double',
        'units_per_item' => 'double',
        'custom' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'source' => false,
        'source_id' => false,
        'api_account_name' => false,
        'api_account_id' => false,
        'export_factor' => false,
        'stock_sync_inactive' => false,
        'stock_sync_min' => false,
        'stock_sync_max' => false,
        'units_per_item' => false,
        'custom' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'source' => 'Source',
        'source_id' => 'SourceId',
        'api_account_name' => 'ApiAccountName',
        'api_account_id' => 'ApiAccountId',
        'export_factor' => 'ExportFactor',
        'stock_sync_inactive' => 'StockSyncInactive',
        'stock_sync_min' => 'StockSyncMin',
        'stock_sync_max' => 'StockSyncMax',
        'units_per_item' => 'UnitsPerItem',
        'custom' => 'Custom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'source' => 'setSource',
        'source_id' => 'setSourceId',
        'api_account_name' => 'setApiAccountName',
        'api_account_id' => 'setApiAccountId',
        'export_factor' => 'setExportFactor',
        'stock_sync_inactive' => 'setStockSyncInactive',
        'stock_sync_min' => 'setStockSyncMin',
        'stock_sync_max' => 'setStockSyncMax',
        'units_per_item' => 'setUnitsPerItem',
        'custom' => 'setCustom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'source' => 'getSource',
        'source_id' => 'getSourceId',
        'api_account_name' => 'getApiAccountName',
        'api_account_id' => 'getApiAccountId',
        'export_factor' => 'getExportFactor',
        'stock_sync_inactive' => 'getStockSyncInactive',
        'stock_sync_min' => 'getStockSyncMin',
        'stock_sync_max' => 'getStockSyncMax',
        'units_per_item' => 'getUnitsPerItem',
        'custom' => 'getCustom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('api_account_name', $data ?? [], null);
        $this->setIfExists('api_account_id', $data ?? [], null);
        $this->setIfExists('export_factor', $data ?? [], null);
        $this->setIfExists('stock_sync_inactive', $data ?? [], null);
        $this->setIfExists('stock_sync_min', $data ?? [], null);
        $this->setIfExists('stock_sync_max', $data ?? [], null);
        $this->setIfExists('units_per_item', $data ?? [], null);
        $this->setIfExists('custom', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['source_id'] === null) {
            $invalidProperties[] = "'source_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id source_id
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets api_account_name
     *
     * @return string|null
     */
    public function getApiAccountName()
    {
        return $this->container['api_account_name'];
    }

    /**
     * Sets api_account_name
     *
     * @param string|null $api_account_name api_account_name
     *
     * @return self
     */
    public function setApiAccountName($api_account_name)
    {
        if (is_null($api_account_name)) {
            throw new \InvalidArgumentException('non-nullable api_account_name cannot be null');
        }
        $this->container['api_account_name'] = $api_account_name;

        return $this;
    }

    /**
     * Gets api_account_id
     *
     * @return int|null
     */
    public function getApiAccountId()
    {
        return $this->container['api_account_id'];
    }

    /**
     * Sets api_account_id
     *
     * @param int|null $api_account_id api_account_id
     *
     * @return self
     */
    public function setApiAccountId($api_account_id)
    {
        if (is_null($api_account_id)) {
            throw new \InvalidArgumentException('non-nullable api_account_id cannot be null');
        }
        $this->container['api_account_id'] = $api_account_id;

        return $this;
    }

    /**
     * Gets export_factor
     *
     * @return float|null
     */
    public function getExportFactor()
    {
        return $this->container['export_factor'];
    }

    /**
     * Sets export_factor
     *
     * @param float|null $export_factor export_factor
     *
     * @return self
     */
    public function setExportFactor($export_factor)
    {
        if (is_null($export_factor)) {
            throw new \InvalidArgumentException('non-nullable export_factor cannot be null');
        }
        $this->container['export_factor'] = $export_factor;

        return $this;
    }

    /**
     * Gets stock_sync_inactive
     *
     * @return bool|null
     */
    public function getStockSyncInactive()
    {
        return $this->container['stock_sync_inactive'];
    }

    /**
     * Sets stock_sync_inactive
     *
     * @param bool|null $stock_sync_inactive stock_sync_inactive
     *
     * @return self
     */
    public function setStockSyncInactive($stock_sync_inactive)
    {
        if (is_null($stock_sync_inactive)) {
            throw new \InvalidArgumentException('non-nullable stock_sync_inactive cannot be null');
        }
        $this->container['stock_sync_inactive'] = $stock_sync_inactive;

        return $this;
    }

    /**
     * Gets stock_sync_min
     *
     * @return float|null
     */
    public function getStockSyncMin()
    {
        return $this->container['stock_sync_min'];
    }

    /**
     * Sets stock_sync_min
     *
     * @param float|null $stock_sync_min stock_sync_min
     *
     * @return self
     */
    public function setStockSyncMin($stock_sync_min)
    {
        if (is_null($stock_sync_min)) {
            throw new \InvalidArgumentException('non-nullable stock_sync_min cannot be null');
        }
        $this->container['stock_sync_min'] = $stock_sync_min;

        return $this;
    }

    /**
     * Gets stock_sync_max
     *
     * @return float|null
     */
    public function getStockSyncMax()
    {
        return $this->container['stock_sync_max'];
    }

    /**
     * Sets stock_sync_max
     *
     * @param float|null $stock_sync_max stock_sync_max
     *
     * @return self
     */
    public function setStockSyncMax($stock_sync_max)
    {
        if (is_null($stock_sync_max)) {
            throw new \InvalidArgumentException('non-nullable stock_sync_max cannot be null');
        }
        $this->container['stock_sync_max'] = $stock_sync_max;

        return $this;
    }

    /**
     * Gets units_per_item
     *
     * @return float|null
     */
    public function getUnitsPerItem()
    {
        return $this->container['units_per_item'];
    }

    /**
     * Sets units_per_item
     *
     * @param float|null $units_per_item units_per_item
     *
     * @return self
     */
    public function setUnitsPerItem($units_per_item)
    {
        if (is_null($units_per_item)) {
            throw new \InvalidArgumentException('non-nullable units_per_item cannot be null');
        }
        $this->container['units_per_item'] = $units_per_item;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return object|null
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param object|null $custom custom
     *
     * @return self
     */
    public function setCustom($custom)
    {
        if (is_null($custom)) {
            throw new \InvalidArgumentException('non-nullable custom cannot be null');
        }
        $this->container['custom'] = $custom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


