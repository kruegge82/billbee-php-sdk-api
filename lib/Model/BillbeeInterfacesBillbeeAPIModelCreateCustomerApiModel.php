<?php
/**
 * BillbeeInterfacesBillbeeAPIModelCreateCustomerApiModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesBillbeeAPIModelCreateCustomerApiModel Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesBillbeeAPIModelCreateCustomerApiModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.BillbeeAPI.Model.CreateCustomerApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelCustomerAddressApiModel',
        'id' => 'int',
        'name' => 'string',
        'email' => 'string',
        'tel1' => 'string',
        'tel2' => 'string',
        'number' => 'int',
        'price_group_id' => 'int',
        'language_id' => 'int',
        'default_mail_address' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel',
        'default_commercial_mail_address' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel',
        'default_status_updates_mail_address' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel',
        'default_phone1' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel',
        'default_phone2' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel',
        'default_fax' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel',
        'vat_id' => 'string',
        'type' => 'int',
        'meta_data' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel[]',
        'archived_at' => '\DateTime',
        'restored_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'id' => 'int64',
        'name' => null,
        'email' => null,
        'tel1' => null,
        'tel2' => null,
        'number' => 'int32',
        'price_group_id' => 'int64',
        'language_id' => 'int32',
        'default_mail_address' => null,
        'default_commercial_mail_address' => null,
        'default_status_updates_mail_address' => null,
        'default_phone1' => null,
        'default_phone2' => null,
        'default_fax' => null,
        'vat_id' => null,
        'type' => 'int32',
        'meta_data' => null,
        'archived_at' => 'date-time',
        'restored_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
        'id' => false,
        'name' => false,
        'email' => false,
        'tel1' => false,
        'tel2' => false,
        'number' => false,
        'price_group_id' => false,
        'language_id' => false,
        'default_mail_address' => false,
        'default_commercial_mail_address' => false,
        'default_status_updates_mail_address' => false,
        'default_phone1' => false,
        'default_phone2' => false,
        'default_fax' => false,
        'vat_id' => false,
        'type' => false,
        'meta_data' => false,
        'archived_at' => false,
        'restored_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'Address',
        'id' => 'Id',
        'name' => 'Name',
        'email' => 'Email',
        'tel1' => 'Tel1',
        'tel2' => 'Tel2',
        'number' => 'Number',
        'price_group_id' => 'PriceGroupId',
        'language_id' => 'LanguageId',
        'default_mail_address' => 'DefaultMailAddress',
        'default_commercial_mail_address' => 'DefaultCommercialMailAddress',
        'default_status_updates_mail_address' => 'DefaultStatusUpdatesMailAddress',
        'default_phone1' => 'DefaultPhone1',
        'default_phone2' => 'DefaultPhone2',
        'default_fax' => 'DefaultFax',
        'vat_id' => 'VatId',
        'type' => 'Type',
        'meta_data' => 'MetaData',
        'archived_at' => 'ArchivedAt',
        'restored_at' => 'RestoredAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'id' => 'setId',
        'name' => 'setName',
        'email' => 'setEmail',
        'tel1' => 'setTel1',
        'tel2' => 'setTel2',
        'number' => 'setNumber',
        'price_group_id' => 'setPriceGroupId',
        'language_id' => 'setLanguageId',
        'default_mail_address' => 'setDefaultMailAddress',
        'default_commercial_mail_address' => 'setDefaultCommercialMailAddress',
        'default_status_updates_mail_address' => 'setDefaultStatusUpdatesMailAddress',
        'default_phone1' => 'setDefaultPhone1',
        'default_phone2' => 'setDefaultPhone2',
        'default_fax' => 'setDefaultFax',
        'vat_id' => 'setVatId',
        'type' => 'setType',
        'meta_data' => 'setMetaData',
        'archived_at' => 'setArchivedAt',
        'restored_at' => 'setRestoredAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'id' => 'getId',
        'name' => 'getName',
        'email' => 'getEmail',
        'tel1' => 'getTel1',
        'tel2' => 'getTel2',
        'number' => 'getNumber',
        'price_group_id' => 'getPriceGroupId',
        'language_id' => 'getLanguageId',
        'default_mail_address' => 'getDefaultMailAddress',
        'default_commercial_mail_address' => 'getDefaultCommercialMailAddress',
        'default_status_updates_mail_address' => 'getDefaultStatusUpdatesMailAddress',
        'default_phone1' => 'getDefaultPhone1',
        'default_phone2' => 'getDefaultPhone2',
        'default_fax' => 'getDefaultFax',
        'vat_id' => 'getVatId',
        'type' => 'getType',
        'meta_data' => 'getMetaData',
        'archived_at' => 'getArchivedAt',
        'restored_at' => 'getRestoredAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('tel1', $data ?? [], null);
        $this->setIfExists('tel2', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('price_group_id', $data ?? [], null);
        $this->setIfExists('language_id', $data ?? [], null);
        $this->setIfExists('default_mail_address', $data ?? [], null);
        $this->setIfExists('default_commercial_mail_address', $data ?? [], null);
        $this->setIfExists('default_status_updates_mail_address', $data ?? [], null);
        $this->setIfExists('default_phone1', $data ?? [], null);
        $this->setIfExists('default_phone2', $data ?? [], null);
        $this->setIfExists('default_fax', $data ?? [], null);
        $this->setIfExists('vat_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
        $this->setIfExists('archived_at', $data ?? [], null);
        $this->setIfExists('restored_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelCustomerAddressApiModel|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelCustomerAddressApiModel|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The Billbee Id of the customer
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets tel1
     *
     * @return string|null
     */
    public function getTel1()
    {
        return $this->container['tel1'];
    }

    /**
     * Sets tel1
     *
     * @param string|null $tel1 tel1
     *
     * @return self
     */
    public function setTel1($tel1)
    {
        if (is_null($tel1)) {
            throw new \InvalidArgumentException('non-nullable tel1 cannot be null');
        }
        $this->container['tel1'] = $tel1;

        return $this;
    }

    /**
     * Gets tel2
     *
     * @return string|null
     */
    public function getTel2()
    {
        return $this->container['tel2'];
    }

    /**
     * Sets tel2
     *
     * @param string|null $tel2 tel2
     *
     * @return self
     */
    public function setTel2($tel2)
    {
        if (is_null($tel2)) {
            throw new \InvalidArgumentException('non-nullable tel2 cannot be null');
        }
        $this->container['tel2'] = $tel2;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets price_group_id
     *
     * @return int|null
     */
    public function getPriceGroupId()
    {
        return $this->container['price_group_id'];
    }

    /**
     * Sets price_group_id
     *
     * @param int|null $price_group_id price_group_id
     *
     * @return self
     */
    public function setPriceGroupId($price_group_id)
    {
        if (is_null($price_group_id)) {
            throw new \InvalidArgumentException('non-nullable price_group_id cannot be null');
        }
        $this->container['price_group_id'] = $price_group_id;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return int|null
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param int|null $language_id language_id
     *
     * @return self
     */
    public function setLanguageId($language_id)
    {
        if (is_null($language_id)) {
            throw new \InvalidArgumentException('non-nullable language_id cannot be null');
        }
        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets default_mail_address
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null
     */
    public function getDefaultMailAddress()
    {
        return $this->container['default_mail_address'];
    }

    /**
     * Sets default_mail_address
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null $default_mail_address default_mail_address
     *
     * @return self
     */
    public function setDefaultMailAddress($default_mail_address)
    {
        if (is_null($default_mail_address)) {
            throw new \InvalidArgumentException('non-nullable default_mail_address cannot be null');
        }
        $this->container['default_mail_address'] = $default_mail_address;

        return $this;
    }

    /**
     * Gets default_commercial_mail_address
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null
     */
    public function getDefaultCommercialMailAddress()
    {
        return $this->container['default_commercial_mail_address'];
    }

    /**
     * Sets default_commercial_mail_address
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null $default_commercial_mail_address default_commercial_mail_address
     *
     * @return self
     */
    public function setDefaultCommercialMailAddress($default_commercial_mail_address)
    {
        if (is_null($default_commercial_mail_address)) {
            throw new \InvalidArgumentException('non-nullable default_commercial_mail_address cannot be null');
        }
        $this->container['default_commercial_mail_address'] = $default_commercial_mail_address;

        return $this;
    }

    /**
     * Gets default_status_updates_mail_address
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null
     */
    public function getDefaultStatusUpdatesMailAddress()
    {
        return $this->container['default_status_updates_mail_address'];
    }

    /**
     * Sets default_status_updates_mail_address
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null $default_status_updates_mail_address default_status_updates_mail_address
     *
     * @return self
     */
    public function setDefaultStatusUpdatesMailAddress($default_status_updates_mail_address)
    {
        if (is_null($default_status_updates_mail_address)) {
            throw new \InvalidArgumentException('non-nullable default_status_updates_mail_address cannot be null');
        }
        $this->container['default_status_updates_mail_address'] = $default_status_updates_mail_address;

        return $this;
    }

    /**
     * Gets default_phone1
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null
     */
    public function getDefaultPhone1()
    {
        return $this->container['default_phone1'];
    }

    /**
     * Sets default_phone1
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null $default_phone1 default_phone1
     *
     * @return self
     */
    public function setDefaultPhone1($default_phone1)
    {
        if (is_null($default_phone1)) {
            throw new \InvalidArgumentException('non-nullable default_phone1 cannot be null');
        }
        $this->container['default_phone1'] = $default_phone1;

        return $this;
    }

    /**
     * Gets default_phone2
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null
     */
    public function getDefaultPhone2()
    {
        return $this->container['default_phone2'];
    }

    /**
     * Sets default_phone2
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null $default_phone2 default_phone2
     *
     * @return self
     */
    public function setDefaultPhone2($default_phone2)
    {
        if (is_null($default_phone2)) {
            throw new \InvalidArgumentException('non-nullable default_phone2 cannot be null');
        }
        $this->container['default_phone2'] = $default_phone2;

        return $this;
    }

    /**
     * Gets default_fax
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null
     */
    public function getDefaultFax()
    {
        return $this->container['default_fax'];
    }

    /**
     * Sets default_fax
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel|null $default_fax default_fax
     *
     * @return self
     */
    public function setDefaultFax($default_fax)
    {
        if (is_null($default_fax)) {
            throw new \InvalidArgumentException('non-nullable default_fax cannot be null');
        }
        $this->container['default_fax'] = $default_fax;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return string|null
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string|null $vat_id The vat-id, that should be saved at the customer. Only used if CustomerVatId is not set on the order.
     *
     * @return self
     */
    public function setVatId($vat_id)
    {
        if (is_null($vat_id)) {
            throw new \InvalidArgumentException('non-nullable vat_id cannot be null');
        }
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type Customer Type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel[]|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsCustomerMetaDataApiModel[]|null $meta_data meta_data
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {
        if (is_null($meta_data)) {
            throw new \InvalidArgumentException('non-nullable meta_data cannot be null');
        }
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets archived_at
     *
     * @return \DateTime|null
     */
    public function getArchivedAt()
    {
        return $this->container['archived_at'];
    }

    /**
     * Sets archived_at
     *
     * @param \DateTime|null $archived_at If set, the customer was already archived at the given date. Further modification is disabled.
     *
     * @return self
     */
    public function setArchivedAt($archived_at)
    {
        if (is_null($archived_at)) {
            throw new \InvalidArgumentException('non-nullable archived_at cannot be null');
        }
        $this->container['archived_at'] = $archived_at;

        return $this;
    }

    /**
     * Gets restored_at
     *
     * @return \DateTime|null
     */
    public function getRestoredAt()
    {
        return $this->container['restored_at'];
    }

    /**
     * Sets restored_at
     *
     * @param \DateTime|null $restored_at If set, the customer was restored from the archive at the given date.
     *
     * @return self
     */
    public function setRestoredAt($restored_at)
    {
        if (is_null($restored_at)) {
            throw new \InvalidArgumentException('non-nullable restored_at cannot be null');
        }
        $this->container['restored_at'] = $restored_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


