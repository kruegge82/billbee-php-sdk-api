<?php
/**
 * BillbeeInterfacesBillbeeAPIModelOrder
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesBillbeeAPIModelOrder Class Doc Comment
 *
 * @category Class
 * @description A class that represents the Billbee data model of a single order
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesBillbeeAPIModelOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.BillbeeAPI.Model.Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rebate_difference' => 'float',
        'shipping_ids' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelShipment[]',
        'accept_loss_of_return_right' => 'bool',
        'id' => 'string',
        'order_number' => 'string',
        'state' => 'int',
        'vat_mode' => 'int',
        'created_at' => '\DateTime',
        'shipped_at' => '\DateTime',
        'confirmed_at' => '\DateTime',
        'payed_at' => '\DateTime',
        'seller_comment' => 'string',
        'comments' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelCommentApiModel[]',
        'invoice_number_prefix' => 'string',
        'invoice_number_postfix' => 'string',
        'invoice_number' => 'int',
        'invoice_date' => '\DateTime',
        'invoice_address' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel',
        'shipping_address' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel',
        'payment_method' => 'int',
        'shipping_cost' => 'float',
        'total_cost' => 'float',
        'adjustment_cost' => 'float',
        'adjustment_reason' => 'string',
        'order_items' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderItem[]',
        'currency' => 'string',
        'seller' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderUser',
        'buyer' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderUser',
        'updated_at' => '\DateTime',
        'tax_rate1' => 'float',
        'tax_rate2' => 'float',
        'bill_bee_order_id' => 'int',
        'bill_bee_parent_order_id' => 'int',
        'vat_id' => 'string',
        'tags' => 'string[]',
        'ship_weight_kg' => 'float',
        'language_code' => 'string',
        'paid_amount' => 'float',
        'shipping_profile_id' => 'string',
        'shipping_provider_id' => 'int',
        'shipping_provider_product_id' => 'int',
        'shipping_provider_name' => 'string',
        'shipping_provider_product_name' => 'string',
        'shipping_profile_name' => 'string',
        'payment_instruction' => 'string',
        'is_cancelation_for' => 'string',
        'payment_transaction_id' => 'string',
        'distribution_center' => 'string',
        'delivery_source_country_code' => 'string',
        'custom_invoice_note' => 'string',
        'customer_number' => 'string',
        'payment_reference' => 'string',
        'shipping_services' => '\kruegge82\billbee\Model\BillbeeInterfacesShippingProductService[]',
        'customer' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelCustomerApiModel',
        'history' => '\kruegge82\billbee\Model\BillbeeInterfacesOrderHistoryEntry[]',
        'payments' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsOrderPayment[]',
        'last_modified_at' => '\DateTime',
        'archived_at' => '\DateTime',
        'restored_at' => '\DateTime',
        'api_account_id' => 'int',
        'api_account_name' => 'string',
        'merchant_vat_id' => 'string',
        'customer_vat_id' => 'string',
        'is_from_billbee_api' => 'bool',
        'web_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'rebate_difference' => 'double',
        'shipping_ids' => null,
        'accept_loss_of_return_right' => null,
        'id' => null,
        'order_number' => null,
        'state' => 'int32',
        'vat_mode' => 'int32',
        'created_at' => 'date-time',
        'shipped_at' => 'date-time',
        'confirmed_at' => 'date-time',
        'payed_at' => 'date-time',
        'seller_comment' => null,
        'comments' => null,
        'invoice_number_prefix' => null,
        'invoice_number_postfix' => null,
        'invoice_number' => 'int32',
        'invoice_date' => 'date-time',
        'invoice_address' => null,
        'shipping_address' => null,
        'payment_method' => 'int32',
        'shipping_cost' => 'double',
        'total_cost' => 'double',
        'adjustment_cost' => 'double',
        'adjustment_reason' => null,
        'order_items' => null,
        'currency' => null,
        'seller' => null,
        'buyer' => null,
        'updated_at' => 'date-time',
        'tax_rate1' => 'double',
        'tax_rate2' => 'double',
        'bill_bee_order_id' => 'int64',
        'bill_bee_parent_order_id' => 'int64',
        'vat_id' => null,
        'tags' => null,
        'ship_weight_kg' => 'double',
        'language_code' => null,
        'paid_amount' => 'double',
        'shipping_profile_id' => null,
        'shipping_provider_id' => 'int64',
        'shipping_provider_product_id' => 'int64',
        'shipping_provider_name' => null,
        'shipping_provider_product_name' => null,
        'shipping_profile_name' => null,
        'payment_instruction' => null,
        'is_cancelation_for' => null,
        'payment_transaction_id' => null,
        'distribution_center' => null,
        'delivery_source_country_code' => null,
        'custom_invoice_note' => null,
        'customer_number' => null,
        'payment_reference' => null,
        'shipping_services' => null,
        'customer' => null,
        'history' => null,
        'payments' => null,
        'last_modified_at' => 'date-time',
        'archived_at' => 'date-time',
        'restored_at' => 'date-time',
        'api_account_id' => 'int64',
        'api_account_name' => null,
        'merchant_vat_id' => null,
        'customer_vat_id' => null,
        'is_from_billbee_api' => null,
        'web_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'rebate_difference' => false,
        'shipping_ids' => false,
        'accept_loss_of_return_right' => false,
        'id' => false,
        'order_number' => false,
        'state' => false,
        'vat_mode' => false,
        'created_at' => false,
        'shipped_at' => false,
        'confirmed_at' => false,
        'payed_at' => false,
        'seller_comment' => false,
        'comments' => false,
        'invoice_number_prefix' => false,
        'invoice_number_postfix' => false,
        'invoice_number' => false,
        'invoice_date' => false,
        'invoice_address' => false,
        'shipping_address' => false,
        'payment_method' => false,
        'shipping_cost' => false,
        'total_cost' => false,
        'adjustment_cost' => false,
        'adjustment_reason' => false,
        'order_items' => false,
        'currency' => false,
        'seller' => false,
        'buyer' => false,
        'updated_at' => false,
        'tax_rate1' => false,
        'tax_rate2' => false,
        'bill_bee_order_id' => false,
        'bill_bee_parent_order_id' => false,
        'vat_id' => false,
        'tags' => false,
        'ship_weight_kg' => false,
        'language_code' => false,
        'paid_amount' => false,
        'shipping_profile_id' => false,
        'shipping_provider_id' => false,
        'shipping_provider_product_id' => false,
        'shipping_provider_name' => false,
        'shipping_provider_product_name' => false,
        'shipping_profile_name' => false,
        'payment_instruction' => false,
        'is_cancelation_for' => false,
        'payment_transaction_id' => false,
        'distribution_center' => false,
        'delivery_source_country_code' => false,
        'custom_invoice_note' => false,
        'customer_number' => false,
        'payment_reference' => false,
        'shipping_services' => false,
        'customer' => false,
        'history' => false,
        'payments' => false,
        'last_modified_at' => false,
        'archived_at' => false,
        'restored_at' => false,
        'api_account_id' => false,
        'api_account_name' => false,
        'merchant_vat_id' => false,
        'customer_vat_id' => false,
        'is_from_billbee_api' => false,
        'web_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rebate_difference' => 'RebateDifference',
        'shipping_ids' => 'ShippingIds',
        'accept_loss_of_return_right' => 'AcceptLossOfReturnRight',
        'id' => 'Id',
        'order_number' => 'OrderNumber',
        'state' => 'State',
        'vat_mode' => 'VatMode',
        'created_at' => 'CreatedAt',
        'shipped_at' => 'ShippedAt',
        'confirmed_at' => 'ConfirmedAt',
        'payed_at' => 'PayedAt',
        'seller_comment' => 'SellerComment',
        'comments' => 'Comments',
        'invoice_number_prefix' => 'InvoiceNumberPrefix',
        'invoice_number_postfix' => 'InvoiceNumberPostfix',
        'invoice_number' => 'InvoiceNumber',
        'invoice_date' => 'InvoiceDate',
        'invoice_address' => 'InvoiceAddress',
        'shipping_address' => 'ShippingAddress',
        'payment_method' => 'PaymentMethod',
        'shipping_cost' => 'ShippingCost',
        'total_cost' => 'TotalCost',
        'adjustment_cost' => 'AdjustmentCost',
        'adjustment_reason' => 'AdjustmentReason',
        'order_items' => 'OrderItems',
        'currency' => 'Currency',
        'seller' => 'Seller',
        'buyer' => 'Buyer',
        'updated_at' => 'UpdatedAt',
        'tax_rate1' => 'TaxRate1',
        'tax_rate2' => 'TaxRate2',
        'bill_bee_order_id' => 'BillBeeOrderId',
        'bill_bee_parent_order_id' => 'BillBeeParentOrderId',
        'vat_id' => 'VatId',
        'tags' => 'Tags',
        'ship_weight_kg' => 'ShipWeightKg',
        'language_code' => 'LanguageCode',
        'paid_amount' => 'PaidAmount',
        'shipping_profile_id' => 'ShippingProfileId',
        'shipping_provider_id' => 'ShippingProviderId',
        'shipping_provider_product_id' => 'ShippingProviderProductId',
        'shipping_provider_name' => 'ShippingProviderName',
        'shipping_provider_product_name' => 'ShippingProviderProductName',
        'shipping_profile_name' => 'ShippingProfileName',
        'payment_instruction' => 'PaymentInstruction',
        'is_cancelation_for' => 'IsCancelationFor',
        'payment_transaction_id' => 'PaymentTransactionId',
        'distribution_center' => 'DistributionCenter',
        'delivery_source_country_code' => 'DeliverySourceCountryCode',
        'custom_invoice_note' => 'CustomInvoiceNote',
        'customer_number' => 'CustomerNumber',
        'payment_reference' => 'PaymentReference',
        'shipping_services' => 'ShippingServices',
        'customer' => 'Customer',
        'history' => 'History',
        'payments' => 'Payments',
        'last_modified_at' => 'LastModifiedAt',
        'archived_at' => 'ArchivedAt',
        'restored_at' => 'RestoredAt',
        'api_account_id' => 'ApiAccountId',
        'api_account_name' => 'ApiAccountName',
        'merchant_vat_id' => 'MerchantVatId',
        'customer_vat_id' => 'CustomerVatId',
        'is_from_billbee_api' => 'IsFromBillbeeApi',
        'web_url' => 'WebUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rebate_difference' => 'setRebateDifference',
        'shipping_ids' => 'setShippingIds',
        'accept_loss_of_return_right' => 'setAcceptLossOfReturnRight',
        'id' => 'setId',
        'order_number' => 'setOrderNumber',
        'state' => 'setState',
        'vat_mode' => 'setVatMode',
        'created_at' => 'setCreatedAt',
        'shipped_at' => 'setShippedAt',
        'confirmed_at' => 'setConfirmedAt',
        'payed_at' => 'setPayedAt',
        'seller_comment' => 'setSellerComment',
        'comments' => 'setComments',
        'invoice_number_prefix' => 'setInvoiceNumberPrefix',
        'invoice_number_postfix' => 'setInvoiceNumberPostfix',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_date' => 'setInvoiceDate',
        'invoice_address' => 'setInvoiceAddress',
        'shipping_address' => 'setShippingAddress',
        'payment_method' => 'setPaymentMethod',
        'shipping_cost' => 'setShippingCost',
        'total_cost' => 'setTotalCost',
        'adjustment_cost' => 'setAdjustmentCost',
        'adjustment_reason' => 'setAdjustmentReason',
        'order_items' => 'setOrderItems',
        'currency' => 'setCurrency',
        'seller' => 'setSeller',
        'buyer' => 'setBuyer',
        'updated_at' => 'setUpdatedAt',
        'tax_rate1' => 'setTaxRate1',
        'tax_rate2' => 'setTaxRate2',
        'bill_bee_order_id' => 'setBillBeeOrderId',
        'bill_bee_parent_order_id' => 'setBillBeeParentOrderId',
        'vat_id' => 'setVatId',
        'tags' => 'setTags',
        'ship_weight_kg' => 'setShipWeightKg',
        'language_code' => 'setLanguageCode',
        'paid_amount' => 'setPaidAmount',
        'shipping_profile_id' => 'setShippingProfileId',
        'shipping_provider_id' => 'setShippingProviderId',
        'shipping_provider_product_id' => 'setShippingProviderProductId',
        'shipping_provider_name' => 'setShippingProviderName',
        'shipping_provider_product_name' => 'setShippingProviderProductName',
        'shipping_profile_name' => 'setShippingProfileName',
        'payment_instruction' => 'setPaymentInstruction',
        'is_cancelation_for' => 'setIsCancelationFor',
        'payment_transaction_id' => 'setPaymentTransactionId',
        'distribution_center' => 'setDistributionCenter',
        'delivery_source_country_code' => 'setDeliverySourceCountryCode',
        'custom_invoice_note' => 'setCustomInvoiceNote',
        'customer_number' => 'setCustomerNumber',
        'payment_reference' => 'setPaymentReference',
        'shipping_services' => 'setShippingServices',
        'customer' => 'setCustomer',
        'history' => 'setHistory',
        'payments' => 'setPayments',
        'last_modified_at' => 'setLastModifiedAt',
        'archived_at' => 'setArchivedAt',
        'restored_at' => 'setRestoredAt',
        'api_account_id' => 'setApiAccountId',
        'api_account_name' => 'setApiAccountName',
        'merchant_vat_id' => 'setMerchantVatId',
        'customer_vat_id' => 'setCustomerVatId',
        'is_from_billbee_api' => 'setIsFromBillbeeApi',
        'web_url' => 'setWebUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rebate_difference' => 'getRebateDifference',
        'shipping_ids' => 'getShippingIds',
        'accept_loss_of_return_right' => 'getAcceptLossOfReturnRight',
        'id' => 'getId',
        'order_number' => 'getOrderNumber',
        'state' => 'getState',
        'vat_mode' => 'getVatMode',
        'created_at' => 'getCreatedAt',
        'shipped_at' => 'getShippedAt',
        'confirmed_at' => 'getConfirmedAt',
        'payed_at' => 'getPayedAt',
        'seller_comment' => 'getSellerComment',
        'comments' => 'getComments',
        'invoice_number_prefix' => 'getInvoiceNumberPrefix',
        'invoice_number_postfix' => 'getInvoiceNumberPostfix',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_date' => 'getInvoiceDate',
        'invoice_address' => 'getInvoiceAddress',
        'shipping_address' => 'getShippingAddress',
        'payment_method' => 'getPaymentMethod',
        'shipping_cost' => 'getShippingCost',
        'total_cost' => 'getTotalCost',
        'adjustment_cost' => 'getAdjustmentCost',
        'adjustment_reason' => 'getAdjustmentReason',
        'order_items' => 'getOrderItems',
        'currency' => 'getCurrency',
        'seller' => 'getSeller',
        'buyer' => 'getBuyer',
        'updated_at' => 'getUpdatedAt',
        'tax_rate1' => 'getTaxRate1',
        'tax_rate2' => 'getTaxRate2',
        'bill_bee_order_id' => 'getBillBeeOrderId',
        'bill_bee_parent_order_id' => 'getBillBeeParentOrderId',
        'vat_id' => 'getVatId',
        'tags' => 'getTags',
        'ship_weight_kg' => 'getShipWeightKg',
        'language_code' => 'getLanguageCode',
        'paid_amount' => 'getPaidAmount',
        'shipping_profile_id' => 'getShippingProfileId',
        'shipping_provider_id' => 'getShippingProviderId',
        'shipping_provider_product_id' => 'getShippingProviderProductId',
        'shipping_provider_name' => 'getShippingProviderName',
        'shipping_provider_product_name' => 'getShippingProviderProductName',
        'shipping_profile_name' => 'getShippingProfileName',
        'payment_instruction' => 'getPaymentInstruction',
        'is_cancelation_for' => 'getIsCancelationFor',
        'payment_transaction_id' => 'getPaymentTransactionId',
        'distribution_center' => 'getDistributionCenter',
        'delivery_source_country_code' => 'getDeliverySourceCountryCode',
        'custom_invoice_note' => 'getCustomInvoiceNote',
        'customer_number' => 'getCustomerNumber',
        'payment_reference' => 'getPaymentReference',
        'shipping_services' => 'getShippingServices',
        'customer' => 'getCustomer',
        'history' => 'getHistory',
        'payments' => 'getPayments',
        'last_modified_at' => 'getLastModifiedAt',
        'archived_at' => 'getArchivedAt',
        'restored_at' => 'getRestoredAt',
        'api_account_id' => 'getApiAccountId',
        'api_account_name' => 'getApiAccountName',
        'merchant_vat_id' => 'getMerchantVatId',
        'customer_vat_id' => 'getCustomerVatId',
        'is_from_billbee_api' => 'getIsFromBillbeeApi',
        'web_url' => 'getWebUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_NUMBER_1 = 1;
    public const STATE_NUMBER_2 = 2;
    public const STATE_NUMBER_3 = 3;
    public const STATE_NUMBER_4 = 4;
    public const STATE_NUMBER_5 = 5;
    public const STATE_NUMBER_6 = 6;
    public const STATE_NUMBER_7 = 7;
    public const STATE_NUMBER_8 = 8;
    public const STATE_NUMBER_9 = 9;
    public const STATE_NUMBER_10 = 10;
    public const STATE_NUMBER_11 = 11;
    public const STATE_NUMBER_12 = 12;
    public const STATE_NUMBER_13 = 13;
    public const STATE_NUMBER_14 = 14;
    public const STATE_NUMBER_15 = 15;
    public const STATE_NUMBER_16 = 16;
    public const STATE_NUMBER_17 = 17;
    public const VAT_MODE_NUMBER_0 = 0;
    public const VAT_MODE_NUMBER_1 = 1;
    public const VAT_MODE_NUMBER_2 = 2;
    public const VAT_MODE_NUMBER_3 = 3;
    public const VAT_MODE_NUMBER_4 = 4;
    public const VAT_MODE_NUMBER_5 = 5;
    public const PAYMENT_METHOD_NUMBER_1 = 1;
    public const PAYMENT_METHOD_NUMBER_2 = 2;
    public const PAYMENT_METHOD_NUMBER_3 = 3;
    public const PAYMENT_METHOD_NUMBER_4 = 4;
    public const PAYMENT_METHOD_NUMBER_6 = 6;
    public const PAYMENT_METHOD_NUMBER_19 = 19;
    public const PAYMENT_METHOD_NUMBER_20 = 20;
    public const PAYMENT_METHOD_NUMBER_21 = 21;
    public const PAYMENT_METHOD_NUMBER_22 = 22;
    public const PAYMENT_METHOD_NUMBER_23 = 23;
    public const PAYMENT_METHOD_NUMBER_24 = 24;
    public const PAYMENT_METHOD_NUMBER_25 = 25;
    public const PAYMENT_METHOD_NUMBER_26 = 26;
    public const PAYMENT_METHOD_NUMBER_27 = 27;
    public const PAYMENT_METHOD_NUMBER_28 = 28;
    public const PAYMENT_METHOD_NUMBER_29 = 29;
    public const PAYMENT_METHOD_NUMBER_30 = 30;
    public const PAYMENT_METHOD_NUMBER_31 = 31;
    public const PAYMENT_METHOD_NUMBER_32 = 32;
    public const PAYMENT_METHOD_NUMBER_33 = 33;
    public const PAYMENT_METHOD_NUMBER_34 = 34;
    public const PAYMENT_METHOD_NUMBER_35 = 35;
    public const PAYMENT_METHOD_NUMBER_36 = 36;
    public const PAYMENT_METHOD_NUMBER_37 = 37;
    public const PAYMENT_METHOD_NUMBER_38 = 38;
    public const PAYMENT_METHOD_NUMBER_39 = 39;
    public const PAYMENT_METHOD_NUMBER_40 = 40;
    public const PAYMENT_METHOD_NUMBER_41 = 41;
    public const PAYMENT_METHOD_NUMBER_42 = 42;
    public const PAYMENT_METHOD_NUMBER_43 = 43;
    public const PAYMENT_METHOD_NUMBER_44 = 44;
    public const PAYMENT_METHOD_NUMBER_45 = 45;
    public const PAYMENT_METHOD_NUMBER_46 = 46;
    public const PAYMENT_METHOD_NUMBER_47 = 47;
    public const PAYMENT_METHOD_NUMBER_48 = 48;
    public const PAYMENT_METHOD_NUMBER_49 = 49;
    public const PAYMENT_METHOD_NUMBER_50 = 50;
    public const PAYMENT_METHOD_NUMBER_51 = 51;
    public const PAYMENT_METHOD_NUMBER_52 = 52;
    public const PAYMENT_METHOD_NUMBER_53 = 53;
    public const PAYMENT_METHOD_NUMBER_54 = 54;
    public const PAYMENT_METHOD_NUMBER_55 = 55;
    public const PAYMENT_METHOD_NUMBER_56 = 56;
    public const PAYMENT_METHOD_NUMBER_57 = 57;
    public const PAYMENT_METHOD_NUMBER_58 = 58;
    public const PAYMENT_METHOD_NUMBER_59 = 59;
    public const PAYMENT_METHOD_NUMBER_60 = 60;
    public const PAYMENT_METHOD_NUMBER_61 = 61;
    public const PAYMENT_METHOD_NUMBER_62 = 62;
    public const PAYMENT_METHOD_NUMBER_63 = 63;
    public const PAYMENT_METHOD_NUMBER_64 = 64;
    public const PAYMENT_METHOD_NUMBER_65 = 65;
    public const PAYMENT_METHOD_NUMBER_66 = 66;
    public const PAYMENT_METHOD_NUMBER_67 = 67;
    public const PAYMENT_METHOD_NUMBER_68 = 68;
    public const PAYMENT_METHOD_NUMBER_69 = 69;
    public const PAYMENT_METHOD_NUMBER_70 = 70;
    public const PAYMENT_METHOD_NUMBER_71 = 71;
    public const PAYMENT_METHOD_NUMBER_72 = 72;
    public const PAYMENT_METHOD_NUMBER_73 = 73;
    public const PAYMENT_METHOD_NUMBER_74 = 74;
    public const PAYMENT_METHOD_NUMBER_75 = 75;
    public const PAYMENT_METHOD_NUMBER_76 = 76;
    public const PAYMENT_METHOD_NUMBER_77 = 77;
    public const PAYMENT_METHOD_NUMBER_78 = 78;
    public const PAYMENT_METHOD_NUMBER_79 = 79;
    public const PAYMENT_METHOD_NUMBER_80 = 80;
    public const PAYMENT_METHOD_NUMBER_81 = 81;
    public const PAYMENT_METHOD_NUMBER_82 = 82;
    public const PAYMENT_METHOD_NUMBER_83 = 83;
    public const PAYMENT_METHOD_NUMBER_84 = 84;
    public const PAYMENT_METHOD_NUMBER_85 = 85;
    public const PAYMENT_METHOD_NUMBER_86 = 86;
    public const PAYMENT_METHOD_NUMBER_87 = 87;
    public const PAYMENT_METHOD_NUMBER_88 = 88;
    public const PAYMENT_METHOD_NUMBER_89 = 89;
    public const PAYMENT_METHOD_NUMBER_90 = 90;
    public const PAYMENT_METHOD_NUMBER_91 = 91;
    public const PAYMENT_METHOD_NUMBER_92 = 92;
    public const PAYMENT_METHOD_NUMBER_93 = 93;
    public const PAYMENT_METHOD_NUMBER_94 = 94;
    public const PAYMENT_METHOD_NUMBER_95 = 95;
    public const PAYMENT_METHOD_NUMBER_96 = 96;
    public const PAYMENT_METHOD_NUMBER_97 = 97;
    public const PAYMENT_METHOD_NUMBER_98 = 98;
    public const PAYMENT_METHOD_NUMBER_99 = 99;
    public const PAYMENT_METHOD_NUMBER_100 = 100;
    public const PAYMENT_METHOD_NUMBER_101 = 101;
    public const PAYMENT_METHOD_NUMBER_102 = 102;
    public const PAYMENT_METHOD_NUMBER_103 = 103;
    public const PAYMENT_METHOD_NUMBER_104 = 104;
    public const PAYMENT_METHOD_NUMBER_105 = 105;
    public const PAYMENT_METHOD_NUMBER_106 = 106;
    public const PAYMENT_METHOD_NUMBER_107 = 107;
    public const PAYMENT_METHOD_NUMBER_108 = 108;
    public const PAYMENT_METHOD_NUMBER_109 = 109;
    public const PAYMENT_METHOD_NUMBER_110 = 110;
    public const PAYMENT_METHOD_NUMBER_111 = 111;
    public const PAYMENT_METHOD_NUMBER_112 = 112;
    public const PAYMENT_METHOD_NUMBER_113 = 113;
    public const PAYMENT_METHOD_NUMBER_114 = 114;
    public const PAYMENT_METHOD_NUMBER_115 = 115;
    public const PAYMENT_METHOD_NUMBER_116 = 116;
    public const PAYMENT_METHOD_NUMBER_117 = 117;
    public const PAYMENT_METHOD_NUMBER_118 = 118;
    public const PAYMENT_METHOD_NUMBER_119 = 119;
    public const PAYMENT_METHOD_NUMBER_120 = 120;
    public const PAYMENT_METHOD_NUMBER_121 = 121;
    public const PAYMENT_METHOD_NUMBER_122 = 122;
    public const PAYMENT_METHOD_NUMBER_123 = 123;
    public const PAYMENT_METHOD_NUMBER_124 = 124;
    public const PAYMENT_METHOD_NUMBER_125 = 125;
    public const PAYMENT_METHOD_NUMBER_126 = 126;
    public const PAYMENT_METHOD_NUMBER_127 = 127;
    public const PAYMENT_METHOD_NUMBER_128 = 128;
    public const PAYMENT_METHOD_NUMBER_129 = 129;
    public const PAYMENT_METHOD_NUMBER_130 = 130;
    public const PAYMENT_METHOD_NUMBER_131 = 131;
    public const PAYMENT_METHOD_NUMBER_132 = 132;
    public const PAYMENT_METHOD_NUMBER_133 = 133;
    public const PAYMENT_METHOD_NUMBER_134 = 134;
    public const PAYMENT_METHOD_NUMBER_135 = 135;
    public const PAYMENT_METHOD_NUMBER_136 = 136;
    public const PAYMENT_METHOD_NUMBER_137 = 137;
    public const PAYMENT_METHOD_NUMBER_138 = 138;
    public const PAYMENT_METHOD_NUMBER_139 = 139;
    public const PAYMENT_METHOD_NUMBER_140 = 140;
    public const PAYMENT_METHOD_NUMBER_141 = 141;
    public const PAYMENT_METHOD_NUMBER_142 = 142;
    public const PAYMENT_METHOD_NUMBER_143 = 143;
    public const PAYMENT_METHOD_NUMBER_144 = 144;
    public const PAYMENT_METHOD_NUMBER_145 = 145;
    public const PAYMENT_METHOD_NUMBER_146 = 146;
    public const PAYMENT_METHOD_NUMBER_147 = 147;
    public const PAYMENT_METHOD_NUMBER_148 = 148;
    public const PAYMENT_METHOD_NUMBER_149 = 149;
    public const PAYMENT_METHOD_NUMBER_150 = 150;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_NUMBER_1,
            self::STATE_NUMBER_2,
            self::STATE_NUMBER_3,
            self::STATE_NUMBER_4,
            self::STATE_NUMBER_5,
            self::STATE_NUMBER_6,
            self::STATE_NUMBER_7,
            self::STATE_NUMBER_8,
            self::STATE_NUMBER_9,
            self::STATE_NUMBER_10,
            self::STATE_NUMBER_11,
            self::STATE_NUMBER_12,
            self::STATE_NUMBER_13,
            self::STATE_NUMBER_14,
            self::STATE_NUMBER_15,
            self::STATE_NUMBER_16,
            self::STATE_NUMBER_17,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVatModeAllowableValues()
    {
        return [
            self::VAT_MODE_NUMBER_0,
            self::VAT_MODE_NUMBER_1,
            self::VAT_MODE_NUMBER_2,
            self::VAT_MODE_NUMBER_3,
            self::VAT_MODE_NUMBER_4,
            self::VAT_MODE_NUMBER_5,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_NUMBER_1,
            self::PAYMENT_METHOD_NUMBER_2,
            self::PAYMENT_METHOD_NUMBER_3,
            self::PAYMENT_METHOD_NUMBER_4,
            self::PAYMENT_METHOD_NUMBER_6,
            self::PAYMENT_METHOD_NUMBER_19,
            self::PAYMENT_METHOD_NUMBER_20,
            self::PAYMENT_METHOD_NUMBER_21,
            self::PAYMENT_METHOD_NUMBER_22,
            self::PAYMENT_METHOD_NUMBER_23,
            self::PAYMENT_METHOD_NUMBER_24,
            self::PAYMENT_METHOD_NUMBER_25,
            self::PAYMENT_METHOD_NUMBER_26,
            self::PAYMENT_METHOD_NUMBER_27,
            self::PAYMENT_METHOD_NUMBER_28,
            self::PAYMENT_METHOD_NUMBER_29,
            self::PAYMENT_METHOD_NUMBER_30,
            self::PAYMENT_METHOD_NUMBER_31,
            self::PAYMENT_METHOD_NUMBER_32,
            self::PAYMENT_METHOD_NUMBER_33,
            self::PAYMENT_METHOD_NUMBER_34,
            self::PAYMENT_METHOD_NUMBER_35,
            self::PAYMENT_METHOD_NUMBER_36,
            self::PAYMENT_METHOD_NUMBER_37,
            self::PAYMENT_METHOD_NUMBER_38,
            self::PAYMENT_METHOD_NUMBER_39,
            self::PAYMENT_METHOD_NUMBER_40,
            self::PAYMENT_METHOD_NUMBER_41,
            self::PAYMENT_METHOD_NUMBER_42,
            self::PAYMENT_METHOD_NUMBER_43,
            self::PAYMENT_METHOD_NUMBER_44,
            self::PAYMENT_METHOD_NUMBER_45,
            self::PAYMENT_METHOD_NUMBER_46,
            self::PAYMENT_METHOD_NUMBER_47,
            self::PAYMENT_METHOD_NUMBER_48,
            self::PAYMENT_METHOD_NUMBER_49,
            self::PAYMENT_METHOD_NUMBER_50,
            self::PAYMENT_METHOD_NUMBER_51,
            self::PAYMENT_METHOD_NUMBER_52,
            self::PAYMENT_METHOD_NUMBER_53,
            self::PAYMENT_METHOD_NUMBER_54,
            self::PAYMENT_METHOD_NUMBER_55,
            self::PAYMENT_METHOD_NUMBER_56,
            self::PAYMENT_METHOD_NUMBER_57,
            self::PAYMENT_METHOD_NUMBER_58,
            self::PAYMENT_METHOD_NUMBER_59,
            self::PAYMENT_METHOD_NUMBER_60,
            self::PAYMENT_METHOD_NUMBER_61,
            self::PAYMENT_METHOD_NUMBER_62,
            self::PAYMENT_METHOD_NUMBER_63,
            self::PAYMENT_METHOD_NUMBER_64,
            self::PAYMENT_METHOD_NUMBER_65,
            self::PAYMENT_METHOD_NUMBER_66,
            self::PAYMENT_METHOD_NUMBER_67,
            self::PAYMENT_METHOD_NUMBER_68,
            self::PAYMENT_METHOD_NUMBER_69,
            self::PAYMENT_METHOD_NUMBER_70,
            self::PAYMENT_METHOD_NUMBER_71,
            self::PAYMENT_METHOD_NUMBER_72,
            self::PAYMENT_METHOD_NUMBER_73,
            self::PAYMENT_METHOD_NUMBER_74,
            self::PAYMENT_METHOD_NUMBER_75,
            self::PAYMENT_METHOD_NUMBER_76,
            self::PAYMENT_METHOD_NUMBER_77,
            self::PAYMENT_METHOD_NUMBER_78,
            self::PAYMENT_METHOD_NUMBER_79,
            self::PAYMENT_METHOD_NUMBER_80,
            self::PAYMENT_METHOD_NUMBER_81,
            self::PAYMENT_METHOD_NUMBER_82,
            self::PAYMENT_METHOD_NUMBER_83,
            self::PAYMENT_METHOD_NUMBER_84,
            self::PAYMENT_METHOD_NUMBER_85,
            self::PAYMENT_METHOD_NUMBER_86,
            self::PAYMENT_METHOD_NUMBER_87,
            self::PAYMENT_METHOD_NUMBER_88,
            self::PAYMENT_METHOD_NUMBER_89,
            self::PAYMENT_METHOD_NUMBER_90,
            self::PAYMENT_METHOD_NUMBER_91,
            self::PAYMENT_METHOD_NUMBER_92,
            self::PAYMENT_METHOD_NUMBER_93,
            self::PAYMENT_METHOD_NUMBER_94,
            self::PAYMENT_METHOD_NUMBER_95,
            self::PAYMENT_METHOD_NUMBER_96,
            self::PAYMENT_METHOD_NUMBER_97,
            self::PAYMENT_METHOD_NUMBER_98,
            self::PAYMENT_METHOD_NUMBER_99,
            self::PAYMENT_METHOD_NUMBER_100,
            self::PAYMENT_METHOD_NUMBER_101,
            self::PAYMENT_METHOD_NUMBER_102,
            self::PAYMENT_METHOD_NUMBER_103,
            self::PAYMENT_METHOD_NUMBER_104,
            self::PAYMENT_METHOD_NUMBER_105,
            self::PAYMENT_METHOD_NUMBER_106,
            self::PAYMENT_METHOD_NUMBER_107,
            self::PAYMENT_METHOD_NUMBER_108,
            self::PAYMENT_METHOD_NUMBER_109,
            self::PAYMENT_METHOD_NUMBER_110,
            self::PAYMENT_METHOD_NUMBER_111,
            self::PAYMENT_METHOD_NUMBER_112,
            self::PAYMENT_METHOD_NUMBER_113,
            self::PAYMENT_METHOD_NUMBER_114,
            self::PAYMENT_METHOD_NUMBER_115,
            self::PAYMENT_METHOD_NUMBER_116,
            self::PAYMENT_METHOD_NUMBER_117,
            self::PAYMENT_METHOD_NUMBER_118,
            self::PAYMENT_METHOD_NUMBER_119,
            self::PAYMENT_METHOD_NUMBER_120,
            self::PAYMENT_METHOD_NUMBER_121,
            self::PAYMENT_METHOD_NUMBER_122,
            self::PAYMENT_METHOD_NUMBER_123,
            self::PAYMENT_METHOD_NUMBER_124,
            self::PAYMENT_METHOD_NUMBER_125,
            self::PAYMENT_METHOD_NUMBER_126,
            self::PAYMENT_METHOD_NUMBER_127,
            self::PAYMENT_METHOD_NUMBER_128,
            self::PAYMENT_METHOD_NUMBER_129,
            self::PAYMENT_METHOD_NUMBER_130,
            self::PAYMENT_METHOD_NUMBER_131,
            self::PAYMENT_METHOD_NUMBER_132,
            self::PAYMENT_METHOD_NUMBER_133,
            self::PAYMENT_METHOD_NUMBER_134,
            self::PAYMENT_METHOD_NUMBER_135,
            self::PAYMENT_METHOD_NUMBER_136,
            self::PAYMENT_METHOD_NUMBER_137,
            self::PAYMENT_METHOD_NUMBER_138,
            self::PAYMENT_METHOD_NUMBER_139,
            self::PAYMENT_METHOD_NUMBER_140,
            self::PAYMENT_METHOD_NUMBER_141,
            self::PAYMENT_METHOD_NUMBER_142,
            self::PAYMENT_METHOD_NUMBER_143,
            self::PAYMENT_METHOD_NUMBER_144,
            self::PAYMENT_METHOD_NUMBER_145,
            self::PAYMENT_METHOD_NUMBER_146,
            self::PAYMENT_METHOD_NUMBER_147,
            self::PAYMENT_METHOD_NUMBER_148,
            self::PAYMENT_METHOD_NUMBER_149,
            self::PAYMENT_METHOD_NUMBER_150,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('rebate_difference', $data ?? [], null);
        $this->setIfExists('shipping_ids', $data ?? [], null);
        $this->setIfExists('accept_loss_of_return_right', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('vat_mode', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('shipped_at', $data ?? [], null);
        $this->setIfExists('confirmed_at', $data ?? [], null);
        $this->setIfExists('payed_at', $data ?? [], null);
        $this->setIfExists('seller_comment', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('invoice_number_prefix', $data ?? [], null);
        $this->setIfExists('invoice_number_postfix', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('invoice_address', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('shipping_cost', $data ?? [], null);
        $this->setIfExists('total_cost', $data ?? [], null);
        $this->setIfExists('adjustment_cost', $data ?? [], null);
        $this->setIfExists('adjustment_reason', $data ?? [], null);
        $this->setIfExists('order_items', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('tax_rate1', $data ?? [], null);
        $this->setIfExists('tax_rate2', $data ?? [], null);
        $this->setIfExists('bill_bee_order_id', $data ?? [], null);
        $this->setIfExists('bill_bee_parent_order_id', $data ?? [], null);
        $this->setIfExists('vat_id', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('ship_weight_kg', $data ?? [], null);
        $this->setIfExists('language_code', $data ?? [], null);
        $this->setIfExists('paid_amount', $data ?? [], null);
        $this->setIfExists('shipping_profile_id', $data ?? [], null);
        $this->setIfExists('shipping_provider_id', $data ?? [], null);
        $this->setIfExists('shipping_provider_product_id', $data ?? [], null);
        $this->setIfExists('shipping_provider_name', $data ?? [], null);
        $this->setIfExists('shipping_provider_product_name', $data ?? [], null);
        $this->setIfExists('shipping_profile_name', $data ?? [], null);
        $this->setIfExists('payment_instruction', $data ?? [], null);
        $this->setIfExists('is_cancelation_for', $data ?? [], null);
        $this->setIfExists('payment_transaction_id', $data ?? [], null);
        $this->setIfExists('distribution_center', $data ?? [], null);
        $this->setIfExists('delivery_source_country_code', $data ?? [], null);
        $this->setIfExists('custom_invoice_note', $data ?? [], null);
        $this->setIfExists('customer_number', $data ?? [], null);
        $this->setIfExists('payment_reference', $data ?? [], null);
        $this->setIfExists('shipping_services', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('history', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('last_modified_at', $data ?? [], null);
        $this->setIfExists('archived_at', $data ?? [], null);
        $this->setIfExists('restored_at', $data ?? [], null);
        $this->setIfExists('api_account_id', $data ?? [], null);
        $this->setIfExists('api_account_name', $data ?? [], null);
        $this->setIfExists('merchant_vat_id', $data ?? [], null);
        $this->setIfExists('customer_vat_id', $data ?? [], null);
        $this->setIfExists('is_from_billbee_api', $data ?? [], null);
        $this->setIfExists('web_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVatModeAllowableValues();
        if (!is_null($this->container['vat_mode']) && !in_array($this->container['vat_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vat_mode', must be one of '%s'",
                $this->container['vat_mode'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_method', must be one of '%s'",
                $this->container['payment_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rebate_difference
     *
     * @return float|null
     */
    public function getRebateDifference()
    {
        return $this->container['rebate_difference'];
    }

    /**
     * Sets rebate_difference
     *
     * @param float|null $rebate_difference rebate_difference
     *
     * @return self
     */
    public function setRebateDifference($rebate_difference)
    {
        if (is_null($rebate_difference)) {
            throw new \InvalidArgumentException('non-nullable rebate_difference cannot be null');
        }
        $this->container['rebate_difference'] = $rebate_difference;

        return $this;
    }

    /**
     * Gets shipping_ids
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelShipment[]|null
     */
    public function getShippingIds()
    {
        return $this->container['shipping_ids'];
    }

    /**
     * Sets shipping_ids
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelShipment[]|null $shipping_ids The shipments of the order
     *
     * @return self
     */
    public function setShippingIds($shipping_ids)
    {
        if (is_null($shipping_ids)) {
            throw new \InvalidArgumentException('non-nullable shipping_ids cannot be null');
        }
        $this->container['shipping_ids'] = $shipping_ids;

        return $this;
    }

    /**
     * Gets accept_loss_of_return_right
     *
     * @return bool|null
     */
    public function getAcceptLossOfReturnRight()
    {
        return $this->container['accept_loss_of_return_right'];
    }

    /**
     * Sets accept_loss_of_return_right
     *
     * @param bool|null $accept_loss_of_return_right Customer accepts loss due to withdrawal
     *
     * @return self
     */
    public function setAcceptLossOfReturnRight($accept_loss_of_return_right)
    {
        if (is_null($accept_loss_of_return_right)) {
            throw new \InvalidArgumentException('non-nullable accept_loss_of_return_right cannot be null');
        }
        $this->container['accept_loss_of_return_right'] = $accept_loss_of_return_right;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Id of the order in the external system (marketplace)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number Order number of the order in the external system (marketplace)
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int|null $state The current state of the order
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets vat_mode
     *
     * @return int|null
     */
    public function getVatMode()
    {
        return $this->container['vat_mode'];
    }

    /**
     * Sets vat_mode
     *
     * @param int|null $vat_mode The vat mode of the order
     *
     * @return self
     */
    public function setVatMode($vat_mode)
    {
        if (is_null($vat_mode)) {
            throw new \InvalidArgumentException('non-nullable vat_mode cannot be null');
        }
        $allowedValues = $this->getVatModeAllowableValues();
        if (!in_array($vat_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vat_mode', must be one of '%s'",
                    $vat_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vat_mode'] = $vat_mode;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date on which the order was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets shipped_at
     *
     * @return \DateTime|null
     */
    public function getShippedAt()
    {
        return $this->container['shipped_at'];
    }

    /**
     * Sets shipped_at
     *
     * @param \DateTime|null $shipped_at The date on which the order was shipped
     *
     * @return self
     */
    public function setShippedAt($shipped_at)
    {
        if (is_null($shipped_at)) {
            throw new \InvalidArgumentException('non-nullable shipped_at cannot be null');
        }
        $this->container['shipped_at'] = $shipped_at;

        return $this;
    }

    /**
     * Gets confirmed_at
     *
     * @return \DateTime|null
     */
    public function getConfirmedAt()
    {
        return $this->container['confirmed_at'];
    }

    /**
     * Sets confirmed_at
     *
     * @param \DateTime|null $confirmed_at The date on which the order was confirmed
     *
     * @return self
     */
    public function setConfirmedAt($confirmed_at)
    {
        if (is_null($confirmed_at)) {
            throw new \InvalidArgumentException('non-nullable confirmed_at cannot be null');
        }
        $this->container['confirmed_at'] = $confirmed_at;

        return $this;
    }

    /**
     * Gets payed_at
     *
     * @return \DateTime|null
     */
    public function getPayedAt()
    {
        return $this->container['payed_at'];
    }

    /**
     * Sets payed_at
     *
     * @param \DateTime|null $payed_at The date on which the order was paid
     *
     * @return self
     */
    public function setPayedAt($payed_at)
    {
        if (is_null($payed_at)) {
            throw new \InvalidArgumentException('non-nullable payed_at cannot be null');
        }
        $this->container['payed_at'] = $payed_at;

        return $this;
    }

    /**
     * Gets seller_comment
     *
     * @return string|null
     */
    public function getSellerComment()
    {
        return $this->container['seller_comment'];
    }

    /**
     * Sets seller_comment
     *
     * @param string|null $seller_comment An internal seller comment
     *
     * @return self
     */
    public function setSellerComment($seller_comment)
    {
        if (is_null($seller_comment)) {
            throw new \InvalidArgumentException('non-nullable seller_comment cannot be null');
        }
        $this->container['seller_comment'] = $seller_comment;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelCommentApiModel[]|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelCommentApiModel[]|null $comments All messages / comments of the order
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets invoice_number_prefix
     *
     * @return string|null
     */
    public function getInvoiceNumberPrefix()
    {
        return $this->container['invoice_number_prefix'];
    }

    /**
     * Sets invoice_number_prefix
     *
     * @param string|null $invoice_number_prefix The prefix of the invoice number
     *
     * @return self
     */
    public function setInvoiceNumberPrefix($invoice_number_prefix)
    {
        if (is_null($invoice_number_prefix)) {
            throw new \InvalidArgumentException('non-nullable invoice_number_prefix cannot be null');
        }
        $this->container['invoice_number_prefix'] = $invoice_number_prefix;

        return $this;
    }

    /**
     * Gets invoice_number_postfix
     *
     * @return string|null
     */
    public function getInvoiceNumberPostfix()
    {
        return $this->container['invoice_number_postfix'];
    }

    /**
     * Sets invoice_number_postfix
     *
     * @param string|null $invoice_number_postfix The postfix of the invoice number
     *
     * @return self
     */
    public function setInvoiceNumberPostfix($invoice_number_postfix)
    {
        if (is_null($invoice_number_postfix)) {
            throw new \InvalidArgumentException('non-nullable invoice_number_postfix cannot be null');
        }
        $this->container['invoice_number_postfix'] = $invoice_number_postfix;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return int|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param int|null $invoice_number The invoice number
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime|null $invoice_date The date on which the invoice was created
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel|null $invoice_address invoice_address
     *
     * @return self
     */
    public function setInvoiceAddress($invoice_address)
    {
        if (is_null($invoice_address)) {
            throw new \InvalidArgumentException('non-nullable invoice_address cannot be null');
        }
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderAddressApiModel|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return int|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param int|null $payment_method The payment method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_method', must be one of '%s'",
                    $payment_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return float|null
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param float|null $shipping_cost The shipping cost
     *
     * @return self
     */
    public function setShippingCost($shipping_cost)
    {
        if (is_null($shipping_cost)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost cannot be null');
        }
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return float|null
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param float|null $total_cost The total cost excluding shipping cost
     *
     * @return self
     */
    public function setTotalCost($total_cost)
    {
        if (is_null($total_cost)) {
            throw new \InvalidArgumentException('non-nullable total_cost cannot be null');
        }
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets adjustment_cost
     *
     * @return float|null
     */
    public function getAdjustmentCost()
    {
        return $this->container['adjustment_cost'];
    }

    /**
     * Sets adjustment_cost
     *
     * @param float|null $adjustment_cost adjustment_cost
     *
     * @return self
     */
    public function setAdjustmentCost($adjustment_cost)
    {
        if (is_null($adjustment_cost)) {
            throw new \InvalidArgumentException('non-nullable adjustment_cost cannot be null');
        }
        $this->container['adjustment_cost'] = $adjustment_cost;

        return $this;
    }

    /**
     * Gets adjustment_reason
     *
     * @return string|null
     */
    public function getAdjustmentReason()
    {
        return $this->container['adjustment_reason'];
    }

    /**
     * Sets adjustment_reason
     *
     * @param string|null $adjustment_reason adjustment_reason
     *
     * @return self
     */
    public function setAdjustmentReason($adjustment_reason)
    {
        if (is_null($adjustment_reason)) {
            throw new \InvalidArgumentException('non-nullable adjustment_reason cannot be null');
        }
        $this->container['adjustment_reason'] = $adjustment_reason;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderItem[]|null
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderItem[]|null $order_items The list of items purchased like shirt, pant, toys etc
     *
     * @return self
     */
    public function setOrderItems($order_items)
    {
        if (is_null($order_items)) {
            throw new \InvalidArgumentException('non-nullable order_items cannot be null');
        }
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The three letter currency code.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderUser|null
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderUser|null $seller seller
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            throw new \InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderUser|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelOrderUser|null $buyer buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The date on which the order was last updated
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets tax_rate1
     *
     * @return float|null
     */
    public function getTaxRate1()
    {
        return $this->container['tax_rate1'];
    }

    /**
     * Sets tax_rate1
     *
     * @param float|null $tax_rate1 The regular tax rate
     *
     * @return self
     */
    public function setTaxRate1($tax_rate1)
    {
        if (is_null($tax_rate1)) {
            throw new \InvalidArgumentException('non-nullable tax_rate1 cannot be null');
        }
        $this->container['tax_rate1'] = $tax_rate1;

        return $this;
    }

    /**
     * Gets tax_rate2
     *
     * @return float|null
     */
    public function getTaxRate2()
    {
        return $this->container['tax_rate2'];
    }

    /**
     * Sets tax_rate2
     *
     * @param float|null $tax_rate2 The reduced tax rate
     *
     * @return self
     */
    public function setTaxRate2($tax_rate2)
    {
        if (is_null($tax_rate2)) {
            throw new \InvalidArgumentException('non-nullable tax_rate2 cannot be null');
        }
        $this->container['tax_rate2'] = $tax_rate2;

        return $this;
    }

    /**
     * Gets bill_bee_order_id
     *
     * @return int|null
     */
    public function getBillBeeOrderId()
    {
        return $this->container['bill_bee_order_id'];
    }

    /**
     * Sets bill_bee_order_id
     *
     * @param int|null $bill_bee_order_id The Order.Id from the Billbee database
     *
     * @return self
     */
    public function setBillBeeOrderId($bill_bee_order_id)
    {
        if (is_null($bill_bee_order_id)) {
            throw new \InvalidArgumentException('non-nullable bill_bee_order_id cannot be null');
        }
        $this->container['bill_bee_order_id'] = $bill_bee_order_id;

        return $this;
    }

    /**
     * Gets bill_bee_parent_order_id
     *
     * @return int|null
     */
    public function getBillBeeParentOrderId()
    {
        return $this->container['bill_bee_parent_order_id'];
    }

    /**
     * Sets bill_bee_parent_order_id
     *
     * @param int|null $bill_bee_parent_order_id The Id of the parent order in the Billbee database
     *
     * @return self
     */
    public function setBillBeeParentOrderId($bill_bee_parent_order_id)
    {
        if (is_null($bill_bee_parent_order_id)) {
            throw new \InvalidArgumentException('non-nullable bill_bee_parent_order_id cannot be null');
        }
        $this->container['bill_bee_parent_order_id'] = $bill_bee_parent_order_id;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return string|null
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string|null $vat_id The customers vat id
     *
     * @return self
     */
    public function setVatId($vat_id)
    {
        if (is_null($vat_id)) {
            throw new \InvalidArgumentException('non-nullable vat_id cannot be null');
        }
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags The Tags of the order
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets ship_weight_kg
     *
     * @return float|null
     */
    public function getShipWeightKg()
    {
        return $this->container['ship_weight_kg'];
    }

    /**
     * Sets ship_weight_kg
     *
     * @param float|null $ship_weight_kg The total weight of the shipment(s)
     *
     * @return self
     */
    public function setShipWeightKg($ship_weight_kg)
    {
        if (is_null($ship_weight_kg)) {
            throw new \InvalidArgumentException('non-nullable ship_weight_kg cannot be null');
        }
        $this->container['ship_weight_kg'] = $ship_weight_kg;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string|null
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string|null $language_code The two-letter language code of the customer
     *
     * @return self
     */
    public function setLanguageCode($language_code)
    {
        if (is_null($language_code)) {
            throw new \InvalidArgumentException('non-nullable language_code cannot be null');
        }
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets paid_amount
     *
     * @return float|null
     */
    public function getPaidAmount()
    {
        return $this->container['paid_amount'];
    }

    /**
     * Sets paid_amount
     *
     * @param float|null $paid_amount paid_amount
     *
     * @return self
     */
    public function setPaidAmount($paid_amount)
    {
        if (is_null($paid_amount)) {
            throw new \InvalidArgumentException('non-nullable paid_amount cannot be null');
        }
        $this->container['paid_amount'] = $paid_amount;

        return $this;
    }

    /**
     * Gets shipping_profile_id
     *
     * @return string|null
     */
    public function getShippingProfileId()
    {
        return $this->container['shipping_profile_id'];
    }

    /**
     * Sets shipping_profile_id
     *
     * @param string|null $shipping_profile_id Internal Id for the shipping profile for that order
     *
     * @return self
     */
    public function setShippingProfileId($shipping_profile_id)
    {
        if (is_null($shipping_profile_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_profile_id cannot be null');
        }
        $this->container['shipping_profile_id'] = $shipping_profile_id;

        return $this;
    }

    /**
     * Gets shipping_provider_id
     *
     * @return int|null
     */
    public function getShippingProviderId()
    {
        return $this->container['shipping_provider_id'];
    }

    /**
     * Sets shipping_provider_id
     *
     * @param int|null $shipping_provider_id Internal Id for the used shipping provider
     *
     * @return self
     */
    public function setShippingProviderId($shipping_provider_id)
    {
        if (is_null($shipping_provider_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_provider_id cannot be null');
        }
        $this->container['shipping_provider_id'] = $shipping_provider_id;

        return $this;
    }

    /**
     * Gets shipping_provider_product_id
     *
     * @return int|null
     */
    public function getShippingProviderProductId()
    {
        return $this->container['shipping_provider_product_id'];
    }

    /**
     * Sets shipping_provider_product_id
     *
     * @param int|null $shipping_provider_product_id Internal Id for the used shipping product
     *
     * @return self
     */
    public function setShippingProviderProductId($shipping_provider_product_id)
    {
        if (is_null($shipping_provider_product_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_provider_product_id cannot be null');
        }
        $this->container['shipping_provider_product_id'] = $shipping_provider_product_id;

        return $this;
    }

    /**
     * Gets shipping_provider_name
     *
     * @return string|null
     */
    public function getShippingProviderName()
    {
        return $this->container['shipping_provider_name'];
    }

    /**
     * Sets shipping_provider_name
     *
     * @param string|null $shipping_provider_name The Name for of used shipping provider
     *
     * @return self
     */
    public function setShippingProviderName($shipping_provider_name)
    {
        if (is_null($shipping_provider_name)) {
            throw new \InvalidArgumentException('non-nullable shipping_provider_name cannot be null');
        }
        $this->container['shipping_provider_name'] = $shipping_provider_name;

        return $this;
    }

    /**
     * Gets shipping_provider_product_name
     *
     * @return string|null
     */
    public function getShippingProviderProductName()
    {
        return $this->container['shipping_provider_product_name'];
    }

    /**
     * Sets shipping_provider_product_name
     *
     * @param string|null $shipping_provider_product_name The Name of the used shipping product
     *
     * @return self
     */
    public function setShippingProviderProductName($shipping_provider_product_name)
    {
        if (is_null($shipping_provider_product_name)) {
            throw new \InvalidArgumentException('non-nullable shipping_provider_product_name cannot be null');
        }
        $this->container['shipping_provider_product_name'] = $shipping_provider_product_name;

        return $this;
    }

    /**
     * Gets shipping_profile_name
     *
     * @return string|null
     */
    public function getShippingProfileName()
    {
        return $this->container['shipping_profile_name'];
    }

    /**
     * Sets shipping_profile_name
     *
     * @param string|null $shipping_profile_name Display Name of Shipping profile, if available
     *
     * @return self
     */
    public function setShippingProfileName($shipping_profile_name)
    {
        if (is_null($shipping_profile_name)) {
            throw new \InvalidArgumentException('non-nullable shipping_profile_name cannot be null');
        }
        $this->container['shipping_profile_name'] = $shipping_profile_name;

        return $this;
    }

    /**
     * Gets payment_instruction
     *
     * @return string|null
     */
    public function getPaymentInstruction()
    {
        return $this->container['payment_instruction'];
    }

    /**
     * Sets payment_instruction
     *
     * @param string|null $payment_instruction A textfield optionaly filled with a payment instruction text for printout on the invoice (z.B. Ebay Kauf auf Rechnung)
     *
     * @return self
     */
    public function setPaymentInstruction($payment_instruction)
    {
        if (is_null($payment_instruction)) {
            throw new \InvalidArgumentException('non-nullable payment_instruction cannot be null');
        }
        $this->container['payment_instruction'] = $payment_instruction;

        return $this;
    }

    /**
     * Gets is_cancelation_for
     *
     * @return string|null
     */
    public function getIsCancelationFor()
    {
        return $this->container['is_cancelation_for'];
    }

    /**
     * Sets is_cancelation_for
     *
     * @param string|null $is_cancelation_for An optional Order Id (externalid) for an order if this is a cancel order (shopify only at the moment)
     *
     * @return self
     */
    public function setIsCancelationFor($is_cancelation_for)
    {
        if (is_null($is_cancelation_for)) {
            throw new \InvalidArgumentException('non-nullable is_cancelation_for cannot be null');
        }
        $this->container['is_cancelation_for'] = $is_cancelation_for;

        return $this;
    }

    /**
     * Gets payment_transaction_id
     *
     * @return string|null
     */
    public function getPaymentTransactionId()
    {
        return $this->container['payment_transaction_id'];
    }

    /**
     * Sets payment_transaction_id
     *
     * @param string|null $payment_transaction_id The id of the payment transaction. For example the transaction id of PayPal payment. Should not be used any more. Please use 'Payments' instead.
     *
     * @return self
     */
    public function setPaymentTransactionId($payment_transaction_id)
    {
        if (is_null($payment_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable payment_transaction_id cannot be null');
        }
        $this->container['payment_transaction_id'] = $payment_transaction_id;

        return $this;
    }

    /**
     * Gets distribution_center
     *
     * @return string|null
     */
    public function getDistributionCenter()
    {
        return $this->container['distribution_center'];
    }

    /**
     * Sets distribution_center
     *
     * @param string|null $distribution_center An optional code for the distribution center delivering this order
     *
     * @return self
     */
    public function setDistributionCenter($distribution_center)
    {
        if (is_null($distribution_center)) {
            throw new \InvalidArgumentException('non-nullable distribution_center cannot be null');
        }
        $this->container['distribution_center'] = $distribution_center;

        return $this;
    }

    /**
     * Gets delivery_source_country_code
     *
     * @return string|null
     */
    public function getDeliverySourceCountryCode()
    {
        return $this->container['delivery_source_country_code'];
    }

    /**
     * Sets delivery_source_country_code
     *
     * @param string|null $delivery_source_country_code An optional Country ISO2 Code of the country where order is shipped from (FBA)
     *
     * @return self
     */
    public function setDeliverySourceCountryCode($delivery_source_country_code)
    {
        if (is_null($delivery_source_country_code)) {
            throw new \InvalidArgumentException('non-nullable delivery_source_country_code cannot be null');
        }
        $this->container['delivery_source_country_code'] = $delivery_source_country_code;

        return $this;
    }

    /**
     * Gets custom_invoice_note
     *
     * @return string|null
     */
    public function getCustomInvoiceNote()
    {
        return $this->container['custom_invoice_note'];
    }

    /**
     * Sets custom_invoice_note
     *
     * @param string|null $custom_invoice_note An optional multiline text which is printed on the invoice
     *
     * @return self
     */
    public function setCustomInvoiceNote($custom_invoice_note)
    {
        if (is_null($custom_invoice_note)) {
            throw new \InvalidArgumentException('non-nullable custom_invoice_note cannot be null');
        }
        $this->container['custom_invoice_note'] = $custom_invoice_note;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string|null
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string|null $customer_number The customer number (not to be confused with the id of the customer)
     *
     * @return self
     */
    public function setCustomerNumber($customer_number)
    {
        if (is_null($customer_number)) {
            throw new \InvalidArgumentException('non-nullable customer_number cannot be null');
        }
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string|null
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string|null $payment_reference A payment reference
     *
     * @return self
     */
    public function setPaymentReference($payment_reference)
    {
        if (is_null($payment_reference)) {
            throw new \InvalidArgumentException('non-nullable payment_reference cannot be null');
        }
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets shipping_services
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesShippingProductService[]|null
     */
    public function getShippingServices()
    {
        return $this->container['shipping_services'];
    }

    /**
     * Sets shipping_services
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesShippingProductService[]|null $shipping_services Additional services for the shipment
     *
     * @return self
     */
    public function setShippingServices($shipping_services)
    {
        if (is_null($shipping_services)) {
            throw new \InvalidArgumentException('non-nullable shipping_services cannot be null');
        }
        $this->container['shipping_services'] = $shipping_services;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelCustomerApiModel|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelCustomerApiModel|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesOrderHistoryEntry[]|null
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesOrderHistoryEntry[]|null $history history
     *
     * @return self
     */
    public function setHistory($history)
    {
        if (is_null($history)) {
            throw new \InvalidArgumentException('non-nullable history cannot be null');
        }
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsOrderPayment[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelsOrderPayment[]|null $payments payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets last_modified_at
     *
     * @return \DateTime|null
     */
    public function getLastModifiedAt()
    {
        return $this->container['last_modified_at'];
    }

    /**
     * Sets last_modified_at
     *
     * @param \DateTime|null $last_modified_at Date of the last update, the order got
     *
     * @return self
     */
    public function setLastModifiedAt($last_modified_at)
    {
        if (is_null($last_modified_at)) {
            throw new \InvalidArgumentException('non-nullable last_modified_at cannot be null');
        }
        $this->container['last_modified_at'] = $last_modified_at;

        return $this;
    }

    /**
     * Gets archived_at
     *
     * @return \DateTime|null
     */
    public function getArchivedAt()
    {
        return $this->container['archived_at'];
    }

    /**
     * Sets archived_at
     *
     * @param \DateTime|null $archived_at If set, the order was already archived at the given date. Further modification is disabled.
     *
     * @return self
     */
    public function setArchivedAt($archived_at)
    {
        if (is_null($archived_at)) {
            throw new \InvalidArgumentException('non-nullable archived_at cannot be null');
        }
        $this->container['archived_at'] = $archived_at;

        return $this;
    }

    /**
     * Gets restored_at
     *
     * @return \DateTime|null
     */
    public function getRestoredAt()
    {
        return $this->container['restored_at'];
    }

    /**
     * Sets restored_at
     *
     * @param \DateTime|null $restored_at If set, the order was restored from the archive at the given date.
     *
     * @return self
     */
    public function setRestoredAt($restored_at)
    {
        if (is_null($restored_at)) {
            throw new \InvalidArgumentException('non-nullable restored_at cannot be null');
        }
        $this->container['restored_at'] = $restored_at;

        return $this;
    }

    /**
     * Gets api_account_id
     *
     * @return int|null
     */
    public function getApiAccountId()
    {
        return $this->container['api_account_id'];
    }

    /**
     * Sets api_account_id
     *
     * @param int|null $api_account_id Id of the account, this order belongs to
     *
     * @return self
     */
    public function setApiAccountId($api_account_id)
    {
        if (is_null($api_account_id)) {
            throw new \InvalidArgumentException('non-nullable api_account_id cannot be null');
        }
        $this->container['api_account_id'] = $api_account_id;

        return $this;
    }

    /**
     * Gets api_account_name
     *
     * @return string|null
     */
    public function getApiAccountName()
    {
        return $this->container['api_account_name'];
    }

    /**
     * Sets api_account_name
     *
     * @param string|null $api_account_name The name of the account, this order belongs to. Will be ignored on order creation.
     *
     * @return self
     */
    public function setApiAccountName($api_account_name)
    {
        if (is_null($api_account_name)) {
            throw new \InvalidArgumentException('non-nullable api_account_name cannot be null');
        }
        $this->container['api_account_name'] = $api_account_name;

        return $this;
    }

    /**
     * Gets merchant_vat_id
     *
     * @return string|null
     */
    public function getMerchantVatId()
    {
        return $this->container['merchant_vat_id'];
    }

    /**
     * Sets merchant_vat_id
     *
     * @param string|null $merchant_vat_id The vat-id, that should be displayed on the invoice and other order documents
     *
     * @return self
     */
    public function setMerchantVatId($merchant_vat_id)
    {
        if (is_null($merchant_vat_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_vat_id cannot be null');
        }
        $this->container['merchant_vat_id'] = $merchant_vat_id;

        return $this;
    }

    /**
     * Gets customer_vat_id
     *
     * @return string|null
     */
    public function getCustomerVatId()
    {
        return $this->container['customer_vat_id'];
    }

    /**
     * Sets customer_vat_id
     *
     * @param string|null $customer_vat_id The vat-id, that was given by the customer to fulfill this order
     *
     * @return self
     */
    public function setCustomerVatId($customer_vat_id)
    {
        if (is_null($customer_vat_id)) {
            throw new \InvalidArgumentException('non-nullable customer_vat_id cannot be null');
        }
        $this->container['customer_vat_id'] = $customer_vat_id;

        return $this;
    }

    /**
     * Gets is_from_billbee_api
     *
     * @return bool|null
     */
    public function getIsFromBillbeeApi()
    {
        return $this->container['is_from_billbee_api'];
    }

    /**
     * Sets is_from_billbee_api
     *
     * @param bool|null $is_from_billbee_api Indicates whether the order was created through the Billbee-Api or not.
     *
     * @return self
     */
    public function setIsFromBillbeeApi($is_from_billbee_api)
    {
        if (is_null($is_from_billbee_api)) {
            throw new \InvalidArgumentException('non-nullable is_from_billbee_api cannot be null');
        }
        $this->container['is_from_billbee_api'] = $is_from_billbee_api;

        return $this;
    }

    /**
     * Gets web_url
     *
     * @return string|null
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     *
     * @param string|null $web_url Returns the url to open the order in Billbee.
     *
     * @return self
     */
    public function setWebUrl($web_url)
    {
        if (is_null($web_url)) {
            throw new \InvalidArgumentException('non-nullable web_url cannot be null');
        }
        $this->container['web_url'] = $web_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


