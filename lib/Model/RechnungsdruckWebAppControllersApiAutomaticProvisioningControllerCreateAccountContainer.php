<?php
/**
 * RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer Class Doc Comment
 *
 * @category Class
 * @description Data used to create a new Billbee user account
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Rechnungsdruck.WebApp.Controllers.Api.AutomaticProvisioningController.CreateAccountContainer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'e_mail' => 'string',
        'password' => 'string',
        'accept_terms' => 'bool',
        'address' => '\kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainerUserAddress',
        'affiliate_coupon_code' => 'string',
        'vat1_rate' => 'float',
        'vat2_rate' => 'float',
        'default_vat_mode' => 'int',
        'default_currency' => 'string',
        'default_vat_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'e_mail' => null,
        'password' => null,
        'accept_terms' => null,
        'address' => null,
        'affiliate_coupon_code' => null,
        'vat1_rate' => 'double',
        'vat2_rate' => 'double',
        'default_vat_mode' => 'int32',
        'default_currency' => null,
        'default_vat_index' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'e_mail' => false,
        'password' => false,
        'accept_terms' => false,
        'address' => false,
        'affiliate_coupon_code' => false,
        'vat1_rate' => false,
        'vat2_rate' => false,
        'default_vat_mode' => false,
        'default_currency' => false,
        'default_vat_index' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'e_mail' => 'EMail',
        'password' => 'Password',
        'accept_terms' => 'AcceptTerms',
        'address' => 'Address',
        'affiliate_coupon_code' => 'AffiliateCouponCode',
        'vat1_rate' => 'Vat1Rate',
        'vat2_rate' => 'Vat2Rate',
        'default_vat_mode' => 'DefaultVatMode',
        'default_currency' => 'DefaultCurrency',
        'default_vat_index' => 'DefaultVatIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'e_mail' => 'setEMail',
        'password' => 'setPassword',
        'accept_terms' => 'setAcceptTerms',
        'address' => 'setAddress',
        'affiliate_coupon_code' => 'setAffiliateCouponCode',
        'vat1_rate' => 'setVat1Rate',
        'vat2_rate' => 'setVat2Rate',
        'default_vat_mode' => 'setDefaultVatMode',
        'default_currency' => 'setDefaultCurrency',
        'default_vat_index' => 'setDefaultVatIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'e_mail' => 'getEMail',
        'password' => 'getPassword',
        'accept_terms' => 'getAcceptTerms',
        'address' => 'getAddress',
        'affiliate_coupon_code' => 'getAffiliateCouponCode',
        'vat1_rate' => 'getVat1Rate',
        'vat2_rate' => 'getVat2Rate',
        'default_vat_mode' => 'getDefaultVatMode',
        'default_currency' => 'getDefaultCurrency',
        'default_vat_index' => 'getDefaultVatIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEFAULT_VAT_MODE_NUMBER_0 = 0;
    public const DEFAULT_VAT_MODE_NUMBER_1 = 1;
    public const DEFAULT_VAT_MODE_NUMBER_2 = 2;
    public const DEFAULT_VAT_MODE_NUMBER_3 = 3;
    public const DEFAULT_VAT_MODE_NUMBER_4 = 4;
    public const DEFAULT_VAT_MODE_NUMBER_5 = 5;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultVatModeAllowableValues()
    {
        return [
            self::DEFAULT_VAT_MODE_NUMBER_0,
            self::DEFAULT_VAT_MODE_NUMBER_1,
            self::DEFAULT_VAT_MODE_NUMBER_2,
            self::DEFAULT_VAT_MODE_NUMBER_3,
            self::DEFAULT_VAT_MODE_NUMBER_4,
            self::DEFAULT_VAT_MODE_NUMBER_5,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('e_mail', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('accept_terms', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('affiliate_coupon_code', $data ?? [], null);
        $this->setIfExists('vat1_rate', $data ?? [], null);
        $this->setIfExists('vat2_rate', $data ?? [], null);
        $this->setIfExists('default_vat_mode', $data ?? [], null);
        $this->setIfExists('default_currency', $data ?? [], null);
        $this->setIfExists('default_vat_index', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['e_mail'] === null) {
            $invalidProperties[] = "'e_mail' can't be null";
        }
        $allowedValues = $this->getDefaultVatModeAllowableValues();
        if (!is_null($this->container['default_vat_mode']) && !in_array($this->container['default_vat_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_vat_mode', must be one of '%s'",
                $this->container['default_vat_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets e_mail
     *
     * @return string
     */
    public function getEMail()
    {
        return $this->container['e_mail'];
    }

    /**
     * Sets e_mail
     *
     * @param string $e_mail The Email address of the user to create
     *
     * @return self
     */
    public function setEMail($e_mail)
    {
        if (is_null($e_mail)) {
            throw new \InvalidArgumentException('non-nullable e_mail cannot be null');
        }
        $this->container['e_mail'] = $e_mail;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets accept_terms
     *
     * @return bool|null
     */
    public function getAcceptTerms()
    {
        return $this->container['accept_terms'];
    }

    /**
     * Sets accept_terms
     *
     * @param bool|null $accept_terms Set to true, if the user has accepted the Billbee terms &amp; conditions
     *
     * @return self
     */
    public function setAcceptTerms($accept_terms)
    {
        if (is_null($accept_terms)) {
            throw new \InvalidArgumentException('non-nullable accept_terms cannot be null');
        }
        $this->container['accept_terms'] = $accept_terms;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainerUserAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \kruegge82\billbee\Model\RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainerUserAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets affiliate_coupon_code
     *
     * @return string|null
     */
    public function getAffiliateCouponCode()
    {
        return $this->container['affiliate_coupon_code'];
    }

    /**
     * Sets affiliate_coupon_code
     *
     * @param string|null $affiliate_coupon_code Specifies an billbee affiliate code to attach to the user
     *
     * @return self
     */
    public function setAffiliateCouponCode($affiliate_coupon_code)
    {
        if (is_null($affiliate_coupon_code)) {
            throw new \InvalidArgumentException('non-nullable affiliate_coupon_code cannot be null');
        }
        $this->container['affiliate_coupon_code'] = $affiliate_coupon_code;

        return $this;
    }

    /**
     * Gets vat1_rate
     *
     * @return float|null
     */
    public function getVat1Rate()
    {
        return $this->container['vat1_rate'];
    }

    /**
     * Sets vat1_rate
     *
     * @param float|null $vat1_rate Optionally specify the vat1 (normal) rate of the user
     *
     * @return self
     */
    public function setVat1Rate($vat1_rate)
    {
        if (is_null($vat1_rate)) {
            throw new \InvalidArgumentException('non-nullable vat1_rate cannot be null');
        }
        $this->container['vat1_rate'] = $vat1_rate;

        return $this;
    }

    /**
     * Gets vat2_rate
     *
     * @return float|null
     */
    public function getVat2Rate()
    {
        return $this->container['vat2_rate'];
    }

    /**
     * Sets vat2_rate
     *
     * @param float|null $vat2_rate Optionally specify the vat2 (reduced) rate of the user
     *
     * @return self
     */
    public function setVat2Rate($vat2_rate)
    {
        if (is_null($vat2_rate)) {
            throw new \InvalidArgumentException('non-nullable vat2_rate cannot be null');
        }
        $this->container['vat2_rate'] = $vat2_rate;

        return $this;
    }

    /**
     * Gets default_vat_mode
     *
     * @return int|null
     */
    public function getDefaultVatMode()
    {
        return $this->container['default_vat_mode'];
    }

    /**
     * Sets default_vat_mode
     *
     * @param int|null $default_vat_mode Optionally specify the default vat mode of the user
     *
     * @return self
     */
    public function setDefaultVatMode($default_vat_mode)
    {
        if (is_null($default_vat_mode)) {
            throw new \InvalidArgumentException('non-nullable default_vat_mode cannot be null');
        }
        $allowedValues = $this->getDefaultVatModeAllowableValues();
        if (!in_array($default_vat_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_vat_mode', must be one of '%s'",
                    $default_vat_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_vat_mode'] = $default_vat_mode;

        return $this;
    }

    /**
     * Gets default_currency
     *
     * @return string|null
     */
    public function getDefaultCurrency()
    {
        return $this->container['default_currency'];
    }

    /**
     * Sets default_currency
     *
     * @param string|null $default_currency Optionally specify the default currency of the user
     *
     * @return self
     */
    public function setDefaultCurrency($default_currency)
    {
        if (is_null($default_currency)) {
            throw new \InvalidArgumentException('non-nullable default_currency cannot be null');
        }
        $this->container['default_currency'] = $default_currency;

        return $this;
    }

    /**
     * Gets default_vat_index
     *
     * @return int|null
     */
    public function getDefaultVatIndex()
    {
        return $this->container['default_vat_index'];
    }

    /**
     * Sets default_vat_index
     *
     * @param int|null $default_vat_index Optionally specify the default vat index of the user
     *
     * @return self
     */
    public function setDefaultVatIndex($default_vat_index)
    {
        if (is_null($default_vat_index)) {
            throw new \InvalidArgumentException('non-nullable default_vat_index cannot be null');
        }
        $this->container['default_vat_index'] = $default_vat_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


