<?php
/**
 * BillbeeInterfacesBillbeeAPIModelArticleApiModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesBillbeeAPIModelArticleApiModel Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesBillbeeAPIModelArticleApiModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.BillbeeAPI.Model.ArticleApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoice_text' => '\kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]',
        'manufacturer' => 'string',
        'id' => 'int',
        'title' => '\kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]',
        'description' => '\kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]',
        'short_description' => '\kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]',
        'basic_attributes' => '\kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]',
        'images' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel[]',
        'vat_index' => 'int',
        'price' => 'float',
        'cost_price' => 'float',
        'vat1_rate' => 'float',
        'vat2_rate' => 'float',
        'stock_desired' => 'float',
        'stock_current' => 'float',
        'stock_warning' => 'float',
        'sku' => 'string',
        'ean' => 'string',
        'materials' => '\kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]',
        'tags' => '\kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]',
        'sources' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleSourceApiModel[]',
        'weight' => 'int',
        'weight_net' => 'int',
        'low_stock' => 'bool',
        'stock_code' => 'string',
        'stock_reduce_items_per_sale' => 'float',
        'stocks' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelStockArticleApiModel[]',
        'category1' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel',
        'category2' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel',
        'category3' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel',
        'type' => 'int',
        'unit' => 'int',
        'units_per_item' => 'float',
        'sold_amount' => 'float',
        'sold_sum_gross' => 'float',
        'sold_sum_net' => 'float',
        'sold_sum_net_last30_days' => 'float',
        'sold_sum_gross_last30_days' => 'float',
        'sold_amount_last30_days' => 'float',
        'shipping_product_id' => 'int',
        'is_digital' => 'bool',
        'is_customizable' => 'bool',
        'delivery_time' => 'int',
        'recipient' => 'int',
        'occasion' => 'int',
        'country_of_origin' => 'string',
        'export_description' => 'string',
        'export_description_multi_language' => '\kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]',
        'taric_number' => 'string',
        'condition' => 'int',
        'width_cm' => 'float',
        'length_cm' => 'float',
        'height_cm' => 'float',
        'bill_of_material' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelBomSubArticleApiModel[]',
        'custom_fields' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldValueModel[]',
        'is_deactivated' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoice_text' => null,
        'manufacturer' => null,
        'id' => 'int64',
        'title' => null,
        'description' => null,
        'short_description' => null,
        'basic_attributes' => null,
        'images' => null,
        'vat_index' => 'int32',
        'price' => 'double',
        'cost_price' => 'double',
        'vat1_rate' => 'double',
        'vat2_rate' => 'double',
        'stock_desired' => 'double',
        'stock_current' => 'double',
        'stock_warning' => 'double',
        'sku' => null,
        'ean' => null,
        'materials' => null,
        'tags' => null,
        'sources' => null,
        'weight' => 'int32',
        'weight_net' => 'int32',
        'low_stock' => null,
        'stock_code' => null,
        'stock_reduce_items_per_sale' => 'double',
        'stocks' => null,
        'category1' => null,
        'category2' => null,
        'category3' => null,
        'type' => 'int32',
        'unit' => 'int32',
        'units_per_item' => 'double',
        'sold_amount' => 'double',
        'sold_sum_gross' => 'double',
        'sold_sum_net' => 'double',
        'sold_sum_net_last30_days' => 'double',
        'sold_sum_gross_last30_days' => 'double',
        'sold_amount_last30_days' => 'double',
        'shipping_product_id' => 'int64',
        'is_digital' => null,
        'is_customizable' => null,
        'delivery_time' => 'int32',
        'recipient' => 'int32',
        'occasion' => 'int32',
        'country_of_origin' => null,
        'export_description' => null,
        'export_description_multi_language' => null,
        'taric_number' => null,
        'condition' => 'int32',
        'width_cm' => 'double',
        'length_cm' => 'double',
        'height_cm' => 'double',
        'bill_of_material' => null,
        'custom_fields' => null,
        'is_deactivated' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoice_text' => false,
        'manufacturer' => false,
        'id' => false,
        'title' => false,
        'description' => false,
        'short_description' => false,
        'basic_attributes' => false,
        'images' => false,
        'vat_index' => false,
        'price' => false,
        'cost_price' => false,
        'vat1_rate' => false,
        'vat2_rate' => false,
        'stock_desired' => false,
        'stock_current' => false,
        'stock_warning' => false,
        'sku' => false,
        'ean' => false,
        'materials' => false,
        'tags' => false,
        'sources' => false,
        'weight' => false,
        'weight_net' => false,
        'low_stock' => false,
        'stock_code' => false,
        'stock_reduce_items_per_sale' => false,
        'stocks' => false,
        'category1' => false,
        'category2' => false,
        'category3' => false,
        'type' => false,
        'unit' => false,
        'units_per_item' => false,
        'sold_amount' => false,
        'sold_sum_gross' => false,
        'sold_sum_net' => false,
        'sold_sum_net_last30_days' => false,
        'sold_sum_gross_last30_days' => false,
        'sold_amount_last30_days' => false,
        'shipping_product_id' => false,
        'is_digital' => false,
        'is_customizable' => false,
        'delivery_time' => false,
        'recipient' => false,
        'occasion' => false,
        'country_of_origin' => false,
        'export_description' => false,
        'export_description_multi_language' => false,
        'taric_number' => false,
        'condition' => false,
        'width_cm' => false,
        'length_cm' => false,
        'height_cm' => false,
        'bill_of_material' => false,
        'custom_fields' => false,
        'is_deactivated' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_text' => 'InvoiceText',
        'manufacturer' => 'Manufacturer',
        'id' => 'Id',
        'title' => 'Title',
        'description' => 'Description',
        'short_description' => 'ShortDescription',
        'basic_attributes' => 'BasicAttributes',
        'images' => 'Images',
        'vat_index' => 'VatIndex',
        'price' => 'Price',
        'cost_price' => 'CostPrice',
        'vat1_rate' => 'Vat1Rate',
        'vat2_rate' => 'Vat2Rate',
        'stock_desired' => 'StockDesired',
        'stock_current' => 'StockCurrent',
        'stock_warning' => 'StockWarning',
        'sku' => 'SKU',
        'ean' => 'EAN',
        'materials' => 'Materials',
        'tags' => 'Tags',
        'sources' => 'Sources',
        'weight' => 'Weight',
        'weight_net' => 'WeightNet',
        'low_stock' => 'LowStock',
        'stock_code' => 'StockCode',
        'stock_reduce_items_per_sale' => 'StockReduceItemsPerSale',
        'stocks' => 'Stocks',
        'category1' => 'Category1',
        'category2' => 'Category2',
        'category3' => 'Category3',
        'type' => 'Type',
        'unit' => 'Unit',
        'units_per_item' => 'UnitsPerItem',
        'sold_amount' => 'SoldAmount',
        'sold_sum_gross' => 'SoldSumGross',
        'sold_sum_net' => 'SoldSumNet',
        'sold_sum_net_last30_days' => 'SoldSumNetLast30Days',
        'sold_sum_gross_last30_days' => 'SoldSumGrossLast30Days',
        'sold_amount_last30_days' => 'SoldAmountLast30Days',
        'shipping_product_id' => 'ShippingProductId',
        'is_digital' => 'IsDigital',
        'is_customizable' => 'IsCustomizable',
        'delivery_time' => 'DeliveryTime',
        'recipient' => 'Recipient',
        'occasion' => 'Occasion',
        'country_of_origin' => 'CountryOfOrigin',
        'export_description' => 'ExportDescription',
        'export_description_multi_language' => 'ExportDescriptionMultiLanguage',
        'taric_number' => 'TaricNumber',
        'condition' => 'Condition',
        'width_cm' => 'WidthCm',
        'length_cm' => 'LengthCm',
        'height_cm' => 'HeightCm',
        'bill_of_material' => 'BillOfMaterial',
        'custom_fields' => 'CustomFields',
        'is_deactivated' => 'IsDeactivated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_text' => 'setInvoiceText',
        'manufacturer' => 'setManufacturer',
        'id' => 'setId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'short_description' => 'setShortDescription',
        'basic_attributes' => 'setBasicAttributes',
        'images' => 'setImages',
        'vat_index' => 'setVatIndex',
        'price' => 'setPrice',
        'cost_price' => 'setCostPrice',
        'vat1_rate' => 'setVat1Rate',
        'vat2_rate' => 'setVat2Rate',
        'stock_desired' => 'setStockDesired',
        'stock_current' => 'setStockCurrent',
        'stock_warning' => 'setStockWarning',
        'sku' => 'setSku',
        'ean' => 'setEan',
        'materials' => 'setMaterials',
        'tags' => 'setTags',
        'sources' => 'setSources',
        'weight' => 'setWeight',
        'weight_net' => 'setWeightNet',
        'low_stock' => 'setLowStock',
        'stock_code' => 'setStockCode',
        'stock_reduce_items_per_sale' => 'setStockReduceItemsPerSale',
        'stocks' => 'setStocks',
        'category1' => 'setCategory1',
        'category2' => 'setCategory2',
        'category3' => 'setCategory3',
        'type' => 'setType',
        'unit' => 'setUnit',
        'units_per_item' => 'setUnitsPerItem',
        'sold_amount' => 'setSoldAmount',
        'sold_sum_gross' => 'setSoldSumGross',
        'sold_sum_net' => 'setSoldSumNet',
        'sold_sum_net_last30_days' => 'setSoldSumNetLast30Days',
        'sold_sum_gross_last30_days' => 'setSoldSumGrossLast30Days',
        'sold_amount_last30_days' => 'setSoldAmountLast30Days',
        'shipping_product_id' => 'setShippingProductId',
        'is_digital' => 'setIsDigital',
        'is_customizable' => 'setIsCustomizable',
        'delivery_time' => 'setDeliveryTime',
        'recipient' => 'setRecipient',
        'occasion' => 'setOccasion',
        'country_of_origin' => 'setCountryOfOrigin',
        'export_description' => 'setExportDescription',
        'export_description_multi_language' => 'setExportDescriptionMultiLanguage',
        'taric_number' => 'setTaricNumber',
        'condition' => 'setCondition',
        'width_cm' => 'setWidthCm',
        'length_cm' => 'setLengthCm',
        'height_cm' => 'setHeightCm',
        'bill_of_material' => 'setBillOfMaterial',
        'custom_fields' => 'setCustomFields',
        'is_deactivated' => 'setIsDeactivated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_text' => 'getInvoiceText',
        'manufacturer' => 'getManufacturer',
        'id' => 'getId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'short_description' => 'getShortDescription',
        'basic_attributes' => 'getBasicAttributes',
        'images' => 'getImages',
        'vat_index' => 'getVatIndex',
        'price' => 'getPrice',
        'cost_price' => 'getCostPrice',
        'vat1_rate' => 'getVat1Rate',
        'vat2_rate' => 'getVat2Rate',
        'stock_desired' => 'getStockDesired',
        'stock_current' => 'getStockCurrent',
        'stock_warning' => 'getStockWarning',
        'sku' => 'getSku',
        'ean' => 'getEan',
        'materials' => 'getMaterials',
        'tags' => 'getTags',
        'sources' => 'getSources',
        'weight' => 'getWeight',
        'weight_net' => 'getWeightNet',
        'low_stock' => 'getLowStock',
        'stock_code' => 'getStockCode',
        'stock_reduce_items_per_sale' => 'getStockReduceItemsPerSale',
        'stocks' => 'getStocks',
        'category1' => 'getCategory1',
        'category2' => 'getCategory2',
        'category3' => 'getCategory3',
        'type' => 'getType',
        'unit' => 'getUnit',
        'units_per_item' => 'getUnitsPerItem',
        'sold_amount' => 'getSoldAmount',
        'sold_sum_gross' => 'getSoldSumGross',
        'sold_sum_net' => 'getSoldSumNet',
        'sold_sum_net_last30_days' => 'getSoldSumNetLast30Days',
        'sold_sum_gross_last30_days' => 'getSoldSumGrossLast30Days',
        'sold_amount_last30_days' => 'getSoldAmountLast30Days',
        'shipping_product_id' => 'getShippingProductId',
        'is_digital' => 'getIsDigital',
        'is_customizable' => 'getIsCustomizable',
        'delivery_time' => 'getDeliveryTime',
        'recipient' => 'getRecipient',
        'occasion' => 'getOccasion',
        'country_of_origin' => 'getCountryOfOrigin',
        'export_description' => 'getExportDescription',
        'export_description_multi_language' => 'getExportDescriptionMultiLanguage',
        'taric_number' => 'getTaricNumber',
        'condition' => 'getCondition',
        'width_cm' => 'getWidthCm',
        'length_cm' => 'getLengthCm',
        'height_cm' => 'getHeightCm',
        'bill_of_material' => 'getBillOfMaterial',
        'custom_fields' => 'getCustomFields',
        'is_deactivated' => 'getIsDeactivated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('invoice_text', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('basic_attributes', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('vat_index', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('cost_price', $data ?? [], null);
        $this->setIfExists('vat1_rate', $data ?? [], null);
        $this->setIfExists('vat2_rate', $data ?? [], null);
        $this->setIfExists('stock_desired', $data ?? [], null);
        $this->setIfExists('stock_current', $data ?? [], null);
        $this->setIfExists('stock_warning', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('materials', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('sources', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weight_net', $data ?? [], null);
        $this->setIfExists('low_stock', $data ?? [], null);
        $this->setIfExists('stock_code', $data ?? [], null);
        $this->setIfExists('stock_reduce_items_per_sale', $data ?? [], null);
        $this->setIfExists('stocks', $data ?? [], null);
        $this->setIfExists('category1', $data ?? [], null);
        $this->setIfExists('category2', $data ?? [], null);
        $this->setIfExists('category3', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('units_per_item', $data ?? [], null);
        $this->setIfExists('sold_amount', $data ?? [], null);
        $this->setIfExists('sold_sum_gross', $data ?? [], null);
        $this->setIfExists('sold_sum_net', $data ?? [], null);
        $this->setIfExists('sold_sum_net_last30_days', $data ?? [], null);
        $this->setIfExists('sold_sum_gross_last30_days', $data ?? [], null);
        $this->setIfExists('sold_amount_last30_days', $data ?? [], null);
        $this->setIfExists('shipping_product_id', $data ?? [], null);
        $this->setIfExists('is_digital', $data ?? [], null);
        $this->setIfExists('is_customizable', $data ?? [], null);
        $this->setIfExists('delivery_time', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('occasion', $data ?? [], null);
        $this->setIfExists('country_of_origin', $data ?? [], null);
        $this->setIfExists('export_description', $data ?? [], null);
        $this->setIfExists('export_description_multi_language', $data ?? [], null);
        $this->setIfExists('taric_number', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('width_cm', $data ?? [], null);
        $this->setIfExists('length_cm', $data ?? [], null);
        $this->setIfExists('height_cm', $data ?? [], null);
        $this->setIfExists('bill_of_material', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('is_deactivated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vat_index'] === null) {
            $invalidProperties[] = "'vat_index' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['vat1_rate'] === null) {
            $invalidProperties[] = "'vat1_rate' can't be null";
        }
        if ($this->container['vat2_rate'] === null) {
            $invalidProperties[] = "'vat2_rate' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['is_digital'] === null) {
            $invalidProperties[] = "'is_digital' can't be null";
        }
        if ($this->container['is_customizable'] === null) {
            $invalidProperties[] = "'is_customizable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_text
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null
     */
    public function getInvoiceText()
    {
        return $this->container['invoice_text'];
    }

    /**
     * Sets invoice_text
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null $invoice_text invoice_text
     *
     * @return self
     */
    public function setInvoiceText($invoice_text)
    {
        if (is_null($invoice_text)) {
            throw new \InvalidArgumentException('non-nullable invoice_text cannot be null');
        }
        $this->container['invoice_text'] = $invoice_text;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer manufacturer
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        if (is_null($manufacturer)) {
            throw new \InvalidArgumentException('non-nullable manufacturer cannot be null');
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null $short_description short_description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            throw new \InvalidArgumentException('non-nullable short_description cannot be null');
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets basic_attributes
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null
     */
    public function getBasicAttributes()
    {
        return $this->container['basic_attributes'];
    }

    /**
     * Sets basic_attributes
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null $basic_attributes basic_attributes
     *
     * @return self
     */
    public function setBasicAttributes($basic_attributes)
    {
        if (is_null($basic_attributes)) {
            throw new \InvalidArgumentException('non-nullable basic_attributes cannot be null');
        }
        $this->container['basic_attributes'] = $basic_attributes;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets vat_index
     *
     * @return int
     */
    public function getVatIndex()
    {
        return $this->container['vat_index'];
    }

    /**
     * Sets vat_index
     *
     * @param int $vat_index vat_index
     *
     * @return self
     */
    public function setVatIndex($vat_index)
    {
        if (is_null($vat_index)) {
            throw new \InvalidArgumentException('non-nullable vat_index cannot be null');
        }
        $this->container['vat_index'] = $vat_index;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return float|null
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param float|null $cost_price cost_price
     *
     * @return self
     */
    public function setCostPrice($cost_price)
    {
        if (is_null($cost_price)) {
            throw new \InvalidArgumentException('non-nullable cost_price cannot be null');
        }
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets vat1_rate
     *
     * @return float
     */
    public function getVat1Rate()
    {
        return $this->container['vat1_rate'];
    }

    /**
     * Sets vat1_rate
     *
     * @param float $vat1_rate vat1_rate
     *
     * @return self
     */
    public function setVat1Rate($vat1_rate)
    {
        if (is_null($vat1_rate)) {
            throw new \InvalidArgumentException('non-nullable vat1_rate cannot be null');
        }
        $this->container['vat1_rate'] = $vat1_rate;

        return $this;
    }

    /**
     * Gets vat2_rate
     *
     * @return float
     */
    public function getVat2Rate()
    {
        return $this->container['vat2_rate'];
    }

    /**
     * Sets vat2_rate
     *
     * @param float $vat2_rate vat2_rate
     *
     * @return self
     */
    public function setVat2Rate($vat2_rate)
    {
        if (is_null($vat2_rate)) {
            throw new \InvalidArgumentException('non-nullable vat2_rate cannot be null');
        }
        $this->container['vat2_rate'] = $vat2_rate;

        return $this;
    }

    /**
     * Gets stock_desired
     *
     * @return float|null
     */
    public function getStockDesired()
    {
        return $this->container['stock_desired'];
    }

    /**
     * Sets stock_desired
     *
     * @param float|null $stock_desired stock_desired
     *
     * @return self
     */
    public function setStockDesired($stock_desired)
    {
        if (is_null($stock_desired)) {
            throw new \InvalidArgumentException('non-nullable stock_desired cannot be null');
        }
        $this->container['stock_desired'] = $stock_desired;

        return $this;
    }

    /**
     * Gets stock_current
     *
     * @return float|null
     */
    public function getStockCurrent()
    {
        return $this->container['stock_current'];
    }

    /**
     * Sets stock_current
     *
     * @param float|null $stock_current stock_current
     *
     * @return self
     */
    public function setStockCurrent($stock_current)
    {
        if (is_null($stock_current)) {
            throw new \InvalidArgumentException('non-nullable stock_current cannot be null');
        }
        $this->container['stock_current'] = $stock_current;

        return $this;
    }

    /**
     * Gets stock_warning
     *
     * @return float|null
     */
    public function getStockWarning()
    {
        return $this->container['stock_warning'];
    }

    /**
     * Sets stock_warning
     *
     * @param float|null $stock_warning stock_warning
     *
     * @return self
     */
    public function setStockWarning($stock_warning)
    {
        if (is_null($stock_warning)) {
            throw new \InvalidArgumentException('non-nullable stock_warning cannot be null');
        }
        $this->container['stock_warning'] = $stock_warning;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku sku
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets materials
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null
     */
    public function getMaterials()
    {
        return $this->container['materials'];
    }

    /**
     * Sets materials
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null $materials materials
     *
     * @return self
     */
    public function setMaterials($materials)
    {
        if (is_null($materials)) {
            throw new \InvalidArgumentException('non-nullable materials cannot be null');
        }
        $this->container['materials'] = $materials;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets sources
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleSourceApiModel[]|null
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleSourceApiModel[]|null $sources sources
     *
     * @return self
     */
    public function setSources($sources)
    {
        if (is_null($sources)) {
            throw new \InvalidArgumentException('non-nullable sources cannot be null');
        }
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_net
     *
     * @return int|null
     */
    public function getWeightNet()
    {
        return $this->container['weight_net'];
    }

    /**
     * Sets weight_net
     *
     * @param int|null $weight_net weight_net
     *
     * @return self
     */
    public function setWeightNet($weight_net)
    {
        if (is_null($weight_net)) {
            throw new \InvalidArgumentException('non-nullable weight_net cannot be null');
        }
        $this->container['weight_net'] = $weight_net;

        return $this;
    }

    /**
     * Gets low_stock
     *
     * @return bool|null
     */
    public function getLowStock()
    {
        return $this->container['low_stock'];
    }

    /**
     * Sets low_stock
     *
     * @param bool|null $low_stock low_stock
     *
     * @return self
     */
    public function setLowStock($low_stock)
    {
        if (is_null($low_stock)) {
            throw new \InvalidArgumentException('non-nullable low_stock cannot be null');
        }
        $this->container['low_stock'] = $low_stock;

        return $this;
    }

    /**
     * Gets stock_code
     *
     * @return string|null
     */
    public function getStockCode()
    {
        return $this->container['stock_code'];
    }

    /**
     * Sets stock_code
     *
     * @param string|null $stock_code stock_code
     *
     * @return self
     */
    public function setStockCode($stock_code)
    {
        if (is_null($stock_code)) {
            throw new \InvalidArgumentException('non-nullable stock_code cannot be null');
        }
        $this->container['stock_code'] = $stock_code;

        return $this;
    }

    /**
     * Gets stock_reduce_items_per_sale
     *
     * @return float|null
     */
    public function getStockReduceItemsPerSale()
    {
        return $this->container['stock_reduce_items_per_sale'];
    }

    /**
     * Sets stock_reduce_items_per_sale
     *
     * @param float|null $stock_reduce_items_per_sale stock_reduce_items_per_sale
     *
     * @return self
     */
    public function setStockReduceItemsPerSale($stock_reduce_items_per_sale)
    {
        if (is_null($stock_reduce_items_per_sale)) {
            throw new \InvalidArgumentException('non-nullable stock_reduce_items_per_sale cannot be null');
        }
        $this->container['stock_reduce_items_per_sale'] = $stock_reduce_items_per_sale;

        return $this;
    }

    /**
     * Gets stocks
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelStockArticleApiModel[]|null
     */
    public function getStocks()
    {
        return $this->container['stocks'];
    }

    /**
     * Sets stocks
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelStockArticleApiModel[]|null $stocks stocks
     *
     * @return self
     */
    public function setStocks($stocks)
    {
        if (is_null($stocks)) {
            throw new \InvalidArgumentException('non-nullable stocks cannot be null');
        }
        $this->container['stocks'] = $stocks;

        return $this;
    }

    /**
     * Gets category1
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel|null
     */
    public function getCategory1()
    {
        return $this->container['category1'];
    }

    /**
     * Sets category1
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel|null $category1 category1
     *
     * @return self
     */
    public function setCategory1($category1)
    {
        if (is_null($category1)) {
            throw new \InvalidArgumentException('non-nullable category1 cannot be null');
        }
        $this->container['category1'] = $category1;

        return $this;
    }

    /**
     * Gets category2
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel|null
     */
    public function getCategory2()
    {
        return $this->container['category2'];
    }

    /**
     * Sets category2
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel|null $category2 category2
     *
     * @return self
     */
    public function setCategory2($category2)
    {
        if (is_null($category2)) {
            throw new \InvalidArgumentException('non-nullable category2 cannot be null');
        }
        $this->container['category2'] = $category2;

        return $this;
    }

    /**
     * Gets category3
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel|null
     */
    public function getCategory3()
    {
        return $this->container['category3'];
    }

    /**
     * Sets category3
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleCategoryApiModel|null $category3 category3
     *
     * @return self
     */
    public function setCategory3($category3)
    {
        if (is_null($category3)) {
            throw new \InvalidArgumentException('non-nullable category3 cannot be null');
        }
        $this->container['category3'] = $category3;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return int|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param int|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets units_per_item
     *
     * @return float|null
     */
    public function getUnitsPerItem()
    {
        return $this->container['units_per_item'];
    }

    /**
     * Sets units_per_item
     *
     * @param float|null $units_per_item units_per_item
     *
     * @return self
     */
    public function setUnitsPerItem($units_per_item)
    {
        if (is_null($units_per_item)) {
            throw new \InvalidArgumentException('non-nullable units_per_item cannot be null');
        }
        $this->container['units_per_item'] = $units_per_item;

        return $this;
    }

    /**
     * Gets sold_amount
     *
     * @return float|null
     */
    public function getSoldAmount()
    {
        return $this->container['sold_amount'];
    }

    /**
     * Sets sold_amount
     *
     * @param float|null $sold_amount sold_amount
     *
     * @return self
     */
    public function setSoldAmount($sold_amount)
    {
        if (is_null($sold_amount)) {
            throw new \InvalidArgumentException('non-nullable sold_amount cannot be null');
        }
        $this->container['sold_amount'] = $sold_amount;

        return $this;
    }

    /**
     * Gets sold_sum_gross
     *
     * @return float|null
     */
    public function getSoldSumGross()
    {
        return $this->container['sold_sum_gross'];
    }

    /**
     * Sets sold_sum_gross
     *
     * @param float|null $sold_sum_gross sold_sum_gross
     *
     * @return self
     */
    public function setSoldSumGross($sold_sum_gross)
    {
        if (is_null($sold_sum_gross)) {
            throw new \InvalidArgumentException('non-nullable sold_sum_gross cannot be null');
        }
        $this->container['sold_sum_gross'] = $sold_sum_gross;

        return $this;
    }

    /**
     * Gets sold_sum_net
     *
     * @return float|null
     */
    public function getSoldSumNet()
    {
        return $this->container['sold_sum_net'];
    }

    /**
     * Sets sold_sum_net
     *
     * @param float|null $sold_sum_net sold_sum_net
     *
     * @return self
     */
    public function setSoldSumNet($sold_sum_net)
    {
        if (is_null($sold_sum_net)) {
            throw new \InvalidArgumentException('non-nullable sold_sum_net cannot be null');
        }
        $this->container['sold_sum_net'] = $sold_sum_net;

        return $this;
    }

    /**
     * Gets sold_sum_net_last30_days
     *
     * @return float|null
     */
    public function getSoldSumNetLast30Days()
    {
        return $this->container['sold_sum_net_last30_days'];
    }

    /**
     * Sets sold_sum_net_last30_days
     *
     * @param float|null $sold_sum_net_last30_days sold_sum_net_last30_days
     *
     * @return self
     */
    public function setSoldSumNetLast30Days($sold_sum_net_last30_days)
    {
        if (is_null($sold_sum_net_last30_days)) {
            throw new \InvalidArgumentException('non-nullable sold_sum_net_last30_days cannot be null');
        }
        $this->container['sold_sum_net_last30_days'] = $sold_sum_net_last30_days;

        return $this;
    }

    /**
     * Gets sold_sum_gross_last30_days
     *
     * @return float|null
     */
    public function getSoldSumGrossLast30Days()
    {
        return $this->container['sold_sum_gross_last30_days'];
    }

    /**
     * Sets sold_sum_gross_last30_days
     *
     * @param float|null $sold_sum_gross_last30_days sold_sum_gross_last30_days
     *
     * @return self
     */
    public function setSoldSumGrossLast30Days($sold_sum_gross_last30_days)
    {
        if (is_null($sold_sum_gross_last30_days)) {
            throw new \InvalidArgumentException('non-nullable sold_sum_gross_last30_days cannot be null');
        }
        $this->container['sold_sum_gross_last30_days'] = $sold_sum_gross_last30_days;

        return $this;
    }

    /**
     * Gets sold_amount_last30_days
     *
     * @return float|null
     */
    public function getSoldAmountLast30Days()
    {
        return $this->container['sold_amount_last30_days'];
    }

    /**
     * Sets sold_amount_last30_days
     *
     * @param float|null $sold_amount_last30_days sold_amount_last30_days
     *
     * @return self
     */
    public function setSoldAmountLast30Days($sold_amount_last30_days)
    {
        if (is_null($sold_amount_last30_days)) {
            throw new \InvalidArgumentException('non-nullable sold_amount_last30_days cannot be null');
        }
        $this->container['sold_amount_last30_days'] = $sold_amount_last30_days;

        return $this;
    }

    /**
     * Gets shipping_product_id
     *
     * @return int|null
     */
    public function getShippingProductId()
    {
        return $this->container['shipping_product_id'];
    }

    /**
     * Sets shipping_product_id
     *
     * @param int|null $shipping_product_id shipping_product_id
     *
     * @return self
     */
    public function setShippingProductId($shipping_product_id)
    {
        if (is_null($shipping_product_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_product_id cannot be null');
        }
        $this->container['shipping_product_id'] = $shipping_product_id;

        return $this;
    }

    /**
     * Gets is_digital
     *
     * @return bool
     */
    public function getIsDigital()
    {
        return $this->container['is_digital'];
    }

    /**
     * Sets is_digital
     *
     * @param bool $is_digital is_digital
     *
     * @return self
     */
    public function setIsDigital($is_digital)
    {
        if (is_null($is_digital)) {
            throw new \InvalidArgumentException('non-nullable is_digital cannot be null');
        }
        $this->container['is_digital'] = $is_digital;

        return $this;
    }

    /**
     * Gets is_customizable
     *
     * @return bool
     */
    public function getIsCustomizable()
    {
        return $this->container['is_customizable'];
    }

    /**
     * Sets is_customizable
     *
     * @param bool $is_customizable is_customizable
     *
     * @return self
     */
    public function setIsCustomizable($is_customizable)
    {
        if (is_null($is_customizable)) {
            throw new \InvalidArgumentException('non-nullable is_customizable cannot be null');
        }
        $this->container['is_customizable'] = $is_customizable;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return int|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param int|null $delivery_time delivery_time
     *
     * @return self
     */
    public function setDeliveryTime($delivery_time)
    {
        if (is_null($delivery_time)) {
            throw new \InvalidArgumentException('non-nullable delivery_time cannot be null');
        }
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return int|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param int|null $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets occasion
     *
     * @return int|null
     */
    public function getOccasion()
    {
        return $this->container['occasion'];
    }

    /**
     * Sets occasion
     *
     * @param int|null $occasion occasion
     *
     * @return self
     */
    public function setOccasion($occasion)
    {
        if (is_null($occasion)) {
            throw new \InvalidArgumentException('non-nullable occasion cannot be null');
        }
        $this->container['occasion'] = $occasion;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return string|null
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param string|null $country_of_origin country_of_origin
     *
     * @return self
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        if (is_null($country_of_origin)) {
            throw new \InvalidArgumentException('non-nullable country_of_origin cannot be null');
        }
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets export_description
     *
     * @return string|null
     */
    public function getExportDescription()
    {
        return $this->container['export_description'];
    }

    /**
     * Sets export_description
     *
     * @param string|null $export_description export_description
     *
     * @return self
     */
    public function setExportDescription($export_description)
    {
        if (is_null($export_description)) {
            throw new \InvalidArgumentException('non-nullable export_description cannot be null');
        }
        $this->container['export_description'] = $export_description;

        return $this;
    }

    /**
     * Gets export_description_multi_language
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null
     */
    public function getExportDescriptionMultiLanguage()
    {
        return $this->container['export_description_multi_language'];
    }

    /**
     * Sets export_description_multi_language
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesOrderMultiLanguageString[]|null $export_description_multi_language export_description_multi_language
     *
     * @return self
     */
    public function setExportDescriptionMultiLanguage($export_description_multi_language)
    {
        if (is_null($export_description_multi_language)) {
            throw new \InvalidArgumentException('non-nullable export_description_multi_language cannot be null');
        }
        $this->container['export_description_multi_language'] = $export_description_multi_language;

        return $this;
    }

    /**
     * Gets taric_number
     *
     * @return string|null
     */
    public function getTaricNumber()
    {
        return $this->container['taric_number'];
    }

    /**
     * Sets taric_number
     *
     * @param string|null $taric_number taric_number
     *
     * @return self
     */
    public function setTaricNumber($taric_number)
    {
        if (is_null($taric_number)) {
            throw new \InvalidArgumentException('non-nullable taric_number cannot be null');
        }
        $this->container['taric_number'] = $taric_number;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return int|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param int|null $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets width_cm
     *
     * @return float|null
     */
    public function getWidthCm()
    {
        return $this->container['width_cm'];
    }

    /**
     * Sets width_cm
     *
     * @param float|null $width_cm width_cm
     *
     * @return self
     */
    public function setWidthCm($width_cm)
    {
        if (is_null($width_cm)) {
            throw new \InvalidArgumentException('non-nullable width_cm cannot be null');
        }
        $this->container['width_cm'] = $width_cm;

        return $this;
    }

    /**
     * Gets length_cm
     *
     * @return float|null
     */
    public function getLengthCm()
    {
        return $this->container['length_cm'];
    }

    /**
     * Sets length_cm
     *
     * @param float|null $length_cm length_cm
     *
     * @return self
     */
    public function setLengthCm($length_cm)
    {
        if (is_null($length_cm)) {
            throw new \InvalidArgumentException('non-nullable length_cm cannot be null');
        }
        $this->container['length_cm'] = $length_cm;

        return $this;
    }

    /**
     * Gets height_cm
     *
     * @return float|null
     */
    public function getHeightCm()
    {
        return $this->container['height_cm'];
    }

    /**
     * Sets height_cm
     *
     * @param float|null $height_cm height_cm
     *
     * @return self
     */
    public function setHeightCm($height_cm)
    {
        if (is_null($height_cm)) {
            throw new \InvalidArgumentException('non-nullable height_cm cannot be null');
        }
        $this->container['height_cm'] = $height_cm;

        return $this;
    }

    /**
     * Gets bill_of_material
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelBomSubArticleApiModel[]|null
     */
    public function getBillOfMaterial()
    {
        return $this->container['bill_of_material'];
    }

    /**
     * Sets bill_of_material
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelBomSubArticleApiModel[]|null $bill_of_material bill_of_material
     *
     * @return self
     */
    public function setBillOfMaterial($bill_of_material)
    {
        if (is_null($bill_of_material)) {
            throw new \InvalidArgumentException('non-nullable bill_of_material cannot be null');
        }
        $this->container['bill_of_material'] = $bill_of_material;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldValueModel[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldValueModel[]|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets is_deactivated
     *
     * @return bool|null
     */
    public function getIsDeactivated()
    {
        return $this->container['is_deactivated'];
    }

    /**
     * Sets is_deactivated
     *
     * @param bool|null $is_deactivated is_deactivated
     *
     * @return self
     */
    public function setIsDeactivated($is_deactivated)
    {
        if (is_null($is_deactivated)) {
            throw new \InvalidArgumentException('non-nullable is_deactivated cannot be null');
        }
        $this->container['is_deactivated'] = $is_deactivated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


