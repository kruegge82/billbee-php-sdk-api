<?php
/**
 * BillbeeInterfacesBillbeeAPIShopAccountReadApiModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesBillbeeAPIShopAccountReadApiModel Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesBillbeeAPIShopAccountReadApiModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.BillbeeAPI.ShopAccountReadApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'account_type' => 'int',
        'name' => 'string',
        'last_sync_date' => '\DateTime',
        'last_sync_state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'account_type' => 'int32',
        'name' => null,
        'last_sync_date' => 'date-time',
        'last_sync_state' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'account_type' => false,
        'name' => false,
        'last_sync_date' => false,
        'last_sync_state' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'account_type' => 'AccountType',
        'name' => 'Name',
        'last_sync_date' => 'LastSyncDate',
        'last_sync_state' => 'LastSyncState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_type' => 'setAccountType',
        'name' => 'setName',
        'last_sync_date' => 'setLastSyncDate',
        'last_sync_state' => 'setLastSyncState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_type' => 'getAccountType',
        'name' => 'getName',
        'last_sync_date' => 'getLastSyncDate',
        'last_sync_state' => 'getLastSyncState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACCOUNT_TYPE_NUMBER_1 = 1;
    public const ACCOUNT_TYPE_NUMBER_2 = 2;
    public const ACCOUNT_TYPE_NUMBER_3 = 3;
    public const ACCOUNT_TYPE_NUMBER_4 = 4;
    public const ACCOUNT_TYPE_NUMBER_5 = 5;
    public const ACCOUNT_TYPE_NUMBER_6 = 6;
    public const ACCOUNT_TYPE_NUMBER_7 = 7;
    public const ACCOUNT_TYPE_NUMBER_8 = 8;
    public const ACCOUNT_TYPE_NUMBER_9 = 9;
    public const ACCOUNT_TYPE_NUMBER_10 = 10;
    public const ACCOUNT_TYPE_NUMBER_11 = 11;
    public const ACCOUNT_TYPE_NUMBER_12 = 12;
    public const ACCOUNT_TYPE_NUMBER_13 = 13;
    public const ACCOUNT_TYPE_NUMBER_14 = 14;
    public const ACCOUNT_TYPE_NUMBER_15 = 15;
    public const ACCOUNT_TYPE_NUMBER_16 = 16;
    public const ACCOUNT_TYPE_NUMBER_17 = 17;
    public const ACCOUNT_TYPE_NUMBER_18 = 18;
    public const ACCOUNT_TYPE_NUMBER_19 = 19;
    public const ACCOUNT_TYPE_NUMBER_20 = 20;
    public const ACCOUNT_TYPE_NUMBER_21 = 21;
    public const ACCOUNT_TYPE_NUMBER_22 = 22;
    public const ACCOUNT_TYPE_NUMBER_23 = 23;
    public const ACCOUNT_TYPE_NUMBER_24 = 24;
    public const ACCOUNT_TYPE_NUMBER_25 = 25;
    public const ACCOUNT_TYPE_NUMBER_26 = 26;
    public const ACCOUNT_TYPE_NUMBER_27 = 27;
    public const ACCOUNT_TYPE_NUMBER_28 = 28;
    public const ACCOUNT_TYPE_NUMBER_29 = 29;
    public const ACCOUNT_TYPE_NUMBER_30 = 30;
    public const ACCOUNT_TYPE_NUMBER_31 = 31;
    public const ACCOUNT_TYPE_NUMBER_32 = 32;
    public const ACCOUNT_TYPE_NUMBER_33 = 33;
    public const ACCOUNT_TYPE_NUMBER_34 = 34;
    public const ACCOUNT_TYPE_NUMBER_35 = 35;
    public const ACCOUNT_TYPE_NUMBER_36 = 36;
    public const ACCOUNT_TYPE_NUMBER_37 = 37;
    public const ACCOUNT_TYPE_NUMBER_38 = 38;
    public const ACCOUNT_TYPE_NUMBER_39 = 39;
    public const ACCOUNT_TYPE_NUMBER_40 = 40;
    public const ACCOUNT_TYPE_NUMBER_41 = 41;
    public const ACCOUNT_TYPE_NUMBER_42 = 42;
    public const ACCOUNT_TYPE_NUMBER_43 = 43;
    public const ACCOUNT_TYPE_NUMBER_44 = 44;
    public const ACCOUNT_TYPE_NUMBER_45 = 45;
    public const ACCOUNT_TYPE_NUMBER_46 = 46;
    public const ACCOUNT_TYPE_NUMBER_47 = 47;
    public const ACCOUNT_TYPE_NUMBER_48 = 48;
    public const ACCOUNT_TYPE_NUMBER_49 = 49;
    public const ACCOUNT_TYPE_NUMBER_50 = 50;
    public const ACCOUNT_TYPE_NUMBER_51 = 51;
    public const ACCOUNT_TYPE_NUMBER_52 = 52;
    public const ACCOUNT_TYPE_NUMBER_54 = 54;
    public const ACCOUNT_TYPE_NUMBER_55 = 55;
    public const ACCOUNT_TYPE_NUMBER_56 = 56;
    public const ACCOUNT_TYPE_NUMBER_57 = 57;
    public const ACCOUNT_TYPE_NUMBER_58 = 58;
    public const ACCOUNT_TYPE_NUMBER_59 = 59;
    public const ACCOUNT_TYPE_NUMBER_60 = 60;
    public const ACCOUNT_TYPE_NUMBER_61 = 61;
    public const ACCOUNT_TYPE_NUMBER_62 = 62;
    public const ACCOUNT_TYPE_NUMBER_63 = 63;
    public const ACCOUNT_TYPE_NUMBER_64 = 64;
    public const ACCOUNT_TYPE_NUMBER_65 = 65;
    public const ACCOUNT_TYPE_NUMBER_66 = 66;
    public const ACCOUNT_TYPE_NUMBER_67 = 67;
    public const ACCOUNT_TYPE_NUMBER_68 = 68;
    public const ACCOUNT_TYPE_NUMBER_69 = 69;
    public const ACCOUNT_TYPE_NUMBER_70 = 70;
    public const ACCOUNT_TYPE_NUMBER_71 = 71;
    public const ACCOUNT_TYPE_NUMBER_2147483647 = 2147483647;
    public const LAST_SYNC_STATE_NUMBER_0 = 0;
    public const LAST_SYNC_STATE_NUMBER_1 = 1;
    public const LAST_SYNC_STATE_NUMBER_2 = 2;
    public const LAST_SYNC_STATE_NUMBER_254 = 254;
    public const LAST_SYNC_STATE_NUMBER_255 = 255;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_NUMBER_1,
            self::ACCOUNT_TYPE_NUMBER_2,
            self::ACCOUNT_TYPE_NUMBER_3,
            self::ACCOUNT_TYPE_NUMBER_4,
            self::ACCOUNT_TYPE_NUMBER_5,
            self::ACCOUNT_TYPE_NUMBER_6,
            self::ACCOUNT_TYPE_NUMBER_7,
            self::ACCOUNT_TYPE_NUMBER_8,
            self::ACCOUNT_TYPE_NUMBER_9,
            self::ACCOUNT_TYPE_NUMBER_10,
            self::ACCOUNT_TYPE_NUMBER_11,
            self::ACCOUNT_TYPE_NUMBER_12,
            self::ACCOUNT_TYPE_NUMBER_13,
            self::ACCOUNT_TYPE_NUMBER_14,
            self::ACCOUNT_TYPE_NUMBER_15,
            self::ACCOUNT_TYPE_NUMBER_16,
            self::ACCOUNT_TYPE_NUMBER_17,
            self::ACCOUNT_TYPE_NUMBER_18,
            self::ACCOUNT_TYPE_NUMBER_19,
            self::ACCOUNT_TYPE_NUMBER_20,
            self::ACCOUNT_TYPE_NUMBER_21,
            self::ACCOUNT_TYPE_NUMBER_22,
            self::ACCOUNT_TYPE_NUMBER_23,
            self::ACCOUNT_TYPE_NUMBER_24,
            self::ACCOUNT_TYPE_NUMBER_25,
            self::ACCOUNT_TYPE_NUMBER_26,
            self::ACCOUNT_TYPE_NUMBER_27,
            self::ACCOUNT_TYPE_NUMBER_28,
            self::ACCOUNT_TYPE_NUMBER_29,
            self::ACCOUNT_TYPE_NUMBER_30,
            self::ACCOUNT_TYPE_NUMBER_31,
            self::ACCOUNT_TYPE_NUMBER_32,
            self::ACCOUNT_TYPE_NUMBER_33,
            self::ACCOUNT_TYPE_NUMBER_34,
            self::ACCOUNT_TYPE_NUMBER_35,
            self::ACCOUNT_TYPE_NUMBER_36,
            self::ACCOUNT_TYPE_NUMBER_37,
            self::ACCOUNT_TYPE_NUMBER_38,
            self::ACCOUNT_TYPE_NUMBER_39,
            self::ACCOUNT_TYPE_NUMBER_40,
            self::ACCOUNT_TYPE_NUMBER_41,
            self::ACCOUNT_TYPE_NUMBER_42,
            self::ACCOUNT_TYPE_NUMBER_43,
            self::ACCOUNT_TYPE_NUMBER_44,
            self::ACCOUNT_TYPE_NUMBER_45,
            self::ACCOUNT_TYPE_NUMBER_46,
            self::ACCOUNT_TYPE_NUMBER_47,
            self::ACCOUNT_TYPE_NUMBER_48,
            self::ACCOUNT_TYPE_NUMBER_49,
            self::ACCOUNT_TYPE_NUMBER_50,
            self::ACCOUNT_TYPE_NUMBER_51,
            self::ACCOUNT_TYPE_NUMBER_52,
            self::ACCOUNT_TYPE_NUMBER_54,
            self::ACCOUNT_TYPE_NUMBER_55,
            self::ACCOUNT_TYPE_NUMBER_56,
            self::ACCOUNT_TYPE_NUMBER_57,
            self::ACCOUNT_TYPE_NUMBER_58,
            self::ACCOUNT_TYPE_NUMBER_59,
            self::ACCOUNT_TYPE_NUMBER_60,
            self::ACCOUNT_TYPE_NUMBER_61,
            self::ACCOUNT_TYPE_NUMBER_62,
            self::ACCOUNT_TYPE_NUMBER_63,
            self::ACCOUNT_TYPE_NUMBER_64,
            self::ACCOUNT_TYPE_NUMBER_65,
            self::ACCOUNT_TYPE_NUMBER_66,
            self::ACCOUNT_TYPE_NUMBER_67,
            self::ACCOUNT_TYPE_NUMBER_68,
            self::ACCOUNT_TYPE_NUMBER_69,
            self::ACCOUNT_TYPE_NUMBER_70,
            self::ACCOUNT_TYPE_NUMBER_71,
            self::ACCOUNT_TYPE_NUMBER_2147483647,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastSyncStateAllowableValues()
    {
        return [
            self::LAST_SYNC_STATE_NUMBER_0,
            self::LAST_SYNC_STATE_NUMBER_1,
            self::LAST_SYNC_STATE_NUMBER_2,
            self::LAST_SYNC_STATE_NUMBER_254,
            self::LAST_SYNC_STATE_NUMBER_255,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('last_sync_date', $data ?? [], null);
        $this->setIfExists('last_sync_state', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLastSyncStateAllowableValues();
        if (!is_null($this->container['last_sync_state']) && !in_array($this->container['last_sync_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'last_sync_state', must be one of '%s'",
                $this->container['last_sync_state'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return int|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param int|null $account_type Refer to https://app.billbee.io/swagger/ui/index#!/EnumApi/EnumApi_GetShopAccountType for definition
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets last_sync_date
     *
     * @return \DateTime|null
     */
    public function getLastSyncDate()
    {
        return $this->container['last_sync_date'];
    }

    /**
     * Sets last_sync_date
     *
     * @param \DateTime|null $last_sync_date Refer to https://app.billbee.io/swagger/ui/index#!/EnumApi/EnumApi_GetAccountSyncState for definition
     *
     * @return self
     */
    public function setLastSyncDate($last_sync_date)
    {
        if (is_null($last_sync_date)) {
            throw new \InvalidArgumentException('non-nullable last_sync_date cannot be null');
        }
        $this->container['last_sync_date'] = $last_sync_date;

        return $this;
    }

    /**
     * Gets last_sync_state
     *
     * @return int|null
     */
    public function getLastSyncState()
    {
        return $this->container['last_sync_state'];
    }

    /**
     * Sets last_sync_state
     *
     * @param int|null $last_sync_state last_sync_state
     *
     * @return self
     */
    public function setLastSyncState($last_sync_state)
    {
        if (is_null($last_sync_state)) {
            throw new \InvalidArgumentException('non-nullable last_sync_state cannot be null');
        }
        $allowedValues = $this->getLastSyncStateAllowableValues();
        if (!in_array($last_sync_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'last_sync_state', must be one of '%s'",
                    $last_sync_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['last_sync_state'] = $last_sync_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


