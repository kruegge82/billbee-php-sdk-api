<?php
/**
 * BillbeeInterfacesShippingProductService
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesShippingProductService Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesShippingProductService implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.Shipping.ProductService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_name' => 'string',
        'display_value' => 'string',
        'requires_user_input' => 'bool',
        'show_input' => 'bool',
        'service_name' => 'string',
        'type_name' => 'string',
        'possible_value_lists' => '\kruegge82\billbee\Model\SystemCollectionsGenericKeyValuePairOfSystemStringAndSystemCollectionsGenericListOfSystemCollectionsGenericKeyValuePairOfSystemInt32AndSystemString[]',
        'can_be_configured' => 'bool',
        'has_dynamic_values' => 'bool',
        'is_required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_name' => null,
        'display_value' => null,
        'requires_user_input' => null,
        'show_input' => null,
        'service_name' => null,
        'type_name' => null,
        'possible_value_lists' => null,
        'can_be_configured' => null,
        'has_dynamic_values' => null,
        'is_required' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'display_name' => false,
        'display_value' => false,
        'requires_user_input' => false,
        'show_input' => false,
        'service_name' => false,
        'type_name' => false,
        'possible_value_lists' => false,
        'can_be_configured' => false,
        'has_dynamic_values' => false,
        'is_required' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'DisplayName',
        'display_value' => 'DisplayValue',
        'requires_user_input' => 'RequiresUserInput',
        'show_input' => 'ShowInput',
        'service_name' => 'ServiceName',
        'type_name' => 'typeName',
        'possible_value_lists' => 'PossibleValueLists',
        'can_be_configured' => 'CanBeConfigured',
        'has_dynamic_values' => 'HasDynamicValues',
        'is_required' => 'IsRequired'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'display_value' => 'setDisplayValue',
        'requires_user_input' => 'setRequiresUserInput',
        'show_input' => 'setShowInput',
        'service_name' => 'setServiceName',
        'type_name' => 'setTypeName',
        'possible_value_lists' => 'setPossibleValueLists',
        'can_be_configured' => 'setCanBeConfigured',
        'has_dynamic_values' => 'setHasDynamicValues',
        'is_required' => 'setIsRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'display_value' => 'getDisplayValue',
        'requires_user_input' => 'getRequiresUserInput',
        'show_input' => 'getShowInput',
        'service_name' => 'getServiceName',
        'type_name' => 'getTypeName',
        'possible_value_lists' => 'getPossibleValueLists',
        'can_be_configured' => 'getCanBeConfigured',
        'has_dynamic_values' => 'getHasDynamicValues',
        'is_required' => 'getIsRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('display_value', $data ?? [], null);
        $this->setIfExists('requires_user_input', $data ?? [], null);
        $this->setIfExists('show_input', $data ?? [], null);
        $this->setIfExists('service_name', $data ?? [], null);
        $this->setIfExists('type_name', $data ?? [], null);
        $this->setIfExists('possible_value_lists', $data ?? [], null);
        $this->setIfExists('can_be_configured', $data ?? [], null);
        $this->setIfExists('has_dynamic_values', $data ?? [], null);
        $this->setIfExists('is_required', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets display_value
     *
     * @return string|null
     */
    public function getDisplayValue()
    {
        return $this->container['display_value'];
    }

    /**
     * Sets display_value
     *
     * @param string|null $display_value display_value
     *
     * @return self
     */
    public function setDisplayValue($display_value)
    {
        if (is_null($display_value)) {
            throw new \InvalidArgumentException('non-nullable display_value cannot be null');
        }
        $this->container['display_value'] = $display_value;

        return $this;
    }

    /**
     * Gets requires_user_input
     *
     * @return bool|null
     */
    public function getRequiresUserInput()
    {
        return $this->container['requires_user_input'];
    }

    /**
     * Sets requires_user_input
     *
     * @param bool|null $requires_user_input requires_user_input
     *
     * @return self
     */
    public function setRequiresUserInput($requires_user_input)
    {
        if (is_null($requires_user_input)) {
            throw new \InvalidArgumentException('non-nullable requires_user_input cannot be null');
        }
        $this->container['requires_user_input'] = $requires_user_input;

        return $this;
    }

    /**
     * Gets show_input
     *
     * @return bool|null
     */
    public function getShowInput()
    {
        return $this->container['show_input'];
    }

    /**
     * Sets show_input
     *
     * @param bool|null $show_input show_input
     *
     * @return self
     */
    public function setShowInput($show_input)
    {
        if (is_null($show_input)) {
            throw new \InvalidArgumentException('non-nullable show_input cannot be null');
        }
        $this->container['show_input'] = $show_input;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string|null
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string|null $service_name service_name
     *
     * @return self
     */
    public function setServiceName($service_name)
    {
        if (is_null($service_name)) {
            throw new \InvalidArgumentException('non-nullable service_name cannot be null');
        }
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets type_name
     *
     * @return string|null
     */
    public function getTypeName()
    {
        return $this->container['type_name'];
    }

    /**
     * Sets type_name
     *
     * @param string|null $type_name type_name
     *
     * @return self
     */
    public function setTypeName($type_name)
    {
        if (is_null($type_name)) {
            throw new \InvalidArgumentException('non-nullable type_name cannot be null');
        }
        $this->container['type_name'] = $type_name;

        return $this;
    }

    /**
     * Gets possible_value_lists
     *
     * @return \kruegge82\billbee\Model\SystemCollectionsGenericKeyValuePairOfSystemStringAndSystemCollectionsGenericListOfSystemCollectionsGenericKeyValuePairOfSystemInt32AndSystemString[]|null
     */
    public function getPossibleValueLists()
    {
        return $this->container['possible_value_lists'];
    }

    /**
     * Sets possible_value_lists
     *
     * @param \kruegge82\billbee\Model\SystemCollectionsGenericKeyValuePairOfSystemStringAndSystemCollectionsGenericListOfSystemCollectionsGenericKeyValuePairOfSystemInt32AndSystemString[]|null $possible_value_lists possible_value_lists
     *
     * @return self
     */
    public function setPossibleValueLists($possible_value_lists)
    {
        if (is_null($possible_value_lists)) {
            throw new \InvalidArgumentException('non-nullable possible_value_lists cannot be null');
        }
        $this->container['possible_value_lists'] = $possible_value_lists;

        return $this;
    }

    /**
     * Gets can_be_configured
     *
     * @return bool|null
     */
    public function getCanBeConfigured()
    {
        return $this->container['can_be_configured'];
    }

    /**
     * Sets can_be_configured
     *
     * @param bool|null $can_be_configured can_be_configured
     *
     * @return self
     */
    public function setCanBeConfigured($can_be_configured)
    {
        if (is_null($can_be_configured)) {
            throw new \InvalidArgumentException('non-nullable can_be_configured cannot be null');
        }
        $this->container['can_be_configured'] = $can_be_configured;

        return $this;
    }

    /**
     * Gets has_dynamic_values
     *
     * @return bool|null
     */
    public function getHasDynamicValues()
    {
        return $this->container['has_dynamic_values'];
    }

    /**
     * Sets has_dynamic_values
     *
     * @param bool|null $has_dynamic_values has_dynamic_values
     *
     * @return self
     */
    public function setHasDynamicValues($has_dynamic_values)
    {
        if (is_null($has_dynamic_values)) {
            throw new \InvalidArgumentException('non-nullable has_dynamic_values cannot be null');
        }
        $this->container['has_dynamic_values'] = $has_dynamic_values;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool|null
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool|null $is_required is_required
     *
     * @return self
     */
    public function setIsRequired($is_required)
    {
        if (is_null($is_required)) {
            throw new \InvalidArgumentException('non-nullable is_required cannot be null');
        }
        $this->container['is_required'] = $is_required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


