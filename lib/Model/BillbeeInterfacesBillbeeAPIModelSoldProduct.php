<?php
/**
 * BillbeeInterfacesBillbeeAPIModelSoldProduct
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesBillbeeAPIModelSoldProduct Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesBillbeeAPIModelSoldProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.BillbeeAPI.Model.SoldProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'old_id' => 'string',
        'id' => 'string',
        'title' => 'string',
        'weight' => 'int',
        'sku' => 'string',
        'sku_or_id' => 'string',
        'is_digital' => 'bool',
        'images' => '\kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelProductImage[]',
        'ean' => 'string',
        'platform_data' => 'string',
        'taric_code' => 'string',
        'country_of_origin' => 'string',
        'billbee_id' => 'int',
        'type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'old_id' => null,
        'id' => null,
        'title' => null,
        'weight' => 'int32',
        'sku' => null,
        'sku_or_id' => null,
        'is_digital' => null,
        'images' => null,
        'ean' => null,
        'platform_data' => null,
        'taric_code' => null,
        'country_of_origin' => null,
        'billbee_id' => 'int64',
        'type' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'old_id' => false,
        'id' => false,
        'title' => false,
        'weight' => false,
        'sku' => false,
        'sku_or_id' => false,
        'is_digital' => false,
        'images' => false,
        'ean' => false,
        'platform_data' => false,
        'taric_code' => false,
        'country_of_origin' => false,
        'billbee_id' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'old_id' => 'OldId',
        'id' => 'Id',
        'title' => 'Title',
        'weight' => 'Weight',
        'sku' => 'SKU',
        'sku_or_id' => 'SkuOrId',
        'is_digital' => 'IsDigital',
        'images' => 'Images',
        'ean' => 'EAN',
        'platform_data' => 'PlatformData',
        'taric_code' => 'TARICCode',
        'country_of_origin' => 'CountryOfOrigin',
        'billbee_id' => 'BillbeeId',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'old_id' => 'setOldId',
        'id' => 'setId',
        'title' => 'setTitle',
        'weight' => 'setWeight',
        'sku' => 'setSku',
        'sku_or_id' => 'setSkuOrId',
        'is_digital' => 'setIsDigital',
        'images' => 'setImages',
        'ean' => 'setEan',
        'platform_data' => 'setPlatformData',
        'taric_code' => 'setTaricCode',
        'country_of_origin' => 'setCountryOfOrigin',
        'billbee_id' => 'setBillbeeId',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'old_id' => 'getOldId',
        'id' => 'getId',
        'title' => 'getTitle',
        'weight' => 'getWeight',
        'sku' => 'getSku',
        'sku_or_id' => 'getSkuOrId',
        'is_digital' => 'getIsDigital',
        'images' => 'getImages',
        'ean' => 'getEan',
        'platform_data' => 'getPlatformData',
        'taric_code' => 'getTaricCode',
        'country_of_origin' => 'getCountryOfOrigin',
        'billbee_id' => 'getBillbeeId',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('old_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('sku_or_id', $data ?? [], null);
        $this->setIfExists('is_digital', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('platform_data', $data ?? [], null);
        $this->setIfExists('taric_code', $data ?? [], null);
        $this->setIfExists('country_of_origin', $data ?? [], null);
        $this->setIfExists('billbee_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets old_id
     *
     * @return string|null
     */
    public function getOldId()
    {
        return $this->container['old_id'];
    }

    /**
     * Sets old_id
     *
     * @param string|null $old_id This is for migration scenarios when the internal id of a product changes  I.E. Etsy when switching to the new inventory management, the ids for variants will change.
     *
     * @return self
     */
    public function setOldId($old_id)
    {
        if (is_null($old_id)) {
            throw new \InvalidArgumentException('non-nullable old_id cannot be null');
        }
        $this->container['old_id'] = $old_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The id of this product in the external system
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The name of this product
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight Weight of one item in gram
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku The SKU of this product
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets sku_or_id
     *
     * @return string|null
     */
    public function getSkuOrId()
    {
        return $this->container['sku_or_id'];
    }

    /**
     * Sets sku_or_id
     *
     * @param string|null $sku_or_id The SKU of this product or the id if the SKU is empty
     *
     * @return self
     */
    public function setSkuOrId($sku_or_id)
    {
        if (is_null($sku_or_id)) {
            throw new \InvalidArgumentException('non-nullable sku_or_id cannot be null');
        }
        $this->container['sku_or_id'] = $sku_or_id;

        return $this;
    }

    /**
     * Gets is_digital
     *
     * @return bool|null
     */
    public function getIsDigital()
    {
        return $this->container['is_digital'];
    }

    /**
     * Sets is_digital
     *
     * @param bool|null $is_digital True if the product is a digital good (download etc.), false if not
     *
     * @return self
     */
    public function setIsDigital($is_digital)
    {
        if (is_null($is_digital)) {
            throw new \InvalidArgumentException('non-nullable is_digital cannot be null');
        }
        $this->container['is_digital'] = $is_digital;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelProductImage[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \kruegge82\billbee\Model\BillbeeInterfacesBillbeeAPIModelProductImage[]|null $images The images of this product
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean The EAN / GTIN of this product
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets platform_data
     *
     * @return string|null
     */
    public function getPlatformData()
    {
        return $this->container['platform_data'];
    }

    /**
     * Sets platform_data
     *
     * @param string|null $platform_data Optional platform specific Data as serialized JSON Object for the product
     *
     * @return self
     */
    public function setPlatformData($platform_data)
    {
        if (is_null($platform_data)) {
            throw new \InvalidArgumentException('non-nullable platform_data cannot be null');
        }
        $this->container['platform_data'] = $platform_data;

        return $this;
    }

    /**
     * Gets taric_code
     *
     * @return string|null
     */
    public function getTaricCode()
    {
        return $this->container['taric_code'];
    }

    /**
     * Sets taric_code
     *
     * @param string|null $taric_code The TARIC code
     *
     * @return self
     */
    public function setTaricCode($taric_code)
    {
        if (is_null($taric_code)) {
            throw new \InvalidArgumentException('non-nullable taric_code cannot be null');
        }
        $this->container['taric_code'] = $taric_code;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return string|null
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param string|null $country_of_origin The country where this article was made
     *
     * @return self
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        if (is_null($country_of_origin)) {
            throw new \InvalidArgumentException('non-nullable country_of_origin cannot be null');
        }
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets billbee_id
     *
     * @return int|null
     */
    public function getBillbeeId()
    {
        return $this->container['billbee_id'];
    }

    /**
     * Sets billbee_id
     *
     * @param int|null $billbee_id The Billbee internal id of the linked product
     *
     * @return self
     */
    public function setBillbeeId($billbee_id)
    {
        if (is_null($billbee_id)) {
            throw new \InvalidArgumentException('non-nullable billbee_id cannot be null');
        }
        $this->container['billbee_id'] = $billbee_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type Indicates whether the article is 1 = normal or 2 = BOM
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


