<?php
/**
 * BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billbee API
 *
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  50 calls per second for each API Key.  10 calls per second for each API Key in combination with Billbee user.  Besides that each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed the throttle threshold, the API will return a HTTP 429 status code and a Retry-After-Header indicating how many seconds you will have to wait before you can call the API again.
 *
 * The version of the OpenAPI document: V1
 * Contact: support@billbee.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\billbee\Model;

use \ArrayAccess;
use \kruegge82\billbee\ObjectSerializer;

/**
 * BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\billbee
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillbeeInterfacesOrderVatDetailsRecognizedHistoryEntryVatDetectionFlags implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Billbee.Interfaces.Order.VatDetailsRecognizedHistoryEntry.VatDetectionFlags';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'third_party_country' => 'bool',
        'src_country_is_equal_to_dst_country' => 'bool',
        'customer_has_vat_id' => 'bool',
        'eu_delivery_threshold_exceeded' => 'bool',
        'oss_enabled' => 'bool',
        'seller_is_registered_in_dst_country' => 'bool',
        'order_distribution_country_is_empty' => 'bool',
        'user_profile_country_is_empty' => 'bool',
        'set_igl_when_vat_id_is_available_enabled' => 'bool',
        'rates_from' => 'string',
        'vat_id_from' => 'string',
        'is_distance_sale' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'third_party_country' => null,
        'src_country_is_equal_to_dst_country' => null,
        'customer_has_vat_id' => null,
        'eu_delivery_threshold_exceeded' => null,
        'oss_enabled' => null,
        'seller_is_registered_in_dst_country' => null,
        'order_distribution_country_is_empty' => null,
        'user_profile_country_is_empty' => null,
        'set_igl_when_vat_id_is_available_enabled' => null,
        'rates_from' => null,
        'vat_id_from' => null,
        'is_distance_sale' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'third_party_country' => false,
        'src_country_is_equal_to_dst_country' => false,
        'customer_has_vat_id' => false,
        'eu_delivery_threshold_exceeded' => false,
        'oss_enabled' => false,
        'seller_is_registered_in_dst_country' => false,
        'order_distribution_country_is_empty' => false,
        'user_profile_country_is_empty' => false,
        'set_igl_when_vat_id_is_available_enabled' => false,
        'rates_from' => false,
        'vat_id_from' => false,
        'is_distance_sale' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'third_party_country' => 'ThirdPartyCountry',
        'src_country_is_equal_to_dst_country' => 'SrcCountryIsEqualToDstCountry',
        'customer_has_vat_id' => 'CustomerHasVatId',
        'eu_delivery_threshold_exceeded' => 'EuDeliveryThresholdExceeded',
        'oss_enabled' => 'OssEnabled',
        'seller_is_registered_in_dst_country' => 'SellerIsRegisteredInDstCountry',
        'order_distribution_country_is_empty' => 'OrderDistributionCountryIsEmpty',
        'user_profile_country_is_empty' => 'UserProfileCountryIsEmpty',
        'set_igl_when_vat_id_is_available_enabled' => 'SetIglWhenVatIdIsAvailableEnabled',
        'rates_from' => 'RatesFrom',
        'vat_id_from' => 'VatIdFrom',
        'is_distance_sale' => 'IsDistanceSale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'third_party_country' => 'setThirdPartyCountry',
        'src_country_is_equal_to_dst_country' => 'setSrcCountryIsEqualToDstCountry',
        'customer_has_vat_id' => 'setCustomerHasVatId',
        'eu_delivery_threshold_exceeded' => 'setEuDeliveryThresholdExceeded',
        'oss_enabled' => 'setOssEnabled',
        'seller_is_registered_in_dst_country' => 'setSellerIsRegisteredInDstCountry',
        'order_distribution_country_is_empty' => 'setOrderDistributionCountryIsEmpty',
        'user_profile_country_is_empty' => 'setUserProfileCountryIsEmpty',
        'set_igl_when_vat_id_is_available_enabled' => 'setSetIglWhenVatIdIsAvailableEnabled',
        'rates_from' => 'setRatesFrom',
        'vat_id_from' => 'setVatIdFrom',
        'is_distance_sale' => 'setIsDistanceSale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'third_party_country' => 'getThirdPartyCountry',
        'src_country_is_equal_to_dst_country' => 'getSrcCountryIsEqualToDstCountry',
        'customer_has_vat_id' => 'getCustomerHasVatId',
        'eu_delivery_threshold_exceeded' => 'getEuDeliveryThresholdExceeded',
        'oss_enabled' => 'getOssEnabled',
        'seller_is_registered_in_dst_country' => 'getSellerIsRegisteredInDstCountry',
        'order_distribution_country_is_empty' => 'getOrderDistributionCountryIsEmpty',
        'user_profile_country_is_empty' => 'getUserProfileCountryIsEmpty',
        'set_igl_when_vat_id_is_available_enabled' => 'getSetIglWhenVatIdIsAvailableEnabled',
        'rates_from' => 'getRatesFrom',
        'vat_id_from' => 'getVatIdFrom',
        'is_distance_sale' => 'getIsDistanceSale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('third_party_country', $data ?? [], null);
        $this->setIfExists('src_country_is_equal_to_dst_country', $data ?? [], null);
        $this->setIfExists('customer_has_vat_id', $data ?? [], null);
        $this->setIfExists('eu_delivery_threshold_exceeded', $data ?? [], null);
        $this->setIfExists('oss_enabled', $data ?? [], null);
        $this->setIfExists('seller_is_registered_in_dst_country', $data ?? [], null);
        $this->setIfExists('order_distribution_country_is_empty', $data ?? [], null);
        $this->setIfExists('user_profile_country_is_empty', $data ?? [], null);
        $this->setIfExists('set_igl_when_vat_id_is_available_enabled', $data ?? [], null);
        $this->setIfExists('rates_from', $data ?? [], null);
        $this->setIfExists('vat_id_from', $data ?? [], null);
        $this->setIfExists('is_distance_sale', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets third_party_country
     *
     * @return bool|null
     */
    public function getThirdPartyCountry()
    {
        return $this->container['third_party_country'];
    }

    /**
     * Sets third_party_country
     *
     * @param bool|null $third_party_country third_party_country
     *
     * @return self
     */
    public function setThirdPartyCountry($third_party_country)
    {
        if (is_null($third_party_country)) {
            throw new \InvalidArgumentException('non-nullable third_party_country cannot be null');
        }
        $this->container['third_party_country'] = $third_party_country;

        return $this;
    }

    /**
     * Gets src_country_is_equal_to_dst_country
     *
     * @return bool|null
     */
    public function getSrcCountryIsEqualToDstCountry()
    {
        return $this->container['src_country_is_equal_to_dst_country'];
    }

    /**
     * Sets src_country_is_equal_to_dst_country
     *
     * @param bool|null $src_country_is_equal_to_dst_country src_country_is_equal_to_dst_country
     *
     * @return self
     */
    public function setSrcCountryIsEqualToDstCountry($src_country_is_equal_to_dst_country)
    {
        if (is_null($src_country_is_equal_to_dst_country)) {
            throw new \InvalidArgumentException('non-nullable src_country_is_equal_to_dst_country cannot be null');
        }
        $this->container['src_country_is_equal_to_dst_country'] = $src_country_is_equal_to_dst_country;

        return $this;
    }

    /**
     * Gets customer_has_vat_id
     *
     * @return bool|null
     */
    public function getCustomerHasVatId()
    {
        return $this->container['customer_has_vat_id'];
    }

    /**
     * Sets customer_has_vat_id
     *
     * @param bool|null $customer_has_vat_id customer_has_vat_id
     *
     * @return self
     */
    public function setCustomerHasVatId($customer_has_vat_id)
    {
        if (is_null($customer_has_vat_id)) {
            throw new \InvalidArgumentException('non-nullable customer_has_vat_id cannot be null');
        }
        $this->container['customer_has_vat_id'] = $customer_has_vat_id;

        return $this;
    }

    /**
     * Gets eu_delivery_threshold_exceeded
     *
     * @return bool|null
     */
    public function getEuDeliveryThresholdExceeded()
    {
        return $this->container['eu_delivery_threshold_exceeded'];
    }

    /**
     * Sets eu_delivery_threshold_exceeded
     *
     * @param bool|null $eu_delivery_threshold_exceeded eu_delivery_threshold_exceeded
     *
     * @return self
     */
    public function setEuDeliveryThresholdExceeded($eu_delivery_threshold_exceeded)
    {
        if (is_null($eu_delivery_threshold_exceeded)) {
            throw new \InvalidArgumentException('non-nullable eu_delivery_threshold_exceeded cannot be null');
        }
        $this->container['eu_delivery_threshold_exceeded'] = $eu_delivery_threshold_exceeded;

        return $this;
    }

    /**
     * Gets oss_enabled
     *
     * @return bool|null
     */
    public function getOssEnabled()
    {
        return $this->container['oss_enabled'];
    }

    /**
     * Sets oss_enabled
     *
     * @param bool|null $oss_enabled oss_enabled
     *
     * @return self
     */
    public function setOssEnabled($oss_enabled)
    {
        if (is_null($oss_enabled)) {
            throw new \InvalidArgumentException('non-nullable oss_enabled cannot be null');
        }
        $this->container['oss_enabled'] = $oss_enabled;

        return $this;
    }

    /**
     * Gets seller_is_registered_in_dst_country
     *
     * @return bool|null
     */
    public function getSellerIsRegisteredInDstCountry()
    {
        return $this->container['seller_is_registered_in_dst_country'];
    }

    /**
     * Sets seller_is_registered_in_dst_country
     *
     * @param bool|null $seller_is_registered_in_dst_country seller_is_registered_in_dst_country
     *
     * @return self
     */
    public function setSellerIsRegisteredInDstCountry($seller_is_registered_in_dst_country)
    {
        if (is_null($seller_is_registered_in_dst_country)) {
            throw new \InvalidArgumentException('non-nullable seller_is_registered_in_dst_country cannot be null');
        }
        $this->container['seller_is_registered_in_dst_country'] = $seller_is_registered_in_dst_country;

        return $this;
    }

    /**
     * Gets order_distribution_country_is_empty
     *
     * @return bool|null
     */
    public function getOrderDistributionCountryIsEmpty()
    {
        return $this->container['order_distribution_country_is_empty'];
    }

    /**
     * Sets order_distribution_country_is_empty
     *
     * @param bool|null $order_distribution_country_is_empty order_distribution_country_is_empty
     *
     * @return self
     */
    public function setOrderDistributionCountryIsEmpty($order_distribution_country_is_empty)
    {
        if (is_null($order_distribution_country_is_empty)) {
            throw new \InvalidArgumentException('non-nullable order_distribution_country_is_empty cannot be null');
        }
        $this->container['order_distribution_country_is_empty'] = $order_distribution_country_is_empty;

        return $this;
    }

    /**
     * Gets user_profile_country_is_empty
     *
     * @return bool|null
     */
    public function getUserProfileCountryIsEmpty()
    {
        return $this->container['user_profile_country_is_empty'];
    }

    /**
     * Sets user_profile_country_is_empty
     *
     * @param bool|null $user_profile_country_is_empty user_profile_country_is_empty
     *
     * @return self
     */
    public function setUserProfileCountryIsEmpty($user_profile_country_is_empty)
    {
        if (is_null($user_profile_country_is_empty)) {
            throw new \InvalidArgumentException('non-nullable user_profile_country_is_empty cannot be null');
        }
        $this->container['user_profile_country_is_empty'] = $user_profile_country_is_empty;

        return $this;
    }

    /**
     * Gets set_igl_when_vat_id_is_available_enabled
     *
     * @return bool|null
     */
    public function getSetIglWhenVatIdIsAvailableEnabled()
    {
        return $this->container['set_igl_when_vat_id_is_available_enabled'];
    }

    /**
     * Sets set_igl_when_vat_id_is_available_enabled
     *
     * @param bool|null $set_igl_when_vat_id_is_available_enabled set_igl_when_vat_id_is_available_enabled
     *
     * @return self
     */
    public function setSetIglWhenVatIdIsAvailableEnabled($set_igl_when_vat_id_is_available_enabled)
    {
        if (is_null($set_igl_when_vat_id_is_available_enabled)) {
            throw new \InvalidArgumentException('non-nullable set_igl_when_vat_id_is_available_enabled cannot be null');
        }
        $this->container['set_igl_when_vat_id_is_available_enabled'] = $set_igl_when_vat_id_is_available_enabled;

        return $this;
    }

    /**
     * Gets rates_from
     *
     * @return string|null
     */
    public function getRatesFrom()
    {
        return $this->container['rates_from'];
    }

    /**
     * Sets rates_from
     *
     * @param string|null $rates_from rates_from
     *
     * @return self
     */
    public function setRatesFrom($rates_from)
    {
        if (is_null($rates_from)) {
            throw new \InvalidArgumentException('non-nullable rates_from cannot be null');
        }
        $this->container['rates_from'] = $rates_from;

        return $this;
    }

    /**
     * Gets vat_id_from
     *
     * @return string|null
     */
    public function getVatIdFrom()
    {
        return $this->container['vat_id_from'];
    }

    /**
     * Sets vat_id_from
     *
     * @param string|null $vat_id_from vat_id_from
     *
     * @return self
     */
    public function setVatIdFrom($vat_id_from)
    {
        if (is_null($vat_id_from)) {
            throw new \InvalidArgumentException('non-nullable vat_id_from cannot be null');
        }
        $this->container['vat_id_from'] = $vat_id_from;

        return $this;
    }

    /**
     * Gets is_distance_sale
     *
     * @return bool|null
     */
    public function getIsDistanceSale()
    {
        return $this->container['is_distance_sale'];
    }

    /**
     * Sets is_distance_sale
     *
     * @param bool|null $is_distance_sale is_distance_sale
     *
     * @return self
     */
    public function setIsDistanceSale($is_distance_sale)
    {
        if (is_null($is_distance_sale)) {
            throw new \InvalidArgumentException('non-nullable is_distance_sale cannot be null');
        }
        $this->container['is_distance_sale'] = $is_distance_sale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


